<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___rest_8h" kind="file">
    <compoundname>Serval_Rest.h</compoundname>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___types_8h" local="no">Serval_Types.h</includes>
    <includes refid="_serval___http_8h" local="no">Serval_Http.h</includes>
    <includes refid="_serval___coap_8h" local="no">Serval_Coap.h</includes>
    <includes refid="_serval___msg_8h" local="no">Serval_Msg.h</includes>
    <includedby refid="_serval___resources_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</includedby>
    <includedby refid="_serval___rest_client_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h</includedby>
    <includedby refid="_serval___rest_server_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestServer.h</includedby>
    <incdepgraph>
      <node id="31252">
        <label>stdbool.h</label>
      </node>
      <node id="31245">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="31246" relation="include">
        </childnode>
        <childnode refid="31286" relation="include">
        </childnode>
      </node>
      <node id="31256">
        <label>stdarg.h</label>
      </node>
      <node id="31283">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31268">
        <label>list.h</label>
      </node>
      <node id="31270">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="31271" relation="include">
        </childnode>
        <childnode refid="31250" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
      </node>
      <node id="31289">
        <label>Serval_StringDescr.h</label>
        <link refid="_serval___string_descr_8h"/>
        <childnode refid="31245" relation="include">
        </childnode>
      </node>
      <node id="31248">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="31249" relation="include">
        </childnode>
      </node>
      <node id="31251">
        <label>stdint.h</label>
      </node>
      <node id="31249">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="31250" relation="include">
        </childnode>
      </node>
      <node id="31254">
        <label>stdlib.h</label>
      </node>
      <node id="31286">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="31288">
        <label>Serval_Policy.h</label>
        <link refid="_serval___policy_8h"/>
      </node>
      <node id="31262">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="31265">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="31266" relation="include">
        </childnode>
      </node>
      <node id="31273">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="31275">
        <label>user.h</label>
      </node>
      <node id="31269">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="31249" relation="include">
        </childnode>
        <childnode refid="31270" relation="include">
        </childnode>
        <childnode refid="31273" relation="include">
        </childnode>
      </node>
      <node id="31243">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h</label>
        <link refid="Serval_Rest.h"/>
        <childnode refid="31244" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31287" relation="include">
        </childnode>
        <childnode refid="31298" relation="include">
        </childnode>
        <childnode refid="31290" relation="include">
        </childnode>
      </node>
      <node id="31276">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31293">
        <label>Serval_Callable.h</label>
        <link refid="_serval___callable_8h"/>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31294" relation="include">
        </childnode>
      </node>
      <node id="31260">
        <label>stddef.h</label>
      </node>
      <node id="31278">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31258">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="31259" relation="include">
        </childnode>
        <childnode refid="31261" relation="include">
        </childnode>
        <childnode refid="31265" relation="include">
        </childnode>
        <childnode refid="31267" relation="include">
        </childnode>
      </node>
      <node id="31247">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="31248" relation="include">
        </childnode>
        <childnode refid="31250" relation="include">
        </childnode>
        <childnode refid="31255" relation="include">
        </childnode>
        <childnode refid="31256" relation="include">
        </childnode>
        <childnode refid="31257" relation="include">
        </childnode>
        <childnode refid="31254" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31258" relation="include">
        </childnode>
        <childnode refid="31269" relation="include">
        </childnode>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31255">
        <label>limits.h</label>
      </node>
      <node id="31290">
        <label>Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="31244" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31289" relation="include">
        </childnode>
        <childnode refid="31291" relation="include">
        </childnode>
        <childnode refid="31292" relation="include">
        </childnode>
        <childnode refid="31293" relation="include">
        </childnode>
        <childnode refid="31295" relation="include">
        </childnode>
        <childnode refid="31288" relation="include">
        </childnode>
        <childnode refid="31297" relation="include">
        </childnode>
      </node>
      <node id="31287">
        <label>Serval_Http.h</label>
        <link refid="_serval___http_8h"/>
        <childnode refid="31244" relation="include">
        </childnode>
        <childnode refid="31288" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31289" relation="include">
        </childnode>
        <childnode refid="31290" relation="include">
        </childnode>
      </node>
      <node id="31264">
        <label>portable.h</label>
      </node>
      <node id="31272">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="31253">
        <label>string.h</label>
      </node>
      <node id="31271">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="31272" relation="include">
        </childnode>
        <childnode refid="31249" relation="include">
        </childnode>
      </node>
      <node id="31294">
        <label>Serval_StructCtx.h</label>
        <link refid="_serval___struct_ctx_8h"/>
        <childnode refid="31260" relation="include">
        </childnode>
      </node>
      <node id="31250">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31252" relation="include">
        </childnode>
        <childnode refid="31253" relation="include">
        </childnode>
        <childnode refid="31254" relation="include">
        </childnode>
      </node>
      <node id="31297">
        <label>Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="31245" relation="include">
        </childnode>
        <childnode refid="31288" relation="include">
        </childnode>
        <childnode refid="31290" relation="include">
        </childnode>
      </node>
      <node id="31295">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="31296" relation="include">
        </childnode>
        <childnode refid="31245" relation="include">
        </childnode>
      </node>
      <node id="31263">
        <label>projdefs.h</label>
      </node>
      <node id="31285">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="31296">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="31249" relation="include">
        </childnode>
      </node>
      <node id="31284">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31292">
        <label>Serval_Filesystem.h</label>
        <link refid="_serval___filesystem_8h"/>
        <childnode refid="31245" relation="include">
        </childnode>
      </node>
      <node id="31244">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="31298">
        <label>Serval_Coap.h</label>
        <link refid="_serval___coap_8h"/>
        <childnode refid="31244" relation="include">
        </childnode>
        <childnode refid="31288" relation="include">
        </childnode>
      </node>
      <node id="31280">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31266">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="31281">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31291">
        <label>Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="31289" relation="include">
        </childnode>
      </node>
      <node id="31279">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31267">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="31268" relation="include">
        </childnode>
      </node>
      <node id="31282">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31261">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31248" relation="include">
        </childnode>
        <childnode refid="31262" relation="include">
        </childnode>
      </node>
      <node id="31246">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="31247" relation="include">
        </childnode>
      </node>
      <node id="31259">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="31260" relation="include">
        </childnode>
        <childnode refid="31251" relation="include">
        </childnode>
        <childnode refid="31261" relation="include">
        </childnode>
        <childnode refid="31263" relation="include">
        </childnode>
        <childnode refid="31264" relation="include">
        </childnode>
      </node>
      <node id="31257">
        <label>stdio.h</label>
      </node>
      <node id="31277">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="31274" relation="include">
        </childnode>
      </node>
      <node id="31274">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="31275" relation="include">
        </childnode>
        <childnode refid="31276" relation="include">
        </childnode>
        <childnode refid="31277" relation="include">
        </childnode>
        <childnode refid="31278" relation="include">
        </childnode>
        <childnode refid="31279" relation="include">
        </childnode>
        <childnode refid="31280" relation="include">
        </childnode>
        <childnode refid="31281" relation="include">
        </childnode>
        <childnode refid="31282" relation="include">
        </childnode>
        <childnode refid="31283" relation="include">
        </childnode>
        <childnode refid="31284" relation="include">
        </childnode>
        <childnode refid="31285" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="31300">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</label>
        <link refid="_serval___resources_8h"/>
      </node>
      <node id="31301">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h</label>
        <link refid="_serval___rest_client_8h"/>
      </node>
      <node id="31299">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h</label>
        <link refid="Serval_Rest.h"/>
        <childnode refid="31300" relation="include">
        </childnode>
        <childnode refid="31301" relation="include">
        </childnode>
        <childnode refid="31302" relation="include">
        </childnode>
      </node>
      <node id="31302">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestServer.h</label>
        <link refid="_serval___rest_server_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_rest_parser___s" prot="public">RestParser_S</innerclass>
    <innerclass refid="struct_rest_serializer___s" prot="public">RestSerializer_S</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___rest_8h_1ae218db08aad14053ce85d53e8fea037a" prot="public" static="no">
        <name>REST_HTTP_PAYLOAD_MAX_LEN</name>
        <initializer>48</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the length of the payload buffer of a HTTP REST message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="131" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___rest_8h_1aa663b99918cb772ec09355eb1f187e70" prot="public" static="no">
        <name>REST_MAX_URI_LEN</name>
        <initializer>128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the length of the uri buffer used in the REST server module. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="137" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___rest_8h_1a2cab65f174d51514dcc457d1a601da18" prot="public" static="no">
        <name>SERVAL_ENABLE_REST_SERVER_OBSERVATION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable &apos;&apos;SERVAL_ENABLE_REST_HTTP_BINDING&apos;&apos; in order to enable the RESTful HTTP binding code. Enable &apos;&apos;SERVAL_ENABLE_REST_COAP_BINDING&apos;&apos; in order to enable the RESTful COAP binding code. if SERVAL_ENABLE_REST =&gt; HTTP or COAP binding (or both) must be enabled if SERVAL_ENABLE_REST_HTTP_BINDING =&gt; HTTP must be enabled if REST Client and HTTP binding =&gt; HTTP Client must be enabled if REST Server and HTTP binding =&gt; HTTP Server must be enabled if SERVAL_ENABLE_REST_COAP_BINDING =&gt; COAP must be enabled if REST Client and COAP binding =&gt; COAP Client must be enabled if REST Server and COAP binding =&gt; COAP Server must be enabled Enable &apos;&apos;SERVAL_ENABLE_REST_OBSERVATION&apos;&apos; in order to enable the possiblity to observe resources of the REST server using CoAP.</para><para><simplesect kind="since"><para>1.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="124" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92a" prot="public" static="no">
        <name>Rest_Code_E</name>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aae2f9c276e8e710837dcf824845aec38d" prot="public">
          <name>REST_CREATED</name>
          <initializer>=  65</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7fb7ffc13e74ddaeb4e7020af13a0a6a" prot="public">
          <name>REST_DELETED</name>
          <initializer>=  66</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaa1158c95082e3c57cf62b735823174ef" prot="public">
          <name>REST_VALID</name>
          <initializer>=  67</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3207b448a90ae739f03575fed885c274" prot="public">
          <name>REST_CHANGED</name>
          <initializer>=  68</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2cdf7d8f72a6cd6ade3916a70aef9008" prot="public">
          <name>REST_CONTENT</name>
          <initializer>=  69</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3f9682621cdb8c9003ee554c333880fe" prot="public">
          <name>REST_BAD_REQUEST</name>
          <initializer>= 128</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaf54af7557357ea6dd903c1e35c40ae28" prot="public">
          <name>REST_UNAUTHORIZED</name>
          <initializer>= 129</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa19193fa5e1725652e53fa0bcc5911dde" prot="public">
          <name>REST_BAD_OPTION</name>
          <initializer>= 130</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa35793f3f56c2b451c21660e15c1ed4a2" prot="public">
          <name>REST_FORBIDDEN</name>
          <initializer>= 131</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaeacf800ca777713dc10c3ec2d3a3e399" prot="public">
          <name>REST_NOT_FOUND</name>
          <initializer>= 132</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3a31f9992306afabc1e2f83ce2d46a19" prot="public">
          <name>REST_METHOD_NOT_ALLOWED</name>
          <initializer>= 133</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac02230ef4606d9ed2cb74654cd36561e" prot="public">
          <name>REST_NOT_ACCEPTABLE</name>
          <initializer>= 134</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac91c78f982d8b417cd77ca9bf90c333e" prot="public">
          <name>REST_PRECONDITION_FAILED</name>
          <initializer>= 140</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aacee4b9d8320e2f21d588c8d9b0ba7ceb" prot="public">
          <name>REST_REQUEST_ENTITY_TOO_LARGE</name>
          <initializer>= 141</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa47dadb4123e7ac41e0d922762e03bd52" prot="public">
          <name>REST_REQUEST_URI_TOO_LARGE</name>
          <initializer>= 142</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2e0cc34a764aa1ea22b01ed02eb4e352" prot="public">
          <name>REST_UNSUPPORTED_CONTENT_FORMAT</name>
          <initializer>= 143</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa849e9c6a702f03cb74aadecffb6da2e5" prot="public">
          <name>REST_INTERNAL_SERVER_ERROR</name>
          <initializer>= 160</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa8a259a080dc5bb9931a77f798cd84c66" prot="public">
          <name>REST_NOT_IMPLEMENTED</name>
          <initializer>= 161</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa9b1d749e5e8ab44e2b1e758738654925" prot="public">
          <name>REST_BAD_GATEWAY</name>
          <initializer>= 162</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3e4e33dc13ccb51dea8b7a412e573b6c" prot="public">
          <name>REST_SERVICE_UNAVAILABLE</name>
          <initializer>= 163</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7ae12875915ba2b6093e7ae80f167cc3" prot="public">
          <name>REST_GATEWAY_TIMEOUT</name>
          <initializer>= 164</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa1969160f9dc3c73af30979448cff85ba" prot="public">
          <name>REST_PROXYING_NOT_SUPPORTED</name>
          <initializer>= 165</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the response codes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="160" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="159" bodyend="183"/>
      </memberdef>
      <memberdef kind="enum" id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51ed" prot="public" static="no">
        <name>Rest_ContentFormat_E</name>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda085ed4314e942bcf3c40b3b517991703" prot="public">
          <name>REST_CONTENT_FMT_TEXT_UTF8</name>
          <initializer>=     0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda5f5c46cdbe55042792807a33f84a27b6" prot="public">
          <name>REST_CONTENT_FMT_LINK_FORMAT</name>
          <initializer>=    40</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda66ab40492c89a681ce1ec1d916a2f96d" prot="public">
          <name>REST_CONTENT_FMT_XML</name>
          <initializer>=    41</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edae1c2ee3b3bdc3be534cd8a909c2c98e0" prot="public">
          <name>REST_CONTENT_FMT_OCTET_STREAM</name>
          <initializer>=    42</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda6a497180e3c0943ac06b73448450ef8b" prot="public">
          <name>REST_CONTENT_FMT_EXI</name>
          <initializer>=    47</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda4bd55afb30c61882fde8ffebc1f7d1e3" prot="public">
          <name>REST_CONTENT_FMT_JSON</name>
          <initializer>=    50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edac507ff181b42af6142d2a0a2c8f903d4" prot="public">
          <name>REST_CONTENT_FMT_MAX</name>
          <initializer>= 65535</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edacc24a33000f7c5105ba3679fdd170a50" prot="public">
          <name>REST_CONTENT_FMT_HTML</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the content formats </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="188" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="187" bodyend="198"/>
      </memberdef>
      <memberdef kind="enum" id="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69" prot="public" static="no">
        <name>Rest_Method_E</name>
        <enumvalue id="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a02ced3c5e0a56e8678da531813ce1c9d" prot="public">
          <name>REST_GET</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6c4e86ee86eeeb33c535992d67e2c04e" prot="public">
          <name>REST_POST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6f1cd8075f89c3b4aa706b386763f390" prot="public">
          <name>REST_PUT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69addf1cbe653e9e59c0a33ea397ff1330c" prot="public">
          <name>REST_DELETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the request methods </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="150" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="149" bodyend="155"/>
      </memberdef>
      <memberdef kind="enum" id="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" prot="public" static="no">
        <name>Rest_Protocol_T</name>
        <enumvalue id="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8a9e2100477d4dcb72de05c43c91fe3ee0" prot="public">
          <name>REST_PROTOCOL_COAP</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8af2db2f652ebce43cf1d432b0531029bb" prot="public">
          <name>REST_PROTOCOL_HTTP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the possible protocols of a REST message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="238" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="enum" id="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645b" prot="public" static="no">
        <name>RestSerializeType_T</name>
        <enumvalue id="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645bacb8e24c729a6cc66334481b4f8c8d7bf" prot="public">
          <name>REST_RESPONSE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645baf11401e66e0543dc5754c69727c4dec0" prot="public">
          <name>REST_REQUEST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum gives the type of REST message being serialized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="217" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="216" bodyend="220"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___rest_8h_1a0e15d7b65ce3bccdce46bf1d1201ac8a" prot="public" static="no">
        <type>enum <ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92a" kindref="member">Rest_Code_E</ref></type>
        <definition>typedef enum Rest_Code_E  Rest_Code_T</definition>
        <argsstring></argsstring>
        <name>Rest_Code_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the response codes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" prot="public" static="no">
        <type>enum <ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51ed" kindref="member">Rest_ContentFormat_E</ref></type>
        <definition>typedef enum Rest_ContentFormat_E  Rest_ContentFormat_T</definition>
        <argsstring></argsstring>
        <name>Rest_ContentFormat_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the content formats </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1a8c84c4ec5aad636a4aeb8ed06c9c7b28" prot="public" static="no">
        <type>enum <ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69" kindref="member">Rest_Method_E</ref></type>
        <definition>typedef enum Rest_Method_E  Rest_Method_T</definition>
        <argsstring></argsstring>
        <name>Rest_Method_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum defines the request methods </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1a4e720c40277d0f728b060bc5320ed92f" prot="public" static="no">
        <type>struct RestMsg_S</type>
        <definition>typedef struct RestMsg_S RestMsg_T</definition>
        <argsstring></argsstring>
        <name>RestMsg_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The data structure for RESTful messages.</para><para><simplesect kind="see"><para>struct RestMsg_S </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="34" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" prot="public" static="no">
        <type>struct <ref refid="struct_rest_parser___s" kindref="compound">RestParser_S</ref></type>
        <definition>typedef struct RestParser_S  RestParser_T</definition>
        <argsstring></argsstring>
        <name>RestParser_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This data structure represents a parsing context used during parsing of an incoming REST message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t RestPayloadLength_t</definition>
        <argsstring></argsstring>
        <name>RestPayloadLength_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="34" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1a496d87ae3bc48c6b7ad05fd546635fd4" prot="public" static="no">
        <type>struct <ref refid="struct_rest_serializer___s" kindref="compound">RestSerializer_S</ref></type>
        <definition>typedef struct RestSerializer_S  RestSerializer_T</definition>
        <argsstring></argsstring>
        <name>RestSerializer_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This data structure represents a serialization context used during serializing of an outgoing REST message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_8h_1abaf8a4973e012ac469460a6947690303" prot="public" static="no">
        <type>void</type>
        <definition>typedef void RestSession_T</definition>
        <argsstring></argsstring>
        <name>RestSession_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This data type identifies an ongoing rest communication initiated by rest client and can be used to identify and relate a fault in communication e.g. with the request sent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="248" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___rest_8h_1ad3b87e441e9e875113bbd5572446fdbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___msg___obsolete_8h_1a4e720c40277d0f728b060bc5320ed92f" kindref="member">RestMsg_T</ref> *</type>
        <definition>RestMsg_T* Msg_getRestMsg</definition>
        <argsstring>(Msg_T *msg_ptr)</argsstring>
        <name>Msg_getRestMsg</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function provides a pointer to the structure holding REST message in the given Msg_T object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Msg_T object. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer of type RestMsg_T to the required REST message structure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a0a76e8339689e24f496398b2d6a3ec9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></type>
        <definition>Rest_Protocol_T RestMsg_getProtocol</definition>
        <argsstring>(RestMsg_T *restMsg_ptr)</argsstring>
        <name>RestMsg_getProtocol</name>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a4e720c40277d0f728b060bc5320ed92f" kindref="member">RestMsg_T</ref> *</type>
          <declname>restMsg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the underlying protocol of a rest message</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">The</parametername>
</parameternamelist>
<parameterdescription>
<para>rest message for which to get the protocol</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The protocol type of the message</para></simplesect>
<simplesect kind="since"><para>1.5 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1ae0cad346d39d2dfee35c01117799f270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RestMsg_setAppCallback</definition>
        <argsstring>(Msg_T *msg_ptr, AppCallback_T appCallback)</argsstring>
        <name>RestMsg_setAppCallback</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg_8h_1ab0a54c0b450f8d11fca98eb4bfbbbb8a" kindref="member">AppCallback_T</ref></type>
          <declname>appCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to initialize application callback defined by application to inform it of some event.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Msg_T object which holds the current message. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a AppCallback_T object, this holds the application callback to be called to inform application about the success or failure of response.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="since"><para>1.3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1accb401b99794b7577025d5aaddbadc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getAccept</definition>
        <argsstring>(RestParser_T *parser_ptr, Rest_ContentFormat_T *formatBuffer_ptr, uint8_t formatBufferLen, uint8_t *numFormats_ptr)</argsstring>
        <name>RestParser_getAccept</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref> *</type>
          <declname>formatBuffer_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>formatBufferLen</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>numFormats_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the accepted formats which are stored in the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">formatBuffer_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the buffer which is provided for storing the different acceptable Content Formats.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">formatBufferLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the buffer which is provided for storing the acceptable Content Formats.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">numFormats_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the uint8_t object where the extracted number of acceptable Content Formats will be stored to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_BUFFER_TOO_SMALL if the number of acceptable content formats defined in the message is greater than the capacity of the given buffer RC_REST_BINDING_PARSING_ERROR if an error has occurred during the parsing </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a984022ed1e53576cba12d764be1e5e60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getCode</definition>
        <argsstring>(RestParser_T *parser_ptr, Rest_Code_T *code_ptr)</argsstring>
        <name>RestParser_getCode</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1a0e15d7b65ce3bccdce46bf1d1201ac8a" kindref="member">Rest_Code_T</ref> *</type>
          <declname>code_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Code of the given message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">code_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Rest_Code_T object were the Code of the message should be copied to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_UNKNOWN_STATUS_CODE if the Code is not known. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a91dba78b6bcc55986319c136e28c5bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getContentFormat</definition>
        <argsstring>(RestParser_T *parser_ptr, Rest_ContentFormat_T *format_ptr)</argsstring>
        <name>RestParser_getContentFormat</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref> *</type>
          <declname>format_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Content Format which is stored in the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">format_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the Rest_ContentFormat_T which is provided for storing the value of the Content Format option.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_PARSER_NO_CONTENT_FORMAT if the content format is not specified RC_REST_BINDING_PARSING_ERROR if an error has occurred during the parsing RC_REST_PARSER_UNSUPPORTED_CONTENT_FORMAT in case of an HTTP message if the HTTP content type can not be mapped to a REST content format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a33731abbe4d8a7f10e8b7e9e47923db7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getLocationPath</definition>
        <argsstring>(RestParser_T *parser_ptr, char *buffer_ptr, uint8_t bufferLen)</argsstring>
        <name>RestParser_getLocationPath</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bufferLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Location Path as a string of an incoming message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the buffer which is provided for storing the Location Path. The returned string is null terminated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the allocated buffer which is provided to store the Location Path.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_BUFFER_TOO_SMALL if the string is larger than the provided buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a36207b80bb8aac80c3fd0952947a28b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getLocationQuery</definition>
        <argsstring>(RestParser_T *parser_ptr, char *buffer_ptr, uint8_t bufferLen)</argsstring>
        <name>RestParser_getLocationQuery</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bufferLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Location Query as a string of an incoming message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the buffer which is provided for storing the Location Query. The returned string is null terminated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the allocated buffer which is provided to store the Location Query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_BUFFER_TOO_SMALL if the string is larger than the provided buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a4d3c247cde6dc64307c8fd8aacd40e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getMethod</definition>
        <argsstring>(RestParser_T *parser_ptr, Rest_Method_T *method_ptr)</argsstring>
        <name>RestParser_getMethod</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1a8c84c4ec5aad636a4aeb8ed06c9c7b28" kindref="member">Rest_Method_T</ref> *</type>
          <declname>method_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the Method of the given message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">method_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Rest_Method_T object were the Method of the message should be copied to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_PARSER_UNSUPPORTED_METHOD if the Method is not known. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a63f73566ae89e262e99f8dcdfbe39e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RestParser_getPayload</definition>
        <argsstring>(RestParser_T *parser_ptr, uint8_t const **payload_pptr, RestPayloadLength_t *payloadLen_ptr)</argsstring>
        <name>RestParser_getPayload</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>uint8_t const **</type>
          <declname>payload_pptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" kindref="member">RestPayloadLength_t</ref> *</type>
          <declname>payloadLen_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the payload of an incoming message. The implementation of this function will parse through all the options in case of CoAP is used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">payload_pptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output parameter for the payload reference. It must be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">payloadLen_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Output paramter for the payload length. It must be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a5b406da6b75032bd75cb738d0376a8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getRange</definition>
        <argsstring>(RestParser_T *parser_ptr, uint32_t *offset, bool *complete)</argsstring>
        <name>RestParser_getRange</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>complete</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the offset of the range of the message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset of this range.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">complete</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the range is complete, false otherwise</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful RC_REST_BINDING_PARSING_ERROR if the range length does not match the content length RC_REST_PARSER_MESSAGE_NOT_SPLIT if the message does not contain a range </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="508" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1aea6598ccf87ec8b5383df848a979e890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getUriPath</definition>
        <argsstring>(RestParser_T *parser_ptr, char *buffer_ptr, uint8_t bufferLen)</argsstring>
        <name>RestParser_getUriPath</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bufferLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the URI Path as a string of an incoming message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the buffer which is provided for storing the URI Path. The returned string is null terminated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the allocated buffer which is provided to store the URI Path.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_BUFFER_TOO_SMALL if the string is larger than the provided buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1aa1202756022ac2a0e28b3f5e3cc7f281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestParser_getUriQuery</definition>
        <argsstring>(RestParser_T *parser_ptr, char *buffer_ptr, uint8_t bufferLen)</argsstring>
        <name>RestParser_getUriQuery</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer_ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bufferLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function retrieves the URI Query as a string of an incoming message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the buffer which is provided for storing the URI Query. The returned string is null terminated.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bufferLen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the allocated buffer which is provided to store the URI Query.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_BUFFER_TOO_SMALL if the string is larger than the provided buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="440" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_8h_1a447f240610de11ffa8bfb7dedee57598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RestParser_setup</definition>
        <argsstring>(RestParser_T *parser_ptr, Msg_T *msg_ptr)</argsstring>
        <name>RestParser_setup</name>
        <param>
          <type><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref> *</type>
          <declname>parser_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to initialize the context of the REST parser for parsing a given message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">parser_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a RestParser_T object which identifies the instance of parsing context which should be setup. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to message which should be parsed. The content will not be changed. It has to be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h" line="302" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to REST constants and methods</para><para>This module provides declarations which are commonly used by REST. This also provides the common interfaces provided by REST module e.g. interfaces to parse a REST message. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor">#ifndef<sp/>SERVAL_REST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_REST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_LARGE_PAYLOAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" kindref="member">RestPayloadLength_t</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" kindref="member">RestPayloadLength_t</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor">#ifndef<sp/>SERVAL_ENABLE_REST_HTTP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_REST_HTTP_BINDING<sp/>(SERVAL_ENABLE_REST<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_HTTP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor">#ifndef<sp/>SERVAL_ENABLE_REST_COAP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_REST_COAP_BINDING<sp/>(SERVAL_ENABLE_REST<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_COAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST<sp/>&amp;&amp;<sp/>(!SERVAL_ENABLE_REST_HTTP_BINDING)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!SERVAL_ENABLE_REST_COAP_BINDING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>COAP<sp/>or<sp/>HTTP<sp/>binding<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>REST<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_HTTP_BINDING<sp/>&amp;&amp;<sp/>!SERVAL_ENABLE_HTTP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>HTTP<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>HTTP<sp/>REST<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_CLIENT<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_REST_HTTP_BINDING<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/><sp/>!SERVAL_ENABLE_HTTP_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>HTTP<sp/>client<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>REST<sp/>client<sp/>with<sp/>HTTP<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_SERVER<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_REST_HTTP_BINDING<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/>!SERVAL_ENABLE_HTTP_SERVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>HTTP<sp/>server<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>REST<sp/>server<sp/>with<sp/>HTTP<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_COAP_BINDING<sp/>&amp;&amp;<sp/>!SERVAL_ENABLE_COAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>COAP<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>COAP<sp/>REST<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_CLIENT<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_REST_COAP_BINDING<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/><sp/>!SERVAL_ENABLE_COAP_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>COAP<sp/>client<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>REST<sp/>client<sp/>with<sp/>COAP<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_SERVER<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_REST_COAP_BINDING<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/>!SERVAL_ENABLE_COAP_SERVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>COAP<sp/>server<sp/>must<sp/>be<sp/>enabled<sp/>when<sp/>REST<sp/>server<sp/>with<sp/>COAP<sp/>binding<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_HTTP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___http_8h" kindref="compound">Serval_Http.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_COAP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___coap_8h" kindref="compound">Serval_Coap.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_8h" kindref="compound">Serval_Msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor">#ifndef<sp/>SERVAL_ENABLE_REST_SERVER_OBSERVATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="_serval___rest_8h_1a2cab65f174d51514dcc457d1a601da18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_REST_SERVER_OBSERVATION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor">#ifndef<sp/>REST_HTTP_PAYLOAD_MAX_LEN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="_serval___rest_8h_1ae218db08aad14053ce85d53e8fea037a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REST_HTTP_PAYLOAD_MAX_LEN<sp/><sp/><sp/><sp/>48</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="_serval___rest_8h_1aa663b99918cb772ec09355eb1f187e70" refkind="member"><highlight class="preprocessor">#define<sp/>REST_MAX_URI_LEN<sp/>128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_REMOVE_SPECIALIZED_ACCESSORS_FROM_MSG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="_serval___rest_8h_1a4e720c40277d0f728b060bc5320ed92f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RestMsg_S<sp/><ref refid="_serval___msg___obsolete_8h_1a4e720c40277d0f728b060bc5320ed92f" kindref="member">RestMsg_T</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69" kindref="member">Rest_Method_E</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151" refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a02ced3c5e0a56e8678da531813ce1c9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a02ced3c5e0a56e8678da531813ce1c9d" kindref="member">REST_GET</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="152" refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6c4e86ee86eeeb33c535992d67e2c04e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6c4e86ee86eeeb33c535992d67e2c04e" kindref="member">REST_POST</ref>,</highlight></codeline>
<codeline lineno="153" refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6f1cd8075f89c3b4aa706b386763f390" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69a6f1cd8075f89c3b4aa706b386763f390" kindref="member">REST_PUT</ref>,</highlight></codeline>
<codeline lineno="154" refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69addf1cbe653e9e59c0a33ea397ff1330c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ad1b8998d4519e3286183f134a9eccc69addf1cbe653e9e59c0a33ea397ff1330c" kindref="member">REST_DELETE</ref>,</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1a8c84c4ec5aad636a4aeb8ed06c9c7b28" kindref="member">Rest_Method_T</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92a" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92a" kindref="member">Rest_Code_E</ref></highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aae2f9c276e8e710837dcf824845aec38d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aae2f9c276e8e710837dcf824845aec38d" kindref="member">REST_CREATED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>65,<sp/></highlight><highlight class="comment">/*<sp/>2.01<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7fb7ffc13e74ddaeb4e7020af13a0a6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7fb7ffc13e74ddaeb4e7020af13a0a6a" kindref="member">REST_DELETED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>66,<sp/></highlight><highlight class="comment">/*<sp/>2.02<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaa1158c95082e3c57cf62b735823174ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaa1158c95082e3c57cf62b735823174ef" kindref="member">REST_VALID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>67,<sp/></highlight><highlight class="comment">/*<sp/>2.03<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3207b448a90ae739f03575fed885c274" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3207b448a90ae739f03575fed885c274" kindref="member">REST_CHANGED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>68,<sp/></highlight><highlight class="comment">/*<sp/>2.04<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2cdf7d8f72a6cd6ade3916a70aef9008" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2cdf7d8f72a6cd6ade3916a70aef9008" kindref="member">REST_CONTENT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>69,<sp/></highlight><highlight class="comment">/*<sp/>2.05<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3f9682621cdb8c9003ee554c333880fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3f9682621cdb8c9003ee554c333880fe" kindref="member">REST_BAD_REQUEST</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>128,<sp/></highlight><highlight class="comment">/*<sp/>4.00<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaf54af7557357ea6dd903c1e35c40ae28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaf54af7557357ea6dd903c1e35c40ae28" kindref="member">REST_UNAUTHORIZED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>129,<sp/></highlight><highlight class="comment">/*<sp/>4.01<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa19193fa5e1725652e53fa0bcc5911dde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa19193fa5e1725652e53fa0bcc5911dde" kindref="member">REST_BAD_OPTION</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>130,<sp/></highlight><highlight class="comment">/*<sp/>4.02<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa35793f3f56c2b451c21660e15c1ed4a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa35793f3f56c2b451c21660e15c1ed4a2" kindref="member">REST_FORBIDDEN</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>131,<sp/></highlight><highlight class="comment">/*<sp/>4.03<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaeacf800ca777713dc10c3ec2d3a3e399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aaeacf800ca777713dc10c3ec2d3a3e399" kindref="member">REST_NOT_FOUND</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>132,<sp/></highlight><highlight class="comment">/*<sp/>4.04<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3a31f9992306afabc1e2f83ce2d46a19" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3a31f9992306afabc1e2f83ce2d46a19" kindref="member">REST_METHOD_NOT_ALLOWED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>133,<sp/></highlight><highlight class="comment">/*<sp/>4.05<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac02230ef4606d9ed2cb74654cd36561e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac02230ef4606d9ed2cb74654cd36561e" kindref="member">REST_NOT_ACCEPTABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>134,<sp/></highlight><highlight class="comment">/*<sp/>4.06<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac91c78f982d8b417cd77ca9bf90c333e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aac91c78f982d8b417cd77ca9bf90c333e" kindref="member">REST_PRECONDITION_FAILED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>140,<sp/></highlight><highlight class="comment">/*<sp/>4.12<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aacee4b9d8320e2f21d588c8d9b0ba7ceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aacee4b9d8320e2f21d588c8d9b0ba7ceb" kindref="member">REST_REQUEST_ENTITY_TOO_LARGE</ref><sp/><sp/><sp/>=<sp/>141,<sp/></highlight><highlight class="comment">/*<sp/>4.13<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa47dadb4123e7ac41e0d922762e03bd52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa47dadb4123e7ac41e0d922762e03bd52" kindref="member">REST_REQUEST_URI_TOO_LARGE</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>142,<sp/></highlight><highlight class="comment">/*<sp/>4.14<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2e0cc34a764aa1ea22b01ed02eb4e352" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa2e0cc34a764aa1ea22b01ed02eb4e352" kindref="member">REST_UNSUPPORTED_CONTENT_FORMAT</ref><sp/>=<sp/>143,<sp/></highlight><highlight class="comment">/*<sp/>4.15<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa849e9c6a702f03cb74aadecffb6da2e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa849e9c6a702f03cb74aadecffb6da2e5" kindref="member">REST_INTERNAL_SERVER_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>160,<sp/></highlight><highlight class="comment">/*<sp/>5.00<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa8a259a080dc5bb9931a77f798cd84c66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa8a259a080dc5bb9931a77f798cd84c66" kindref="member">REST_NOT_IMPLEMENTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>161,<sp/></highlight><highlight class="comment">/*<sp/>5.01<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa9b1d749e5e8ab44e2b1e758738654925" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa9b1d749e5e8ab44e2b1e758738654925" kindref="member">REST_BAD_GATEWAY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>162,<sp/></highlight><highlight class="comment">/*<sp/>5.02<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3e4e33dc13ccb51dea8b7a412e573b6c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa3e4e33dc13ccb51dea8b7a412e573b6c" kindref="member">REST_SERVICE_UNAVAILABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>163,<sp/></highlight><highlight class="comment">/*<sp/>5.03<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7ae12875915ba2b6093e7ae80f167cc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa7ae12875915ba2b6093e7ae80f167cc3" kindref="member">REST_GATEWAY_TIMEOUT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>164,<sp/></highlight><highlight class="comment">/*<sp/>5.04<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa1969160f9dc3c73af30979448cff85ba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1ae825eb86ddc7bc238d81af535381d92aa1969160f9dc3c73af30979448cff85ba" kindref="member">REST_PROXYING_NOT_SUPPORTED</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>165,<sp/></highlight><highlight class="comment">/*<sp/>5.05<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1a0e15d7b65ce3bccdce46bf1d1201ac8a" kindref="member">Rest_Code_T</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51ed" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51ed" kindref="member">Rest_ContentFormat_E</ref></highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda085ed4314e942bcf3c40b3b517991703" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda085ed4314e942bcf3c40b3b517991703" kindref="member">REST_CONTENT_FMT_TEXT_UTF8</ref><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="190" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda5f5c46cdbe55042792807a33f84a27b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda5f5c46cdbe55042792807a33f84a27b6" kindref="member">REST_CONTENT_FMT_LINK_FORMAT</ref><sp/><sp/>=<sp/><sp/><sp/><sp/>40,</highlight></codeline>
<codeline lineno="191" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda66ab40492c89a681ce1ec1d916a2f96d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda66ab40492c89a681ce1ec1d916a2f96d" kindref="member">REST_CONTENT_FMT_XML</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/>41,</highlight></codeline>
<codeline lineno="192" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edae1c2ee3b3bdc3be534cd8a909c2c98e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edae1c2ee3b3bdc3be534cd8a909c2c98e0" kindref="member">REST_CONTENT_FMT_OCTET_STREAM</ref><sp/>=<sp/><sp/><sp/><sp/>42,</highlight></codeline>
<codeline lineno="193" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda6a497180e3c0943ac06b73448450ef8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda6a497180e3c0943ac06b73448450ef8b" kindref="member">REST_CONTENT_FMT_EXI</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/>47,</highlight></codeline>
<codeline lineno="194" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda4bd55afb30c61882fde8ffebc1f7d1e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51eda4bd55afb30c61882fde8ffebc1f7d1e3" kindref="member">REST_CONTENT_FMT_JSON</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/><sp/><sp/>50,</highlight></codeline>
<codeline lineno="195" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edac507ff181b42af6142d2a0a2c8f903d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edac507ff181b42af6142d2a0a2c8f903d4" kindref="member">REST_CONTENT_FMT_MAX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>65535,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>HTTP<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edacc24a33000f7c5105ba3679fdd170a50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8ac9fbf05c2685fb753dd381a52e51edacc24a33000f7c5105ba3679fdd170a50" kindref="member">REST_CONTENT_FMT_HTML</ref></highlight></codeline>
<codeline lineno="198"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="struct_rest_parser___s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_rest_parser___s" kindref="compound">RestParser_S</ref></highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208" refid="struct_rest_parser___s_1a92f3f0a99936b67a2db12e6bab0d8c23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref>*<sp/><ref refid="struct_rest_parser___s_1a92f3f0a99936b67a2db12e6bab0d8c23" kindref="member">msg_ptr</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_COAP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="struct_rest_parser___s_1a1f68c6bab09ca0b5ef10b1b14243c60e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CoapParser_T<sp/><ref refid="struct_rest_parser___s_1a1f68c6bab09ca0b5ef10b1b14243c60e" kindref="member">coapParser</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1ac7f5ee29ace4785a2d337a3c28f695d3" kindref="member">RestParser_T</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645b" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218" refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645bacb8e24c729a6cc66334481b4f8c8d7bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645bacb8e24c729a6cc66334481b4f8c8d7bf" kindref="member">REST_RESPONSE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="219" refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645baf11401e66e0543dc5754c69727c4dec0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645baf11401e66e0543dc5754c69727c4dec0" kindref="member">REST_REQUEST</ref></highlight></codeline>
<codeline lineno="220"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1a705c1e43e35dd908d9195fb637af645b" kindref="member">RestSerializeType_T</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="struct_rest_serializer___s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_rest_serializer___s" kindref="compound">RestSerializer_S</ref></highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229" refid="struct_rest_serializer___s_1a92f3f0a99936b67a2db12e6bab0d8c23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref>*<sp/><ref refid="struct_rest_serializer___s_1a92f3f0a99936b67a2db12e6bab0d8c23" kindref="member">msg_ptr</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_COAP_BINDING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="struct_rest_serializer___s_1a90abec67742e2ac4bbaee31733a452a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CoapSerializer_T<sp/><ref refid="struct_rest_serializer___s_1a90abec67742e2ac4bbaee31733a452a1" kindref="member">coapSerializer</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1a496d87ae3bc48c6b7ad05fd546635fd4" kindref="member">RestSerializer_T</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239" refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8a9e2100477d4dcb72de05c43c91fe3ee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8a9e2100477d4dcb72de05c43c91fe3ee0" kindref="member">REST_PROTOCOL_COAP</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="240" refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8af2db2f652ebce43cf1d432b0531029bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8af2db2f652ebce43cf1d432b0531029bb" kindref="member">REST_PROTOCOL_HTTP</ref>,</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="_serval___rest_8h_1abaf8a4973e012ac469460a6947690303" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1abaf8a4973e012ac469460a6947690303" kindref="member">RestSession_T</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_REMOVE_SPECIALIZED_ACCESSORS_FROM_MSG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="_serval___msg___obsolete_8h_1a4e720c40277d0f728b060bc5320ed92f" kindref="member">RestMsg_T</ref>*<sp/><ref refid="_serval___rest_8h_1ad3b87e441e9e875113bbd5572446fdbb" kindref="member">Msg_getRestMsg</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref>*<sp/>msg_ptr);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref><sp/><ref refid="_serval___rest_8h_1a0a76e8339689e24f496398b2d6a3ec9c" kindref="member">RestMsg_getProtocol</ref>(<ref refid="_serval___msg___obsolete_8h_1a4e720c40277d0f728b060bc5320ed92f" kindref="member">RestMsg_T</ref>*<sp/>restMsg_ptr);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1ae0cad346d39d2dfee35c01117799f270" kindref="member">RestMsg_setAppCallback</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,<sp/><ref refid="_serval___msg_8h_1ab0a54c0b450f8d11fca98eb4bfbbbb8a" kindref="member">AppCallback_T</ref><sp/>appCallback);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1a447f240610de11ffa8bfb7dedee57598" kindref="member">RestParser_setup</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,<sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_8h_1a63f73566ae89e262e99f8dcdfbe39e52" kindref="member">RestParser_getPayload</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**payload_pptr,<sp/><ref refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" kindref="member">RestPayloadLength_t</ref>*<sp/>payloadLen_ptr);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a4d3c247cde6dc64307c8fd8aacd40e27" kindref="member">RestParser_getMethod</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8c84c4ec5aad636a4aeb8ed06c9c7b28" kindref="member">Rest_Method_T</ref><sp/>*method_ptr);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a984022ed1e53576cba12d764be1e5e60" kindref="member">RestParser_getCode</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,<sp/><ref refid="_serval___rest_8h_1a0e15d7b65ce3bccdce46bf1d1201ac8a" kindref="member">Rest_Code_T</ref><sp/>*code_ptr);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1aea6598ccf87ec8b5383df848a979e890" kindref="member">RestParser_getUriPath</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_ptr,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bufferLen);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a33731abbe4d8a7f10e8b7e9e47923db7" kindref="member">RestParser_getLocationPath</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_ptr,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bufferLen);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a36207b80bb8aac80c3fd0952947a28b5" kindref="member">RestParser_getLocationQuery</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_ptr,<sp/>uint8_t<sp/>bufferLen);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1aa1202756022ac2a0e28b3f5e3cc7f281" kindref="member">RestParser_getUriQuery</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_ptr,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bufferLen);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1accb401b99794b7577025d5aaddbadc68" kindref="member">RestParser_getAccept</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref><sp/>*formatBuffer_ptr,<sp/>uint8_t<sp/>formatBufferLen,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*numFormats_ptr);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a91dba78b6bcc55986319c136e28c5bbd" kindref="member">RestParser_getContentFormat</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref><sp/>*parser_ptr,</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref><sp/>*format_ptr);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_8h_1a5b406da6b75032bd75cb738d0376a8c8" kindref="member">RestParser_getRange</ref>(<ref refid="struct_rest_parser___s" kindref="compound">RestParser_T</ref>*<sp/>parser_ptr,<sp/>uint32_t*<sp/>offset,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*complete);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_REST<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_REST_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h"/>
  </compounddef>
</doxygen>
