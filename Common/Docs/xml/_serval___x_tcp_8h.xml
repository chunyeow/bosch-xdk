<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___x_tcp_8h" kind="file">
    <compoundname>Serval_XTcp.h</compoundname>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___msg_8h" local="no">Serval_Msg.h</includes>
    <includedby refid="_serval___resources_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</includedby>
    <includedby refid="_serval___x_tcp_client_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpClient.h</includedby>
    <includedby refid="_serval___x_tcp_server_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpServer.h</includedby>
    <incdepgraph>
      <node id="32167">
        <label>stdbool.h</label>
      </node>
      <node id="32160">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="32161" relation="include">
        </childnode>
        <childnode refid="32201" relation="include">
        </childnode>
      </node>
      <node id="32171">
        <label>stdarg.h</label>
      </node>
      <node id="32198">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32183">
        <label>list.h</label>
      </node>
      <node id="32185">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="32186" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
      </node>
      <node id="32202">
        <label>Serval_StringDescr.h</label>
        <link refid="_serval___string_descr_8h"/>
        <childnode refid="32160" relation="include">
        </childnode>
      </node>
      <node id="32163">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="32164" relation="include">
        </childnode>
      </node>
      <node id="32166">
        <label>stdint.h</label>
      </node>
      <node id="32164">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="32165" relation="include">
        </childnode>
      </node>
      <node id="32169">
        <label>stdlib.h</label>
      </node>
      <node id="32201">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="32209">
        <label>Serval_Policy.h</label>
        <link refid="_serval___policy_8h"/>
      </node>
      <node id="32177">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="32180">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="32181" relation="include">
        </childnode>
      </node>
      <node id="32188">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="32190">
        <label>user.h</label>
      </node>
      <node id="32184">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="32164" relation="include">
        </childnode>
        <childnode refid="32185" relation="include">
        </childnode>
        <childnode refid="32188" relation="include">
        </childnode>
      </node>
      <node id="32191">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32205">
        <label>Serval_Callable.h</label>
        <link refid="_serval___callable_8h"/>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32206" relation="include">
        </childnode>
      </node>
      <node id="32175">
        <label>stddef.h</label>
      </node>
      <node id="32193">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32173">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="32174" relation="include">
        </childnode>
        <childnode refid="32176" relation="include">
        </childnode>
        <childnode refid="32180" relation="include">
        </childnode>
        <childnode refid="32182" relation="include">
        </childnode>
      </node>
      <node id="32162">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="32163" relation="include">
        </childnode>
        <childnode refid="32165" relation="include">
        </childnode>
        <childnode refid="32170" relation="include">
        </childnode>
        <childnode refid="32171" relation="include">
        </childnode>
        <childnode refid="32172" relation="include">
        </childnode>
        <childnode refid="32169" relation="include">
        </childnode>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32173" relation="include">
        </childnode>
        <childnode refid="32184" relation="include">
        </childnode>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32170">
        <label>limits.h</label>
      </node>
      <node id="32159">
        <label>Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="32158" relation="include">
        </childnode>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32202" relation="include">
        </childnode>
        <childnode refid="32203" relation="include">
        </childnode>
        <childnode refid="32204" relation="include">
        </childnode>
        <childnode refid="32205" relation="include">
        </childnode>
        <childnode refid="32207" relation="include">
        </childnode>
        <childnode refid="32209" relation="include">
        </childnode>
        <childnode refid="32210" relation="include">
        </childnode>
      </node>
      <node id="32179">
        <label>portable.h</label>
      </node>
      <node id="32157">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h</label>
        <link refid="Serval_XTcp.h"/>
        <childnode refid="32158" relation="include">
        </childnode>
        <childnode refid="32159" relation="include">
        </childnode>
      </node>
      <node id="32187">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="32168">
        <label>string.h</label>
      </node>
      <node id="32186">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="32187" relation="include">
        </childnode>
        <childnode refid="32164" relation="include">
        </childnode>
      </node>
      <node id="32206">
        <label>Serval_StructCtx.h</label>
        <link refid="_serval___struct_ctx_8h"/>
        <childnode refid="32175" relation="include">
        </childnode>
      </node>
      <node id="32165">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="32166" relation="include">
        </childnode>
        <childnode refid="32167" relation="include">
        </childnode>
        <childnode refid="32168" relation="include">
        </childnode>
        <childnode refid="32169" relation="include">
        </childnode>
      </node>
      <node id="32210">
        <label>Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="32160" relation="include">
        </childnode>
        <childnode refid="32209" relation="include">
        </childnode>
        <childnode refid="32159" relation="include">
        </childnode>
      </node>
      <node id="32207">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="32208" relation="include">
        </childnode>
        <childnode refid="32160" relation="include">
        </childnode>
      </node>
      <node id="32178">
        <label>projdefs.h</label>
      </node>
      <node id="32200">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="32208">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="32164" relation="include">
        </childnode>
      </node>
      <node id="32199">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32204">
        <label>Serval_Filesystem.h</label>
        <link refid="_serval___filesystem_8h"/>
        <childnode refid="32160" relation="include">
        </childnode>
      </node>
      <node id="32158">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="32195">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32181">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="32196">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32203">
        <label>Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="32202" relation="include">
        </childnode>
      </node>
      <node id="32194">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32182">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="32183" relation="include">
        </childnode>
      </node>
      <node id="32197">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32176">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="32166" relation="include">
        </childnode>
        <childnode refid="32163" relation="include">
        </childnode>
        <childnode refid="32177" relation="include">
        </childnode>
      </node>
      <node id="32161">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="32162" relation="include">
        </childnode>
      </node>
      <node id="32174">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="32175" relation="include">
        </childnode>
        <childnode refid="32166" relation="include">
        </childnode>
        <childnode refid="32176" relation="include">
        </childnode>
        <childnode refid="32178" relation="include">
        </childnode>
        <childnode refid="32179" relation="include">
        </childnode>
      </node>
      <node id="32172">
        <label>stdio.h</label>
      </node>
      <node id="32192">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="32189" relation="include">
        </childnode>
      </node>
      <node id="32189">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="32190" relation="include">
        </childnode>
        <childnode refid="32191" relation="include">
        </childnode>
        <childnode refid="32192" relation="include">
        </childnode>
        <childnode refid="32193" relation="include">
        </childnode>
        <childnode refid="32194" relation="include">
        </childnode>
        <childnode refid="32195" relation="include">
        </childnode>
        <childnode refid="32196" relation="include">
        </childnode>
        <childnode refid="32197" relation="include">
        </childnode>
        <childnode refid="32198" relation="include">
        </childnode>
        <childnode refid="32199" relation="include">
        </childnode>
        <childnode refid="32200" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32212">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</label>
        <link refid="_serval___resources_8h"/>
      </node>
      <node id="32213">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpClient.h</label>
        <link refid="_serval___x_tcp_client_8h"/>
      </node>
      <node id="32211">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h</label>
        <link refid="Serval_XTcp.h"/>
        <childnode refid="32212" relation="include">
        </childnode>
        <childnode refid="32213" relation="include">
        </childnode>
        <childnode refid="32214" relation="include">
        </childnode>
      </node>
      <node id="32214">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpServer.h</label>
        <link refid="_serval___x_tcp_server_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___x_tcp_8h_1a65c22946685e0d6a0c3f87bde06dd397" prot="public" static="no">
        <name>SERVAL_XTCP_MAX_LEN_APP_PAYLOAD</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the length of the payload buffer of a XTCP message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="107" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___x_tcp_8h_1ad132e0da63f8622d28170b8b2c61b00e" prot="public" static="no">
        <name>SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the maximal number of parallel XTCP client instance initiated by the application.</para><para>Note: This summed with SERVAL_XTCP_MAX_NUM_SERVER_INSTANCE should not be set greater than the SERVAL_XTCP_MAX_NUM_CONNECTIONS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="64" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___x_tcp_8h_1a6337d29108c9201bb7d4178796808c1f" prot="public" static="no">
        <name>SERVAL_XTCP_MAX_NUM_CONNECTIONS</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the maximal number of parallel XTCP connections either initiated by the application or opened by the server. This should be set to the maximum number of communication peers that are expected by the application.</para><para>Note: This should not exceed the number of TCP sockets provided by the platform </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="53" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___x_tcp_8h_1a6f2d8b0d0546f2362faa410a6c87114f" prot="public" static="no">
        <name>SERVAL_XTCP_MAX_NUM_SERVER_INSTANCE</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the maximal number of parallel XTCP server instance initiated by the application.</para><para>Note: This summed with SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE should not be set greater than the SERVAL_XTCP_MAX_NUM_CONNECTIONS. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="75" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___x_tcp_8h_1a2d6776dae1c281520a4d62c659d9c7e4" prot="public" static="no">
        <name>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of connections reserved to be used as client connections. Obviously, this must be smaller than SERVAL_XTCP_MAX_NUM_CONNECTIONS </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="83" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___x_tcp_8h_1aa09380db8825ac1855fe19f1ec5ff5fa" prot="public" static="no">
        <name>SERVAL_XTCP_SERVER_CONNECTION_IDLE_TIMEOUT</name>
        <initializer>60000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define the timeout in ms after which the XTCP server will close an idle connection. It should be a multiple of SERVAL_RESOURCE_MONITOR_PERIODE. Suggested is a value 2-5 times as large as SERVAL_RESOURCE_MONITOR_PERIODE. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="100" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___x_tcp_8h_1a5df3a3024f3d4cc514bc37001f8fd2c7" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* AppXTcpCallback_T)(uint8_t sessionId, Msg_T *msg_ptr, retcode_t status)</definition>
        <argsstring>)(uint8_t sessionId, Msg_T *msg_ptr, retcode_t status)</argsstring>
        <name>AppXTcpCallback_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A data type representing a callback function pointer for application. The application uses such callback functions in order to be notified about the sending and receiving result of outgoing/incoming messages. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="115" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___x_tcp_8h_1aed7183082219e8ed146d6a3c36ae07e2" prot="public" static="no">
        <type>struct XTcpMsg_S</type>
        <definition>typedef struct XTcpMsg_S XTcpMsg_T</definition>
        <argsstring></argsstring>
        <name>XTcpMsg_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The data structure for messages of the generic proprietary TCP based application protocol XTCP. <simplesect kind="since"><para>1.4</para></simplesect>
<simplesect kind="see"><para>struct XTcpMsg_S </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="115" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___x_tcp_8h_1a34c22b2766416bc1a24a6c464f05dbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___msg___obsolete_8h_1aed7183082219e8ed146d6a3c36ae07e2" kindref="member">XTcpMsg_T</ref> *</type>
        <definition>XTcpMsg_T* Msg_getXTcpMsg</definition>
        <argsstring>(Msg_T *msg_ptr)</argsstring>
        <name>Msg_getXTcpMsg</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function provides a pointer to the structure holding XTCP message in the given Msg_T object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a Msg_T object. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer of type XTcpMsg_T to the required web message structure.</para></simplesect>
<simplesect kind="since"><para>1.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___x_tcp_8h_1a22344bf45e565724b6d1a6a871312893" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t XTcp_close</definition>
        <argsstring>(uint8_t sessionId)</argsstring>
        <name>XTcp_close</name>
        <param>
          <type>uint8_t</type>
          <declname>sessionId</declname>
        </param>
        <briefdescription>
<para>This function closes an active session. Can be called by either a TCP Client or Server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sessionId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identification number provided by the callback function</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RC_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SESSION_NOT_ACTIVE</parametername>
</parameternamelist>
<parameterdescription>
<para>when trying to close a session that does not exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SOCKET_ACTIVE</parametername>
</parameternamelist>
<parameterdescription>
<para>when trying to close a session that has not finished receiving/sending data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SOCKET_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>if the socket to be closed is invalid or close function fails</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>Close an active session <programlisting><codeline><highlight class="normal">uint8_t<sp/>sessionId<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(RC_OK<sp/>==<sp/>XTcp_close(sessionId))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;TCP<sp/>Server<sp/>and<sp/>Client(s)<sp/>stopped<sp/>...\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;TCP<sp/>Server<sp/>not<sp/>stopped!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="warning"><para>The session ID must exist in order to close it. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___x_tcp_8h_1acdb7d88ae779c488ce9c52171150aa09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XTcp_getPayload</definition>
        <argsstring>(Msg_T *msg_ptr, uint8_t **payload_pptr, unsigned int *payloadLen_ptr)</argsstring>
        <name>XTcp_getPayload</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>payload_pptr</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>payloadLen_ptr</declname>
        </param>
        <briefdescription>
<para>This function is called to get the payload of the received message. It provides the reference to the payload and its length as output parameters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to an object which identifies the instance of parsing context which should be used for parsing. It has to be a valid pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">payload_pptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An output parameter which references to the payload of the TCP message.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">payloadLen_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>An output parameter for the length of the payload of the parsed TCP message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>Get payload from a TCP Server or from a TCP Client. This must be used in the receive callback function. <programlisting><codeline><highlight class="normal">//<sp/>The<sp/>Application<sp/>Receive<sp/>Callback<sp/>must<sp/>be<sp/>set<sp/>when<sp/>calling</highlight></codeline>
<codeline><highlight class="normal">//<sp/>function<sp/>to<sp/>start<sp/>TCP<sp/>Server<sp/>or<sp/>when<sp/>calling<sp/>function<sp/>to</highlight></codeline>
<codeline><highlight class="normal">//<sp/>connect<sp/>a<sp/>TCP<sp/>Client</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>appReceiveCallback(uint8_t<sp/>sessionId,<sp/>Msg_T<sp/>*msg_ptr,<sp/>retcode_t<sp/>status)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*rcvPayload;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>rcvPayloadLen;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XTcp_getPayload(msg_ptr,<sp/>&amp;rcvPayload,<sp/>&amp;rcvPayloadLen);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Payload<sp/>(length<sp/>=<sp/>%d):<sp/>&quot;,<sp/>rcvPayloadLen);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___x_tcp_client_8h_1a2a563599a516e303ff50d54449b073c2" kindref="member">XTcpClient_connect()</ref>, <ref refid="_serval___x_tcp_server_8h_1a34cdd64eb7362b1e77f2903b48b421c8" kindref="member">XTcpServer_listen()</ref>, <ref refid="_serval___x_tcp_8h_1aaffd20face2735d9f0ec80d43c1ac53e" kindref="member">XTcp_push()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___x_tcp_8h_1ae7fc68fa5d1e57d3319a26e24d3b031b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XTcp_getPeer</definition>
        <argsstring>(Msg_T *msg_ptr, Ip_Address_T *ipAddress_ptr, uint16_t *port_ptr)</argsstring>
        <name>XTcp_getPeer</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddress_ptr</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>port_ptr</declname>
        </param>
        <briefdescription>
<para>This function identifies the connection partner (IP address, port) for a given socket handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a object which identifies the instance of parsing context which should be used for parsing. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ipAddress_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address of the connection partner</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP port of the connection partner</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>none.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>Get peer information. This must be used in the receive callback function. <programlisting><codeline><highlight class="normal">void<sp/>appReceiveCallback(uint8_t<sp/>sessionId,<sp/>Msg_T<sp/>*msg_ptr,<sp/>retcode_t<sp/>status)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>peer<sp/>information<sp/>from<sp/>the<sp/>message<sp/>pointer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Ip_Address_T<sp/>peerIpAddress;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>peerPort;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>peerIpAddressString[15];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>XTcp_getPeer(msg_ptr,<sp/>&amp;peerIpAddress,<sp/>&amp;peerPort);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Convert<sp/>address<sp/>to<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>Ip_convertAddrToString(&amp;peerIpAddress,<sp/>peerIpAddressString);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(0<sp/>&gt;<sp/>rc)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;IP<sp/>conversion<sp/>to<sp/>string<sp/>has<sp/>failed!\r\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;[TCE]<sp/>:<sp/>Peer<sp/>IP<sp/>is<sp/>:<sp/>%s:%d\r\n&quot;,<sp/>peerIpAddressString,<sp/>peerPort);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___x_tcp_8h_1aa14b40b50d6cb11cd6e452ed65a15117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t XTcp_isSecured</definition>
        <argsstring>(uint8_t sessionId, bool *isSecured)</argsstring>
        <name>XTcp_isSecured</name>
        <param>
          <type>uint8_t</type>
          <declname>sessionId</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>isSecured</declname>
        </param>
        <briefdescription>
<para>This function verifies if a session is secured or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sessionId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identification number provided by the callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">isSecured</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to secured/non-secured variable passed by the application</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RC_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>when success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SESSION_NOT_ACTIVE</parametername>
</parameternamelist>
<parameterdescription>
<para>when no session was found</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>Check whether a connection is secured or not inside a callback function <programlisting><codeline><highlight class="normal">void<sp/>appReceiveCallback(uint8_t<sp/>sessionId,<sp/>Msg_T<sp/>*msg_ptr,<sp/>retcode_t<sp/>status)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>retcode_t<sp/>rc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>XTcp_isSecured(sessionId,<sp/>&amp;isSecure);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___x_tcp_8h_1aaffd20face2735d9f0ec80d43c1ac53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t XTcp_push</definition>
        <argsstring>(uint8_t sessionId, uint8_t const *payload_ptr, unsigned int payloadLen)</argsstring>
        <name>XTcp_push</name>
        <param>
          <type>uint8_t</type>
          <declname>sessionId</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>payload_ptr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>payloadLen</declname>
        </param>
        <briefdescription>
<para>Pushes the application data over an open TCP connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sessionId</parametername>
</parameternamelist>
<parameterdescription>
<para>Identification number provided by the callback function</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">payload_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the buffer which contains the payload of a XTCP message.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">payloadLen</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the payload. The payload must not be longer than SERVAL_XTCP_MAX_LEN_APP_PAYLOAD.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RC_OK</parametername>
</parameternamelist>
<parameterdescription>
<para>on success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_PAYLOAD_TOO_LARGE</parametername>
</parameternamelist>
<parameterdescription>
<para>if the length of the payload is larger than SERVAL_XTCP_MAX_LEN_APP_PAYLOAD </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SESSION_NOT_ACTIVE</parametername>
</parameternamelist>
<parameterdescription>
<para>when trying to push data to a session that does not exist </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_OVERLOADED</parametername>
</parameternamelist>
<parameterdescription>
<para>if no free message struct is available to accept the new sending job </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_MSG_FACTORY_OVERFLOW</parametername>
</parameternamelist>
<parameterdescription>
<para>if there is a problem to construct the message payload to be sent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RC_XTCP_SENDING_ERROR</parametername>
</parameternamelist>
<parameterdescription>
<para>if an error occurs while trying to send the message</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Example</title><para>Push data from a TCP Server to a TCP Client or from TCP Client to a TCP Server. <programlisting><codeline><highlight class="normal">retcode_t<sp/>rc<sp/>=<sp/>RC_OK;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>*<sp/>sendPayload<sp/>=<sp/>(uint8_t<sp/>*)&quot;Message&quot;;</highlight></codeline>
<codeline><highlight class="normal">unsigned<sp/>int<sp/>sendPayloadLen<sp/>=<sp/>strlen((char<sp/>*)sendPayload);</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>sessionId<sp/>=<sp/>1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Push<sp/>payload</highlight></codeline>
<codeline><highlight class="normal">rc<sp/>=<sp/>XTcp_push(sessionId,<sp/>sendPayload,<sp/>sendPayloadLen);</highlight></codeline>
</programlisting></para></simplesect>
<simplesect kind="warning"><para>The session ID must exist in order to push data to a client or a server.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___x_tcp_client_8h_1a2a563599a516e303ff50d54449b073c2" kindref="member">XTcpClient_connect()</ref>, <ref refid="_serval___x_tcp_server_8h_1a34cdd64eb7362b1e77f2903b48b421c8" kindref="member">XTcpServer_listen()</ref>, <ref refid="_serval___x_tcp_8h_1acdb7d88ae779c488ce9c52171150aa09" kindref="member">XTcp_getPayload()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h" line="185" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The interface description of a proprietary TCP based application protocol both for client and server. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="since"><para>1.4 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!<sp/>SERVAL_ENABLE_XTCP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_XTCP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_8h" kindref="compound">Serval_Msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_serval___x_tcp_8h_1a6337d29108c9201bb7d4178796808c1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="_serval___x_tcp_8h_1ad132e0da63f8622d28170b8b2c61b00e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_NUM_CLIENT_INSTANCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_NUM_SERVER_INSTANCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="_serval___x_tcp_8h_1a6f2d8b0d0546f2362faa410a6c87114f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_NUM_SERVER_INSTANCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="_serval___x_tcp_8h_1a2d6776dae1c281520a4d62c659d9c7e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_XTCP_CLIENT<sp/>&amp;&amp;<sp/>(<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT<sp/>&gt;<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;More<sp/>connections<sp/>are<sp/>reserved<sp/>for<sp/>client<sp/>use<sp/>than<sp/>are<sp/>available<sp/>in<sp/>the<sp/>system&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_XTCP_SERVER<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_XTCP_CLIENT<sp/>&amp;&amp;<sp/>(<sp/>SERVAL_XTCP_RESERVED_CONNECTIONS_FOR_CLIENT<sp/>&gt;=<sp/>SERVAL_XTCP_MAX_NUM_CONNECTIONS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;All<sp/>connections<sp/>are<sp/>reserved<sp/>for<sp/>client<sp/>used.<sp/>Server<sp/>would<sp/>not<sp/>be<sp/>able<sp/>to<sp/>function<sp/>properly&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_SERVER_CONNECTION_IDLE_TIMEOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="_serval___x_tcp_8h_1aa09380db8825ac1855fe19f1ec5ff5fa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_SERVER_CONNECTION_IDLE_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/>60000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor">#ifndef<sp/>SERVAL_XTCP_MAX_LEN_APP_PAYLOAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="_serval___x_tcp_8h_1a65c22946685e0d6a0c3f87bde06dd397" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_XTCP_MAX_LEN_APP_PAYLOAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="_serval___x_tcp_8h_1a5df3a3024f3d4cc514bc37001f8fd2c7" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_serval___x_tcp_8h_1a5df3a3024f3d4cc514bc37001f8fd2c7" kindref="member">AppXTcpCallback_T</ref>)(uint8_t<sp/>sessionId,<sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,<sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>status);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_REMOVE_SPECIALIZED_ACCESSORS_FROM_MSG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="_serval___x_tcp_8h_1aed7183082219e8ed146d6a3c36ae07e2" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XTcpMsg_S<sp/><ref refid="_serval___msg___obsolete_8h_1aed7183082219e8ed146d6a3c36ae07e2" kindref="member">XTcpMsg_T</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="_serval___msg___obsolete_8h_1aed7183082219e8ed146d6a3c36ae07e2" kindref="member">XTcpMsg_T</ref>*<sp/><ref refid="_serval___x_tcp_8h_1a34c22b2766416bc1a24a6c464f05dbff" kindref="member">Msg_getXTcpMsg</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref>*<sp/>msg_ptr);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_POLICY_REMOVE_SPECIALIZED_ACCESSORS_FROM_MSG_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___x_tcp_8h_1aaffd20face2735d9f0ec80d43c1ac53e" kindref="member">XTcp_push</ref>(uint8_t<sp/>sessionId,<sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*payload_ptr,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>payloadLen);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___x_tcp_8h_1acdb7d88ae779c488ce9c52171150aa09" kindref="member">XTcp_getPayload</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,<sp/>uint8_t<sp/>**payload_pptr,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*payloadLen_ptr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___x_tcp_8h_1ae7fc68fa5d1e57d3319a26e24d3b031b" kindref="member">XTcp_getPeer</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddress_ptr,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*port_ptr);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___x_tcp_8h_1a22344bf45e565724b6d1a6a871312893" kindref="member">XTcp_close</ref>(uint8_t<sp/>sessionId);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___x_tcp_8h_1aa14b40b50d6cb11cd6e452ed65a15117" kindref="member">XTcp_isSecured</ref>(uint8_t<sp/>sessionId,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*<sp/>isSecured);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_XTCP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_XTCP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h"/>
  </compounddef>
</doxygen>
