<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___comm_buff_8h" kind="file">
    <compoundname>Serval_CommBuff.h</compoundname>
    <includes refid="_serval___ip_8h" local="no">Serval_Ip.h</includes>
    <includedby refid="_mbed_t_l_s___tls_8h" local="no">SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</includedby>
    <incdepgraph>
      <node id="32566">
        <label>stdbool.h</label>
      </node>
      <node id="32569">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="32570" relation="include">
        </childnode>
        <childnode refid="32604" relation="include">
        </childnode>
      </node>
      <node id="32574">
        <label>stdarg.h</label>
      </node>
      <node id="32601">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32586">
        <label>list.h</label>
      </node>
      <node id="32588">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="32589" relation="include">
        </childnode>
        <childnode refid="32564" relation="include">
        </childnode>
        <childnode refid="32563" relation="include">
        </childnode>
      </node>
      <node id="32572">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="32563" relation="include">
        </childnode>
      </node>
      <node id="32565">
        <label>stdint.h</label>
      </node>
      <node id="32563">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="32564" relation="include">
        </childnode>
      </node>
      <node id="32568">
        <label>stdlib.h</label>
      </node>
      <node id="32604">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="32580">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="32583">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="32584" relation="include">
        </childnode>
      </node>
      <node id="32591">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="32593">
        <label>user.h</label>
      </node>
      <node id="32587">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="32563" relation="include">
        </childnode>
        <childnode refid="32588" relation="include">
        </childnode>
        <childnode refid="32591" relation="include">
        </childnode>
      </node>
      <node id="32594">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32560">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h</label>
        <link refid="Serval_CommBuff.h"/>
        <childnode refid="32561" relation="include">
        </childnode>
      </node>
      <node id="32578">
        <label>stddef.h</label>
      </node>
      <node id="32596">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32576">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="32577" relation="include">
        </childnode>
        <childnode refid="32579" relation="include">
        </childnode>
        <childnode refid="32583" relation="include">
        </childnode>
        <childnode refid="32585" relation="include">
        </childnode>
      </node>
      <node id="32571">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="32572" relation="include">
        </childnode>
        <childnode refid="32564" relation="include">
        </childnode>
        <childnode refid="32573" relation="include">
        </childnode>
        <childnode refid="32574" relation="include">
        </childnode>
        <childnode refid="32575" relation="include">
        </childnode>
        <childnode refid="32568" relation="include">
        </childnode>
        <childnode refid="32569" relation="include">
        </childnode>
        <childnode refid="32576" relation="include">
        </childnode>
        <childnode refid="32587" relation="include">
        </childnode>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32573">
        <label>limits.h</label>
      </node>
      <node id="32582">
        <label>portable.h</label>
      </node>
      <node id="32590">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="32567">
        <label>string.h</label>
      </node>
      <node id="32589">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="32590" relation="include">
        </childnode>
        <childnode refid="32563" relation="include">
        </childnode>
      </node>
      <node id="32564">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="32565" relation="include">
        </childnode>
        <childnode refid="32566" relation="include">
        </childnode>
        <childnode refid="32567" relation="include">
        </childnode>
        <childnode refid="32568" relation="include">
        </childnode>
      </node>
      <node id="32561">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="32562" relation="include">
        </childnode>
        <childnode refid="32569" relation="include">
        </childnode>
      </node>
      <node id="32581">
        <label>projdefs.h</label>
      </node>
      <node id="32603">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="32562">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="32563" relation="include">
        </childnode>
      </node>
      <node id="32602">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32598">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32584">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="32599">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32597">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32585">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="32586" relation="include">
        </childnode>
      </node>
      <node id="32600">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32579">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="32565" relation="include">
        </childnode>
        <childnode refid="32572" relation="include">
        </childnode>
        <childnode refid="32580" relation="include">
        </childnode>
      </node>
      <node id="32570">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="32571" relation="include">
        </childnode>
      </node>
      <node id="32577">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="32578" relation="include">
        </childnode>
        <childnode refid="32565" relation="include">
        </childnode>
        <childnode refid="32579" relation="include">
        </childnode>
        <childnode refid="32581" relation="include">
        </childnode>
        <childnode refid="32582" relation="include">
        </childnode>
      </node>
      <node id="32575">
        <label>stdio.h</label>
      </node>
      <node id="32595">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="32592" relation="include">
        </childnode>
      </node>
      <node id="32592">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="32593" relation="include">
        </childnode>
        <childnode refid="32594" relation="include">
        </childnode>
        <childnode refid="32595" relation="include">
        </childnode>
        <childnode refid="32596" relation="include">
        </childnode>
        <childnode refid="32597" relation="include">
        </childnode>
        <childnode refid="32598" relation="include">
        </childnode>
        <childnode refid="32599" relation="include">
        </childnode>
        <childnode refid="32600" relation="include">
        </childnode>
        <childnode refid="32601" relation="include">
        </childnode>
        <childnode refid="32602" relation="include">
        </childnode>
        <childnode refid="32603" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32605">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h</label>
        <link refid="Serval_CommBuff.h"/>
        <childnode refid="32606" relation="include">
        </childnode>
      </node>
      <node id="32606">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</label>
        <link refid="_mbed_t_l_s___tls_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___comm_buff_8h_1a61044420a8882ecc066daf634e2ee10d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
        <definition>CommBuff_T CommBuff_alloc</definition>
        <argsstring>(unsigned int size)</argsstring>
        <name>CommBuff_alloc</name>
        <param>
          <type>unsigned int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function allocates a communication buffer and returns its handle. The size of the allocated buffer is equal to or larger than the required size. The new buffer stays allocated until <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref> is applied. If successful, a call to <ref refid="_serval___comm_buff_8h_1a77df15a0dabc53f1d465971315167875" kindref="member">CommBuff_getSize()</ref>, immediately after the function returns, must provide correct size of thus allocated communication buffer and a call to <ref refid="_serval___comm_buff_8h_1ad17f39ed6f1f96caa60fc8f75b362ac6" kindref="member">CommBuff_getLength()</ref>, immediately after the function returns, must return zero.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the required buffer. The size has to be larger than 0.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The handle of the allocated buffer. If the allocation fails, for instance because not enough space is available, then an invalid buffer handle is returned.</para></simplesect>
<xrefsect id="deprecated_1_deprecated000058"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is not used by the stack anymore and should not be used by any new protocol. The PAL functions for receiving and preparing a socket for sending provide the upper-layer protocols with the needed CommBuff_T object.</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref>, <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref>, <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref>, <ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommBuff_free</definition>
        <argsstring>(CommBuff_T buf)</argsstring>
        <name>CommBuff_free</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function frees the memory of the given buffer. After invoking this function the given buffer handle is invalid and must not be used without allocation with <ref refid="_serval___comm_buff_8h_1a61044420a8882ecc066daf634e2ee10d" kindref="member">CommBuff_alloc()</ref>. The buffer thus freed will be again available for allocation. If this function is applied to a CommBuff_T which is invalid or already free, then it should do nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer to be freed. It has to be valid. If the corresponding buffer is already free, then this function will not have an effect. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1a3f533b97b6ee72fc3c1e5f2a45dd3f7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
        <definition>CommBuff_T CommBuff_getInvalidBuffer</definition>
        <argsstring>(void)</argsstring>
        <name>CommBuff_getInvalidBuffer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to un-initialize a buffer handle. It returns the handle of an invalid buffer. The call CommBuff_isValid(CommBuff_getInvalidBuffer()) must results in FALSE.</para><para><simplesect kind="return"><para>A handle of an invalid buffer. Accessing this buffer for reading or writing would fail.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___comm_buff_8h_1abffb6953a4bc8d9b980d01fd80cadffb" kindref="member">CommBuff_isValid()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1ad17f39ed6f1f96caa60fc8f75b362ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CommBuff_getLength</definition>
        <argsstring>(CommBuff_T buf)</argsstring>
        <name>CommBuff_getLength</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the length of the given buffer. The length of the buffer gives the size of the valid data in the payload of the buffer. Length of a buffer must never be more the the size of the buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer to get the length of. The handle has to be valid and the corresponding buffer has to be allocated before calling this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The length of buffer. The length of the used part of the given buffer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1ac1610a30893002234c7e83ba0eb1edd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* CommBuff_getPayload</definition>
        <argsstring>(CommBuff_T buf)</argsstring>
        <name>CommBuff_getPayload</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns a pointer to the payload of the given buffer. This pointer can be used to read the payload which is stored in the buffer or to write a new payload into the buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer to get the payload of. The handle has to be valid and the corresponding buffer has to be allocated before calling this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the payload of the given buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1a77df15a0dabc53f1d465971315167875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CommBuff_getSize</definition>
        <argsstring>(CommBuff_T buf)</argsstring>
        <name>CommBuff_getSize</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the size of the given buffer. The size of the buffer is its maximal capacity.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer to get the size of. The handle has to be valid and the corresponding buffer has to be allocated before calling this function.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of buffer. The size of the buffer is its maximal capacity. Thus it can be larger than the buffer length. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1abffb6953a4bc8d9b980d01fd80cadffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CommBuff_isValid</definition>
        <argsstring>(CommBuff_T buffer)</argsstring>
        <name>CommBuff_isValid</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to check whether a given buffer handle is valid or not and return the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer handle to be checked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the buffer handle is valid, or FALSE otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
        <definition>CommBuff_T CommBuff_realloc</definition>
        <argsstring>(CommBuff_T oldBuffer, unsigned int newSize)</argsstring>
        <name>CommBuff_realloc</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>oldBuffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is usually used by the upper-layer if it needs either to keep a received packet after the return of the socket callback (i.e., the callback function passed to <ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen()</ref>, <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref>, <ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref> or <ref refid="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" kindref="member">Tcp_connect()</ref>) or to change the size of a previously allocated buffer. A Buffer, which has been allocated using this function, must be explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.</para><para>This function should provide buffers which can be allocated for longer time without interfering with the communication reliability.</para><para>The provided buffer is not necessarily a new one i.e. the handle to the buffer may not change. It can be the same old buffer, if it is large enough and can be allocated for longer time. PAL decides in each case to allocate a new buffer, to extend the old one or even to return the old buffer without a modification. If a new buffer is allocated, then the old one is implicitly freed after its content is copied to the new buffer, i.e. a call to <ref refid="_serval___comm_buff_8h_1ad17f39ed6f1f96caa60fc8f75b362ac6" kindref="member">CommBuff_getLength()</ref>, should return same value before and after the function is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oldBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer which should be reallocated. It must be valid and buffer has to be allocated before calling this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>The new required size of the buffer. It has to be larger than 0.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The handle of a buffer with the given size. Allocating this buffer for longer time is allowed and does not interfere with the communication. If the re-allocation fails, an invalid buffer handle is returned. In this case the oldBuffer will neither released nor changed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___comm_buff_8h_1a854173609d7b407da3d71368caf67a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CommBuff_setLength</definition>
        <argsstring>(CommBuff_T buf, unsigned int len)</argsstring>
        <name>CommBuff_setLength</name>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>buf</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the length of a given buffer. After calling this function the buffer length is set to the given value. After the following code x will be equal to y. <computeroutput> CommBuff_setLength(buf, x); y = CommBuff_getLength(buf) </computeroutput></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the buffer to set the length of. The handle has to be valid and the corresponding buffer has to be allocated before calling this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length to be set. The length must not be larger than the actual size of the given buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h" line="186" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface to the platform communication buffer management. </para>    </briefdescription>
    <detaileddescription>
<para>PAL provides a data structure CommBuff_T to allow working with communication buffers. A communication buffer here means, a buffer which is designed to store communication packets and to pass them between the communication components. This interface provides functions to allocate, reallocate and free buffers. It also offers functions to set and to get the size of a given buffer and a function to get the payload which is stored in a given buffer.</para><para><simplesect kind="see"><para><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor">#ifndef<sp/>SERVAL_COMMBUFFER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_COMMBUFFER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___ip_8h" kindref="compound">Serval_Ip.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/><ref refid="_serval___comm_buff_8h_1a3f533b97b6ee72fc3c1e5f2a45dd3f7f" kindref="member">CommBuff_getInvalidBuffer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___comm_buff_8h_1abffb6953a4bc8d9b980d01fd80cadffb" kindref="member">CommBuff_isValid</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buffer);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/><ref refid="_serval___comm_buff_8h_1a61044420a8882ecc066daf634e2ee10d" kindref="member">CommBuff_alloc</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/><ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>oldBuffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newSize);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buf);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___comm_buff_8h_1a77df15a0dabc53f1d465971315167875" kindref="member">CommBuff_getSize</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buf);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___comm_buff_8h_1ad17f39ed6f1f96caa60fc8f75b362ac6" kindref="member">CommBuff_getLength</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buf);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___comm_buff_8h_1a854173609d7b407da3d71368caf67a9c" kindref="member">CommBuff_setLength</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buf,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="_serval___comm_buff_8h_1ac1610a30893002234c7e83ba0eb1edd8" kindref="member">CommBuff_getPayload</ref>(<ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>buf);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_COMMBUFFER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_CommBuff.h"/>
  </compounddef>
</doxygen>
