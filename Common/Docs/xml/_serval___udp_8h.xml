<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___udp_8h" kind="file">
    <compoundname>Serval_Udp.h</compoundname>
    <includes refid="_serval___policy_8h" local="no">Serval_Policy.h</includes>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___types_8h" local="no">Serval_Types.h</includes>
    <includes refid="_serval___ip_8h" local="no">Serval_Ip.h</includes>
    <includes refid="_serval___callable_8h" local="no">Serval_Callable.h</includes>
    <includes refid="_serval___msg_8h" local="no">Serval_Msg.h</includes>
    <includes refid="_serval___security_8h" local="no">Serval_Security.h</includes>
    <includedby refid="_mbed_t_l_s___socket_8h" local="no">SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Socket.h</includedby>
    <includedby refid="_mbed_t_l_s___tls_8h" local="no">SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</includedby>
    <incdepgraph>
      <node id="33132">
        <label>stdbool.h</label>
      </node>
      <node id="33125">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="33126" relation="include">
        </childnode>
        <childnode refid="33166" relation="include">
        </childnode>
      </node>
      <node id="33136">
        <label>stdarg.h</label>
      </node>
      <node id="33163">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33148">
        <label>list.h</label>
      </node>
      <node id="33150">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="33151" relation="include">
        </childnode>
        <childnode refid="33130" relation="include">
        </childnode>
        <childnode refid="33129" relation="include">
        </childnode>
      </node>
      <node id="33172">
        <label>Serval_StringDescr.h</label>
        <link refid="_serval___string_descr_8h"/>
        <childnode refid="33125" relation="include">
        </childnode>
      </node>
      <node id="33128">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="33129" relation="include">
        </childnode>
      </node>
      <node id="33131">
        <label>stdint.h</label>
      </node>
      <node id="33129">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="33130" relation="include">
        </childnode>
      </node>
      <node id="33134">
        <label>stdlib.h</label>
      </node>
      <node id="33166">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="33123">
        <label>Serval_Policy.h</label>
        <link refid="_serval___policy_8h"/>
      </node>
      <node id="33142">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="33145">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="33146" relation="include">
        </childnode>
      </node>
      <node id="33153">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="33155">
        <label>user.h</label>
      </node>
      <node id="33149">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="33129" relation="include">
        </childnode>
        <childnode refid="33150" relation="include">
        </childnode>
        <childnode refid="33153" relation="include">
        </childnode>
      </node>
      <node id="33156">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33169">
        <label>Serval_Callable.h</label>
        <link refid="_serval___callable_8h"/>
        <childnode refid="33125" relation="include">
        </childnode>
        <childnode refid="33170" relation="include">
        </childnode>
      </node>
      <node id="33176">
        <label>Serval_Security.h</label>
        <link refid="_serval___security_8h"/>
        <childnode refid="33124" relation="include">
        </childnode>
        <childnode refid="33171" relation="include">
        </childnode>
        <childnode refid="33126" relation="include">
        </childnode>
        <childnode refid="33177" relation="include">
        </childnode>
      </node>
      <node id="33177">
        <label>Serval_MsgSendingCtx.h</label>
        <link refid="_serval___msg_sending_ctx_8h"/>
        <childnode refid="33123" relation="include">
        </childnode>
      </node>
      <node id="33140">
        <label>stddef.h</label>
      </node>
      <node id="33158">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33138">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="33139" relation="include">
        </childnode>
        <childnode refid="33141" relation="include">
        </childnode>
        <childnode refid="33145" relation="include">
        </childnode>
        <childnode refid="33147" relation="include">
        </childnode>
      </node>
      <node id="33127">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="33128" relation="include">
        </childnode>
        <childnode refid="33130" relation="include">
        </childnode>
        <childnode refid="33135" relation="include">
        </childnode>
        <childnode refid="33136" relation="include">
        </childnode>
        <childnode refid="33137" relation="include">
        </childnode>
        <childnode refid="33134" relation="include">
        </childnode>
        <childnode refid="33125" relation="include">
        </childnode>
        <childnode refid="33138" relation="include">
        </childnode>
        <childnode refid="33149" relation="include">
        </childnode>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33135">
        <label>limits.h</label>
      </node>
      <node id="33171">
        <label>Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="33124" relation="include">
        </childnode>
        <childnode refid="33125" relation="include">
        </childnode>
        <childnode refid="33172" relation="include">
        </childnode>
        <childnode refid="33173" relation="include">
        </childnode>
        <childnode refid="33174" relation="include">
        </childnode>
        <childnode refid="33169" relation="include">
        </childnode>
        <childnode refid="33167" relation="include">
        </childnode>
        <childnode refid="33123" relation="include">
        </childnode>
        <childnode refid="33175" relation="include">
        </childnode>
      </node>
      <node id="33144">
        <label>portable.h</label>
      </node>
      <node id="33152">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="33133">
        <label>string.h</label>
      </node>
      <node id="33151">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="33152" relation="include">
        </childnode>
        <childnode refid="33129" relation="include">
        </childnode>
      </node>
      <node id="33170">
        <label>Serval_StructCtx.h</label>
        <link refid="_serval___struct_ctx_8h"/>
        <childnode refid="33140" relation="include">
        </childnode>
      </node>
      <node id="33130">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="33131" relation="include">
        </childnode>
        <childnode refid="33132" relation="include">
        </childnode>
        <childnode refid="33133" relation="include">
        </childnode>
        <childnode refid="33134" relation="include">
        </childnode>
      </node>
      <node id="33175">
        <label>Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="33125" relation="include">
        </childnode>
        <childnode refid="33123" relation="include">
        </childnode>
        <childnode refid="33171" relation="include">
        </childnode>
      </node>
      <node id="33167">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="33168" relation="include">
        </childnode>
        <childnode refid="33125" relation="include">
        </childnode>
      </node>
      <node id="33143">
        <label>projdefs.h</label>
      </node>
      <node id="33165">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="33168">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="33129" relation="include">
        </childnode>
      </node>
      <node id="33164">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33174">
        <label>Serval_Filesystem.h</label>
        <link refid="_serval___filesystem_8h"/>
        <childnode refid="33125" relation="include">
        </childnode>
      </node>
      <node id="33124">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="33160">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33146">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="33122">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h</label>
        <link refid="Serval_Udp.h"/>
        <childnode refid="33123" relation="include">
        </childnode>
        <childnode refid="33124" relation="include">
        </childnode>
        <childnode refid="33125" relation="include">
        </childnode>
        <childnode refid="33167" relation="include">
        </childnode>
        <childnode refid="33169" relation="include">
        </childnode>
        <childnode refid="33171" relation="include">
        </childnode>
        <childnode refid="33176" relation="include">
        </childnode>
      </node>
      <node id="33161">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33173">
        <label>Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="33172" relation="include">
        </childnode>
      </node>
      <node id="33159">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33147">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="33148" relation="include">
        </childnode>
      </node>
      <node id="33162">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33141">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="33131" relation="include">
        </childnode>
        <childnode refid="33128" relation="include">
        </childnode>
        <childnode refid="33142" relation="include">
        </childnode>
      </node>
      <node id="33126">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="33127" relation="include">
        </childnode>
      </node>
      <node id="33139">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="33140" relation="include">
        </childnode>
        <childnode refid="33131" relation="include">
        </childnode>
        <childnode refid="33141" relation="include">
        </childnode>
        <childnode refid="33143" relation="include">
        </childnode>
        <childnode refid="33144" relation="include">
        </childnode>
      </node>
      <node id="33137">
        <label>stdio.h</label>
      </node>
      <node id="33157">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="33154" relation="include">
        </childnode>
      </node>
      <node id="33154">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="33155" relation="include">
        </childnode>
        <childnode refid="33156" relation="include">
        </childnode>
        <childnode refid="33157" relation="include">
        </childnode>
        <childnode refid="33158" relation="include">
        </childnode>
        <childnode refid="33159" relation="include">
        </childnode>
        <childnode refid="33160" relation="include">
        </childnode>
        <childnode refid="33161" relation="include">
        </childnode>
        <childnode refid="33162" relation="include">
        </childnode>
        <childnode refid="33163" relation="include">
        </childnode>
        <childnode refid="33164" relation="include">
        </childnode>
        <childnode refid="33165" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="33179">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Socket.h</label>
        <link refid="_mbed_t_l_s___socket_8h"/>
      </node>
      <node id="33178">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h</label>
        <link refid="Serval_Udp.h"/>
        <childnode refid="33179" relation="include">
        </childnode>
        <childnode refid="33180" relation="include">
        </childnode>
      </node>
      <node id="33180">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</label>
        <link refid="_mbed_t_l_s___tls_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___udp_8h_1af678e7abdffe8ad548e44a89476c7ea5" prot="public" static="no">
        <name>UDP_DELETE</name>
        <initializer><ref refid="_serval___udp_8h_1a8b3ca8bdf3bad26f521337e989645b0c" kindref="member">Dtls_delete</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="48" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___udp_8h_1a5a7bc6753f338fef2f2f5ad85d29a5a2" prot="public" static="no">
        <name>UDP_PREPARE_FOR_SENDING</name>
        <initializer><ref refid="_serval___udp_8h_1ab520d90d44338414a635bab281c4579c" kindref="member">Dtls_prepareForSending</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="51" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___udp_8h_1a43b0326030746e1ad79efae0af6c6430" prot="public" static="no">
        <name>UDP_RECEIVE</name>
        <initializer><ref refid="_serval___udp_8h_1a60d58695ab0726ab792570011e43418c" kindref="member">Dtls_receive</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="49" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___udp_8h_1a5fc1290d7379873f77a2cf4b2c36b3aa" prot="public" static="no">
        <name>UDP_RETRY_SENDING_LATER</name>
        <initializer><ref refid="_serval___udp_8h_1a91d660512d3d80ff2f0220f96225654d" kindref="member">Dtls_retrySendingLater</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="52" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___udp_8h_1ae3bc94781bdff7f2392170e8384f17cf" prot="public" static="no">
        <name>UDP_SEND_TO</name>
        <initializer><ref refid="_serval___udp_8h_1a45aa0edb60e9d2f305120e7484aaaec0" kindref="member">Dtls_sendTo</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="50" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___udp_8h_1a8b3ca8bdf3bad26f521337e989645b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Dtls_delete</definition>
        <argsstring>(Udp_Socket_T socket)</argsstring>
        <name>Dtls_delete</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1ab520d90d44338414a635bab281c4579c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Dtls_prepareForSending</definition>
        <argsstring>(Udp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Dtls_prepareForSending</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a60d58695ab0726ab792570011e43418c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Dtls_receive</definition>
        <argsstring>(Udp_Socket_T socket, Ip_Address_T *ipAddr_ptr, Ip_Port_T *port_ptr, CommBuff_T *packet_ptr)</argsstring>
        <name>Dtls_receive</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref> *</type>
          <declname>packet_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a91d660512d3d80ff2f0220f96225654d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Dtls_retrySendingLater</definition>
        <argsstring>(Udp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Dtls_retrySendingLater</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a45aa0edb60e9d2f305120e7484aaaec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Dtls_sendTo</definition>
        <argsstring>(Udp_Socket_T socket, Ip_Address_T *ipAddr_ptr, Ip_Port_T port, CommBuff_T packet, Callable_T *callback_ptr)</argsstring>
        <name>Dtls_sendTo</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>packet</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a3824054f35fdbf9ff7c8900db27e21d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_closeSecureConn</definition>
        <argsstring>(Udp_Socket_T const socket, Ip_Address_T *destAddr_ptr, Ip_Port_T destPort)</argsstring>
        <name>Udp_closeSecureConn</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>destAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>destPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function close and disconnect an existing DTLS-UDP connection. The connection may created from client side by <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> or from server side implicitly with <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Local client socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>ip address of the remote socket (may be client or server)</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destPort</parametername>
</parameternamelist>
<parameterdescription>
<para>port number of the remote socket (may be client or server)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, RC_OK is returned. <linebreak/>
 RC_DTLS_CONNECTION_NOT_EXIST no connection to this endpoint exists<linebreak/>
</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref>, <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="640" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_connect</definition>
        <argsstring>(Ip_Address_T *ipAddr, Ip_Port_T port, Callable_T *callback_ptr, Udp_Socket_T *socket_ptr)</argsstring>
        <name>Udp_connect</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IMPORTANT: THIS FUNCTION IS DEPRECATED AND NO LONGER TESTED! IT WILL BE REMOVED IN VERSION 2.0 As an alternative use Udp_openSocket and replace Udp_send with calls to Udp_sendTo<linebreak/>
</para><para>This function creates a UDP socket and &quot;connects&quot; it to the given address and port. After calling this function, the function <ref refid="_serval___udp_8h_1a5ce40dd127665aa3f04ee5e10577d4a2" kindref="member">Udp_send()</ref> can be used to send data to the predefined address and port.</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signalize errors or other issues at the socket. The status code passed to the callback is either RC_OK on incoming data, or a UDP or an IP error otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ipAddr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the IP address to which datagrams are sent by default</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP port to which datagrams are sent by default, in network byte order. It has to be in range of 0-65535</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked after data is received. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, handle to UDP socket is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a UDP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref>, <ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref>, <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref>, <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref></para></simplesect>
<xrefsect id="deprecated_1_deprecated000060"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_connectSecure</definition>
        <argsstring>(Udp_Socket_T const socket, Ip_Address_T *destAddr_ptr, Ip_Port_T destPort)</argsstring>
        <name>Udp_connectSecure</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>destAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>destPort</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a DTLS-UDP connection from the calling client to a remote server port.<linebreak/>
</para><para>If the system is configured to use pre-shared keys, Dtls_setClientPskCallback() MUST be called in order to provide keying material to the implementation via the supplied callback.</para><para>Before this function is called, the local client socket must be opened with <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>.<linebreak/>
 After calling this function, the function <ref refid="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" kindref="member">Udp_sendTo()</ref> can be used to send data via DTLS to the specified server address and port. When some data is received, the registered callback of the socket is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be invoked in order to receive the incoming packet.<linebreak/>
 The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Local client socket, which was created by Udp_openSecureSocket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>ip address of the remote server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destPort</parametername>
</parameternamelist>
<parameterdescription>
<para>port number of the remote server socket</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a UDP, an IP or a DTLS error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" kindref="member">Udp_sendTo()</ref>, <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1a3824054f35fdbf9ff7c8900db27e21d6" kindref="member">Udp_closeSecureConn()</ref>, Dtls_setClientPskCallback() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1aea6cdd3012b94603a61804efac4e39d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_delete</definition>
        <argsstring>(Udp_Socket_T socket)</argsstring>
        <name>Udp_delete</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function deletes the socket of the given socket handle. After invoking this function the given socket handle is invalid, and must not be used for any further communication unless reinitialized.</para><para>Implementors note: If the socket is secured using DTLS, any pending connections must be cleaned up by the DTLS layer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handler to the socket to be deleted</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when errorcode available On success, RC_OK is returned. <linebreak/>
 RC_UDP_INVALID_SOCKET<linebreak/>
</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen()</ref>, Udp_createSocket(), <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1ae8e93d9d289bfd800fb01a9ff46aa516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
        <definition>Udp_Socket_T Udp_getInvalidSocket</definition>
        <argsstring>(void)</argsstring>
        <name>Udp_getInvalidSocket</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to un-initialize a UDP socket handle. It returns the handle of an invalid UDP socket. The call Udp_isValidSocket(Udp_getInvalidSocket()) results in FALSE.</para><para><simplesect kind="return"><para>A handle of an invalid socket. Accessing this socket for reading or writing as well as for communication would fail.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a80091c14c3be20e5f1a4844aa2887f9e" kindref="member">Udp_isValidSocket()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a8a22fabff7b36a903c5a6917cfbfd518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_getSecureConnError</definition>
        <argsstring>(Udp_Socket_T const socket, Ip_Address_T *destAddr_ptr, Ip_Port_T destPort, retcode_t *rc_ptr)</argsstring>
        <name>Udp_getSecureConnError</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>destAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>destPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref> *</type>
          <declname>rc_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the errors of a secure connection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>secure udp socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destPort</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>status of this connection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1abd18868db4e1ff65ad3c0454fb4ff7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_getSecureConnState</definition>
        <argsstring>(Udp_Socket_T const socket, Ip_Address_T *destAddr_ptr, Ip_Port_T destPort, SecureConnectionState_T *state)</argsstring>
        <name>Udp_getSecureConnState</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>destAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>destPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___security_8h_1a29fcbcabec77bab5261483a90c6e5305" kindref="member">SecureConnectionState_T</ref> *</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the status of a secure connection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>secure udp socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">destPort</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>status of this connection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, RC_OK is returned.<linebreak/>
 RC_DTLS_NO_CONNECTION<linebreak/>
 RC_UDP_INVALID_SOCKET<linebreak/>
</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="723" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a949dde3b82fa3953a60a6f7a70b29996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Udp_isEqualSocket</definition>
        <argsstring>(Udp_Socket_T const socket1, Udp_Socket_T const socket2)</argsstring>
        <name>Udp_isEqualSocket</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket1</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether two given sockets are equal or not and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket1</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket to be compared with other given socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">socket2</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket to be compared with other given socket.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE: sockets are equal, FALSE sockets are not equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="405" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a80091c14c3be20e5f1a4844aa2887f9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Udp_isValidSocket</definition>
        <argsstring>(Udp_Socket_T const socket)</argsstring>
        <name>Udp_isValidSocket</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given UDP socket is a valid or not and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP socket to be checked</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if socket handle is valid, FALSE if socket handle is invalid</para></simplesect>
see <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1ae527b82302bb2bd18db56004e7b0245f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Udp_iterateSecureConnections</definition>
        <argsstring>(int16_t *iterator_ptr, Udp_Socket_T const socket, bool onlyWithError, Ip_Address_T *destAddr_ptr, Ip_Port_T *port_ptr)</argsstring>
        <name>Udp_iterateSecureConnections</name>
        <param>
          <type>int16_t *</type>
          <declname>iterator_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyWithError</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>destAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the secure connections on a specified socket.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">iterator_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for this function. Initialized to -1 it reports the first connection. The next returned values will report the next connections. if -1 is returned, no more connections are assigned to this socket.<linebreak/>
 Example:<linebreak/>
 int16_t iter = -1;<linebreak/>
 while(1) {<linebreak/>
 Udp_iterateSecureConnections(&amp;iter,...);<linebreak/>
 if(iter &lt; 0) break;<linebreak/>
 do_some_thing(...);<linebreak/>
 }<linebreak/>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>secure udp socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">onlyWithError</parametername>
</parameternamelist>
<parameterdescription>
<para>true -&gt; report only connections with failures. false -&gt; report all connections</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">destAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint, in network byte order.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_listen</definition>
        <argsstring>(Ip_Port_T serverPort, Callable_T *callback, Udp_Socket_T *socket_ptr)</argsstring>
        <name>Udp_listen</name>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>serverPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new UDP socket that can receive messages on the given port. It is used by the stack in order to obtain sockets for UDP based servers. If this function returns RC_OK, the callback specified in the provided callback pointer must be called for every packet received on the specified port. <linebreak/>
 Note: This function encompasses following Berkeley socket API calls: socket(), bind(), listen()</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signal errors or other issues at the socket. The status code passed to the callback is either RC_OK on incoming data, or a UDP or an IP error otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serverPort</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to open, in network byte order. It has to be in range of 0-65535.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked after data is received on given port. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, handle to opened UDP socket is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a UDP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref>, <ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref>, <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref>, <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_listenSecure</definition>
        <argsstring>(Ip_Port_T serverPort, Callable_T *callback_ptr, Udp_Socket_T *socket)</argsstring>
        <name>Udp_listenSecure</name>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>serverPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> *</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a DTLS-UDP server socket and binds to the given port. It registers the callback function included in given callback_ptr for incoming messages. After successful calling of this function a remote client can establish a DTLS connection to this server port via Udp_connectSecure and communicate in a secure way with this server. Unlistening of this secure socket can be called by normal udp_unlisten.</para><para>If the system is configured to use pre-shared keys, Dtls_setServerPskCallback() MUST be called in order to provide keying material to the implementation via the supplied callback.</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signalize errors or other issues at the socket. The status code passed to the callback is either RC_OK on incoming data, or a UDP, an IP or a DTLS error otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">serverPort</parametername>
</parameternamelist>
<parameterdescription>
<para>Port to open. It has to be in range of 0-65535.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked after data is received on given port. It has to be a valid pointer. status for callback function: On success, RC_OK is returned.<linebreak/>
 RC_UDP_PORT_ALREADY_USED<linebreak/>
 RC_UDP_NO_FREE_PORT if limit of supported number of ports is reached in udp implementation<linebreak/>
 RC_DTLS_NO_BUFFER_FREE if no more secure connections can be established</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, handle to opened UDP socket is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when errorcode available RC_OK on success, or a UDP, an IP or a DTLS error otherwise.</para></simplesect>
<simplesect kind="see"><para>Udp_unlisten(), <ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref>, <ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref>, <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref>, <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>, Dtls_setServerPskCallback() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_openSecureSocket</definition>
        <argsstring>(Callable_T *callback_ptr, Udp_Socket_T *socket_ptr)</argsstring>
        <name>Udp_openSecureSocket</name>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a DTLS-UDP socket. After calling this function, the function <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> can be used to create DTLS connections from this socket to remote server ports.<linebreak/>
 Use <ref refid="_serval___udp_8h_1aea6cdd3012b94603a61804efac4e39d7" kindref="member">Udp_delete()</ref> to close this socket again.</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signalize errors or other issues at the socket. The status code passed to the callback is either RC_OK on incoming data, or a UDP or an IP error otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a callback function which will be invoked on incoming data or reporting errors and any socket issues. It can be NULL, if the upper-layer is not interested in any incoming data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, handle to UDP socket is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when error code available RC_OK on success, or a UDP, an IP or a DTLS error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref>, <ref refid="_serval___udp_8h_1aea6cdd3012b94603a61804efac4e39d7" kindref="member">Udp_delete()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="572" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a825ede1e47043c389b249bb9bc9d2350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_openSocket</definition>
        <argsstring>(Callable_T *callback_ptr, Udp_Socket_T *socket_ptr)</argsstring>
        <name>Udp_openSocket</name>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new UDP socket. Is is used by the stack to create sockets for UDP based communication clients. After calling this function, the function <ref refid="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" kindref="member">Udp_sendTo()</ref> can be used to send data to an arbitrary destination address and port. The source port of the socket can be assigned during creation of the socket or at the first call of Udp_sendTo, however, it must remain fixed during the lifetime of the socket.</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signal errors or other issues at the socket. The status code passed to the callback is either RC_OK on incoming data, or a UDP or an IP error otherwise.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a callback function which will be invoked on incoming data or reporting errors and any socket issues. It can be NULL, if the upper-layer is not interested in any incoming data.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, handle to UDP socket is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when available RC_OK on success, or a UDP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" kindref="member">Udp_sendTo()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_prepareForSending</definition>
        <argsstring>(Udp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Udp_prepareForSending</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares the socket and the sending context for sending. This function must be called before start sending. It ensures that the socket is ready for sending. It also allocate a communication buffer for serializing the message packets. This means that sendingCtx_ptr-&gt;buffer must be a valid buffer.</para><para>The allocated buffer is used for serialization of the message. It needs to be valid until either a) Udp_sendTo has been invoked with this buffer after which the ownership of the buffer passes back to the PAL implementation, or b) CommBuff_free has been called on this buffer to indicate that sending has been aborted due to a serialization error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket over which the message should be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sendingCtx_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the context structure of the sending job.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success. RC_UDP_OUT_OF_MEMORY and RC_UDP_SOCKET_BUSY to indicate the respective transient problems and the stack should retry sending using Udp_retrySendingLater. Any other IP, UDP or DTLS return code indicates an error that will cause the stack to abort sending.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref>, <ref refid="_serval___udp_8h_1a797524ee11620c66125976267b08d052" kindref="member">Udp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_receive</definition>
        <argsstring>(Udp_Socket_T socket, Ip_Address_T *ipAddr_ptr, Ip_Port_T *port_ptr, CommBuff_T *packet_ptr)</argsstring>
        <name>Udp_receive</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref> *</type>
          <declname>packet_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fetches the waiting data, the IP address and the UDP port of the sender from the given UDP connection. This function should only be called if the socket callback passed to <ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen()</ref> or <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref> is invoked with the status RC_OK, which indicates incoming data.</para><para>The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.</para><para>If socket is a DTLS-socket (opened with <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref> or <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref>) the received data are decrypted before handling them over to the caller of <ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP socket to get data from. It has to be a valid UDP socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ipAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the variable which should hold IP address of the sender, if the function returns success. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the variable which should hold port of the sender, if the function returns success. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">packet_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to buffer for received data. It has to be a valid pointer. The provided CommBuff_T element should be released by the upper-layer as soon as possible. After the return of the socket callback, the buffer is not guaranteed to stay available.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if data is successfully stored in given CommBuffer. Otherwise a a UDP, an IP or a DTLS error is returned.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen()</ref>, <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref>, <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a797524ee11620c66125976267b08d052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_retrySendingLater</definition>
        <argsstring>(Udp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Udp_retrySendingLater</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should schedule the given sending job to be carried out later. This means that this function takes care to invoke the corresponding sending function, i.e., sendingCtx_ptr-&gt;sendingFunc, at some point later. Any other return code except RC_OK means that sending cannot be completed by by lower layer at given time and should be dropped.</para><para>It is up to the PAL implementation when to execute the function. However, the execution MUST be asynchronous, i.e. the caller of this function can remove itself from the execution stack and is not part of the execution stack when sendingCtx_ptr-&gt;sendingFunc is executed.</para><para>An implementation of this function is free to decide whether to call sendingCtx_ptr-&gt;sending function after an interval or when the socket is able to send again. In the latter case, however, calling this function on a socket that is not busy, MUST nevertheless trigger execution of sendingCtx_ptr-&gt;sendingFunc.</para><para>Finally, on multi-threaded implementations of the PAL, the execution of sendingCtx_ptr-&gt;sendingFunc is expected to happen in the same context that normal network operations take place in.</para><para>Implementation note: The interface currently does not provide a meaningful way for aborting a retry. This can occur if the message times out while waiting for transmission and is thus deleted. This in turn will result in the MsgSendingCtx_T structure to have been cleared. Thus an implementation must check the validity of the sending function in sendingCtx_ptr-&gt;sendingFunc before calling it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket over which the message should be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sendingCtx_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the context structure of the sending job.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a UDP, an IP or a DTLS error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref>, <ref refid="_serval___udp_8h_1a797524ee11620c66125976267b08d052" kindref="member">Udp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a5ce40dd127665aa3f04ee5e10577d4a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_send</definition>
        <argsstring>(Udp_Socket_T socket, CommBuff_T packet, Callable_T *callback_ptr)</argsstring>
        <name>Udp_send</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>packet</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IMPORTANT: THIS FUNCTION IS DEPRECATED AND NO LONGER TESTED! IT WILL BE REMOVED IN VERSION 2.0 As an alternative use Udp_sendTo<linebreak/>
</para><para>This function sends given data over a given bound UDP socket. Before invoking this function the function <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref> has to be invoked in order to specify the IP address and port of the recipient.</para><para>This function sends the given data over the given socket to the destination IP address and port associated with the socket in the function <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref>. Every time before invoking this function, the function <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref> must be invoked and return RC_OK. The CommBuff_T element provided by <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref> must be used here to carry the payload.</para><para>After this function returns, the packet will not necessarily have been sent. The caller will be informed about the completion of sending using the given callback function. The status code passed to the callback is either RC_OK on success, or a UDP, an IP or a DTLS error otherwise. Successful sending does not guarantee that the remote party received the packet as UDP does not support reliable communication.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP socket to use for sending. The socket has to be created before calling this function via <ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to send to intended recipient (CommBuff_T contains the data). This CommBuff_T must be the one which has been provided by the function <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref>. UDP may choose to free the given CommBuff_T inside this function. Hence, the CommBuff_T is not guaranteed to be available after the return of this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function that will be triggered after sending UDP data is finished. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a UDP, an IP or a DTLS error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect()</ref></para></simplesect>
<xrefsect id="deprecated_1_deprecated000061"><xreftitle>Deprecated</xreftitle><xrefdescription></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Udp_sendTo</definition>
        <argsstring>(Udp_Socket_T socket, Ip_Address_T *ipAddr_ptr, Ip_Port_T port, CommBuff_T packet, Callable_T *callback_ptr)</argsstring>
        <name>Udp_sendTo</name>
        <param>
          <type><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>packet</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sends the given data over the given socket to the given IP address and port. Every time before invoking this function, the function <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref> must be invoked and return RC_OK. The CommBuff_T element provided by <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref> must be used here to carry the payload.<linebreak/>
</para><para>After this function returns, the packet will not necessarily have been sent. The caller will be informed about the completion of sending using the given callback function. The status code passed to the callback is either RC_OK on success, or a UDP, an IP or a DTLS error otherwise. Successful sending does not guarantee that the remote party received the packet as UDP does not support reliable communication.</para><para>If socket is a DTLS-socket (opened with <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref> or <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref>) the sending data are encrypted before sending them out of the socket. In case of a DTLS client, a DTLS connection must be opened with <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref> before you can send data. In case of a DTLS server the DTLS connections are automatically opened by the DTLS listener socket <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP socket to use for sending. The socket has to be created before calling this function using <ref refid="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" kindref="member">Tcp_connect()</ref> or <ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref>.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ipAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the IP address of the recipient</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>UDP port of the recipient, in network byte order.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to send to intended recipient (CommBuff_T contains the data). This CommBuff_T must be the one which has been provided by the function <ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending()</ref>. The PAL implementation must free any buffers that have been allocated. Thus, the buffer must not be used after the return of this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the function that will be triggered after sending UDP data is finished. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success. RC_UDP_OUT_OF_MEMORY and RC_UDP_SOCKET_BUSY to indicate the respective transient problems and the stack should retry sending using Udp_retrySendingLater. Any other IP, UDP or DTLS return code indicates an error that will cause the stack to abort sending.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen()</ref>, Udp_createSocket(), <ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket()</ref>, <ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure()</ref>, <ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure()</ref>, <ref refid="_serval___udp_8h_1a797524ee11620c66125976267b08d052" kindref="member">Udp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h" line="295" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface to the platform UDP (Transport Layer) </para>    </briefdescription>
    <detaileddescription>
<para>This interface provides functions to handle UDP communication. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>SERVAL_UDP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_UDP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___policy_8h" kindref="compound">Serval_Policy.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___ip_8h" kindref="compound">Serval_Ip.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___callable_8h" kindref="compound">Serval_Callable.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_8h" kindref="compound">Serval_Msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_SENDING_CONTEXT_IN_PAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_sending_ctx_8h" kindref="compound">Serval_MsgSendingCtx.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DTLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___security_8h" kindref="compound">Serval_Security.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_STACK_CALLS_TLS_API<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_DTLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a8b3ca8bdf3bad26f521337e989645b0c" kindref="member">Dtls_delete</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a60d58695ab0726ab792570011e43418c" kindref="member">Dtls_receive</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>*port_ptr,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>*packet_ptr);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a45aa0edb60e9d2f305120e7484aaaec0" kindref="member">Dtls_sendTo</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>packet,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1ab520d90d44338414a635bab281c4579c" kindref="member">Dtls_prepareForSending</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a91d660512d3d80ff2f0220f96225654d" kindref="member">Dtls_retrySendingLater</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="_serval___udp_8h_1af678e7abdffe8ad548e44a89476c7ea5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dtls_delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_serval___udp_8h_1a43b0326030746e1ad79efae0af6c6430" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_RECEIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dtls_receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="_serval___udp_8h_1ae3bc94781bdff7f2392170e8384f17cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_SEND_TO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dtls_sendTo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="_serval___udp_8h_1a5a7bc6753f338fef2f2f5ad85d29a5a2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_PREPARE_FOR_SENDING<sp/>Dtls_prepareForSending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="_serval___udp_8h_1a5fc1290d7379873f77a2cf4b2c36b3aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_RETRY_SENDING_LATER<sp/>Dtls_retrySendingLater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Udp_delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_RECEIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Udp_receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_SEND_TO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Udp_sendTo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_PREPARE_FOR_SENDING<sp/>Udp_prepareForSending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UDP_RETRY_SENDING_LATER<sp/>Udp_retrySendingLater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a825ede1e47043c389b249bb9bc9d2350" kindref="member">Udp_openSocket</ref>(<ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,<sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1aa3a01653b941ec375fcdd3fec3d2eb44" kindref="member">Udp_listen</ref>(<ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>serverPort,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a9e7b60aebf992364f305526216ce55b3" kindref="member">Udp_connect</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,<sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a5ce40dd127665aa3f04ee5e10577d4a2" kindref="member">Udp_send</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>packet,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a9e89cb36ddf286d2bf66e6451fb9290c" kindref="member">Udp_sendTo</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>packet,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1aea6cdd3012b94603a61804efac4e39d7" kindref="member">Udp_delete</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1af4207d2c1b9965da405dbaa345450cc0" kindref="member">Udp_receive</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>*port_ptr,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>*packet_ptr);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___udp_8h_1a80091c14c3be20e5f1a4844aa2887f9e" kindref="member">Udp_isValidSocket</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/><ref refid="_serval___udp_8h_1ae8e93d9d289bfd800fb01a9ff46aa516" kindref="member">Udp_getInvalidSocket</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___udp_8h_1a949dde3b82fa3953a60a6f7a70b29996" kindref="member">Udp_isEqualSocket</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket1,<sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket2);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1aff90379b61aacc475962d81f0bccbaf0" kindref="member">Udp_prepareForSending</ref>(</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a797524ee11620c66125976267b08d052" kindref="member">Udp_retrySendingLater</ref>(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DTLS_SERVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1acdec948079e7a35598eeea0da9c2c8d3" kindref="member">Udp_listenSecure</ref>(<ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>serverPort,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>*socket);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_DTLS_SERVER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DTLS_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a3d22e807414edb0b23ab9af3ba3e2a3c" kindref="member">Udp_openSecureSocket</ref>(<ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1ae4c741c8e0162172d7c84a5fa6293a3a" kindref="member">Udp_connectSecure</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*destAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>destPort);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_DTLS_CLIENT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DTLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a3824054f35fdbf9ff7c8900db27e21d6" kindref="member">Udp_closeSecureConn</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*destAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>destPort);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___udp_8h_1ae527b82302bb2bd18db56004e7b0245f" kindref="member">Udp_iterateSecureConnections</ref>(int16_t<sp/>*iterator_ptr,</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyWithError,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*destAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>*port_ptr);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1a8a22fabff7b36a903c5a6917cfbfd518" kindref="member">Udp_getSecureConnError</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*destAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>destPort,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>*rc_ptr);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___udp_8h_1abd18868db4e1ff65ad3c0454fb4ff7e0" kindref="member">Udp_getSecureConnState</ref>(<ref refid="_p_ip_8h_1a98c98398d67f4f7443a66da696479bc3" kindref="member">Udp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*destAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>destPort,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___security_8h_1a29fcbcabec77bab5261483a90c6e5305" kindref="member">SecureConnectionState_T</ref><sp/>*state);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_DTLS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_UDP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h"/>
  </compounddef>
</doxygen>
