<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_ble_system_8h" kind="file">
    <compoundname>BleSystem.h</compoundname>
    <includes refid="_ble_types_8h" local="yes">BleTypes.h</includes>
    <includedby refid="_ble_system_8c" local="yes">SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c</includedby>
    <incdepgraph>
      <node id="28447">
        <label>SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h</label>
        <link refid="BleSystem.h"/>
        <childnode refid="28448" relation="include">
        </childnode>
      </node>
      <node id="28448">
        <label>BleTypes.h</label>
        <link refid="_ble_types_8h"/>
        <childnode refid="28449" relation="include">
        </childnode>
      </node>
      <node id="28450">
        <label>BLECustomConfig.h</label>
        <link refid="_common_2config_2_b_l_e_custom_config_8h"/>
      </node>
      <node id="28449">
        <label>BleConfig.h</label>
        <link refid="_ble_config_8h"/>
        <childnode refid="28450" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28451">
        <label>SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h</label>
        <link refid="BleSystem.h"/>
        <childnode refid="28452" relation="include">
        </childnode>
      </node>
      <node id="28452">
        <label>SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c</label>
        <link refid="_ble_system_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_ble_system_8h_1af401de9db19b1d60308d5f5f31ae0834" prot="public" static="no">
        <name>BLEINFOTYPE_ATTHANDLESCHANGED</name>
        <initializer>0x11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="283" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1addf3385575a42ca76022cfde9fc4abdd" prot="public" static="no">
        <name>BLEINFOTYPE_MDIV2</name>
        <initializer>0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="277" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1aa265c638d4c8cc9dec437459ea8c929f" prot="public" static="no">
        <name>BLEINFOTYPE_MLTK16</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="275" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1af382a1abd1aeee61157bbc31ade69f04" prot="public" static="no">
        <name>BLEINFOTYPE_MPROP</name>
        <initializer>0x05</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="279" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1ab7f7ab77c29cba8f6e1fd3bac9302d3c" prot="public" static="no">
        <name>BLEINFOTYPE_MRAND8</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="278" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1ab2bf931538ee2b42b85997e6b0398d33" prot="public" static="no">
        <name>BLEINFOTYPE_REMOTE_IRK</name>
        <initializer>0x07</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="281" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1a15dbec6d595887d7068ae76f8f8a8734" prot="public" static="no">
        <name>BLEINFOTYPE_SERVICECHANGECONFIG</name>
        <initializer>0x12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="284" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1aa3b769dc27eae3bb0b17502376524d1f" prot="public" static="no">
        <name>BLEINFOTYPE_SLTK16</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="276" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1a7f3331de97d67e2d808808453be90888" prot="public" static="no">
        <name>BLEINFOTYPE_SPROP</name>
        <initializer>0x06</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="280" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1affe776513b24d84b39af8ab0930fef7f" prot="public" static="no">
        <name>max</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &gt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="32" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_ble_system_8h_1ac6afabdc09a49a433ee19d8a9486056d" prot="public" static="no">
        <name>min</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(((a) &lt; (b)) ? (a) : (b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="28" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_ble_system_8h_1aea03852267e73019391033c4afc10b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_CancelTimer</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_CancelTimer</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack request its timer destruction</para><para><ref refid="_ble_system_8c_1aea03852267e73019391033c4afc10b36" kindref="member">SYSTEM_CancelTimer()</ref> The BLE stack no more need timer. it request destruction of the timer created with <ref refid="_ble_system_8c_1ae5b2f31ab4cf42b40a157ccf94048519" kindref="member">SYSTEM_CreateTimer()</ref>.</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1ae5b2f31ab4cf42b40a157ccf94048519" kindref="member">SYSTEM_CreateTimer()</ref> , <ref refid="_ble_system_8c_1a65372745d14128ffbb349918c446cc6a" kindref="member">SYSTEM_TimerGetRemain()</ref></para></simplesect>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="256" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1ae5b2f31ab4cf42b40a157ccf94048519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_CreateTimer</definition>
        <argsstring>(void *func, void *param, U32 millisecond)</argsstring>
        <name>SYSTEM_CreateTimer</name>
        <param>
          <type>void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a811024d35b9b8a41095b1f583b649e56" kindref="member">U32</ref></type>
          <declname>millisecond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack request a timer creation</para><para>SYSTEM_TimerCreate() The BLE stack need one timer in order to calulates timeout or wachdog. It uses this function to create the timer, timers are internally multiplexed, so it need only one.</para><para><simplesect kind="see"><para>SYSTEM_TimerCancel() , <ref refid="_ble_system_8c_1a65372745d14128ffbb349918c446cc6a" kindref="member">SYSTEM_TimerGetRemain()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to a function to call when the timer expires </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>param</parametername>
</parameternamelist>
<parameterdescription>
<para>: param to pass in func when the timer expire </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>millisecond</parametername>
</parameternamelist>
<parameterdescription>
<para>: time to wait before the timer expiration</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="243" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a7075172a4ee0dadb45b65aa54276be60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_DatabaseMutexPend</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_DatabaseMutexPend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock the Attribute database mutex.</para><para><ref refid="_ble_system_8c_1a7075172a4ee0dadb45b65aa54276be60" kindref="member">SYSTEM_DatabaseMutexPend()</ref> The BLE stack uses a MUTEX to prevent internal/external multiple access to the Attribute protocol database, the BLE stack calls this function to acquire the MUTEX. This function SHALL be implemented. Note that the User application does not call this function directly, but call the application interface ATT_Server_SecureDatabaseAccess().</para><para>It could be implemented using a mutex or perhaps a semaphore</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1ab70c2f4c136c32167af5cd50c65278b1" kindref="member">SYSTEM_DatabaseMutexPost()</ref></para></simplesect>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="100" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1ab70c2f4c136c32167af5cd50c65278b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_DatabaseMutexPost</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_DatabaseMutexPost</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock the stack mutex.</para><para><ref refid="_ble_system_8c_1ab70c2f4c136c32167af5cd50c65278b1" kindref="member">SYSTEM_DatabaseMutexPost()</ref> The BLE stack uses a MUTEX to prevent internal/external multiple access to the Attribute protocol database, the BLE stack calls this function to release the MUTEX. This function SHALL be implemented. Note that the User application does not call this function directly, but call the application interface ATT_Server_ReleaseDatabaseAccess().</para><para>It could be implemented using a mutex or perhaps a semaphore</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1a7075172a4ee0dadb45b65aa54276be60" kindref="member">SYSTEM_DatabaseMutexPend()</ref></para></simplesect>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="124" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a593377cb318b65edfa2183e693847d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_GetDeviceAddressAtIndexInPersistentMemory</definition>
        <argsstring>(U8 index, BD_ADDR **addr)</argsstring>
        <name>SYSTEM_GetDeviceAddressAtIndexInPersistentMemory</name>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> **</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack requests the system the current address of a remote device saved in persistent memory.</para><para><ref refid="_ble_system_8h_1a593377cb318b65edfa2183e693847d2f" kindref="member">SYSTEM_GetDeviceAddressAtIndexInPersistentMemory()</ref> When the stack is able to resolve remote RADOM RESOLVABLE private address, it may ask the system the devices addresses of the remote device saved in persistent memory.</para><para>BLE_SECURITY shall be enabled. BLE_SM_SLAVE_RESOLVE_MASTER_RANDOM_ADDRESS shall be enabled</para><para>index : a 0-based index used to describe for which device, the address shall be retrieved (if SYSTEM_GetNumberOfDevicesInPersistentMemory set numberOfDevices = 1; then the first device will have index of 0)</para><para>addr : A valid pointer to a system memory block in which the stack will read the remote device address. Upon failure the system layer shall return a NULL pointer.</para><para>return none </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1afd05ecabb128333c50c37c9c4f416f48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_GetNumberOfDevicesInPersistentMemory</definition>
        <argsstring>(U8 *numberOfDevices)</argsstring>
        <name>SYSTEM_GetNumberOfDevicesInPersistentMemory</name>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref> *</type>
          <declname>numberOfDevices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack requests the system the number of remote devices saved in persistent memory</para><para><ref refid="_ble_system_8h_1afd05ecabb128333c50c37c9c4f416f48" kindref="member">SYSTEM_GetNumberOfDevicesInPersistentMemory()</ref> When the stack is able to resolve remote RADOM RESOLVABLE private address, it need to have access to the number of records (devices) that the implementation is saving in the persistent memory</para><para>BLE_SECURITY shall be enabled. BLE_SM_SLAVE_RESOLVE_MASTER_RANDOM_ADDRESS shall be enabled</para><para>numberOfDevices : A valid pointer to a stack memory block in which the number of devices supported by the persistent memory storage shall be written (ex: *numberOfDevices = 1; indicate that the persistent memory storage is supporting one device.</para><para>return none </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="383" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1af1e3460f35fb11532ea4fcffd8791e5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref></type>
        <definition>BleStatus SYSTEM_GetPersistentInformation</definition>
        <argsstring>(BD_ADDR *addr, U8 infoType, U8 **infoValue, U8 *infoLen)</argsstring>
        <name>SYSTEM_GetPersistentInformation</name>
        <param>
          <type><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>infoType</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref> **</type>
          <declname>infoValue</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref> *</type>
          <declname>infoLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack requests the system to retrieve an information from persistent memory</para><para><ref refid="_ble_system_8h_1af1e3460f35fb11532ea4fcffd8791e5e" kindref="member">SYSTEM_GetPersistentInformation()</ref> The BLE stack needs to retrieve a specific security information from the persistent memory.</para><para>BLE_SECURITY shall be enabled.</para><para>addr : A valid pointer to the remote address for which security information shall be retrieved infoType : the type of the information to retrieve infoValue : the value of the information retrieved infoLen : a the length the information retrieved</para><para>return the status of the operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a90cb362bfcbc0199a48eeb02b9351fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref></type>
        <definition>U16 SYSTEM_MemCmp</definition>
        <argsstring>(const void *a1, const void *a2, U16 n)</argsstring>
        <name>SYSTEM_MemCmp</name>
        <param>
          <type>const void *</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>a2</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a8fb4759bffff4847275b933b92777717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SYSTEM_MemCpy</definition>
        <argsstring>(void *to, const void *from, U16 n)</argsstring>
        <name>SYSTEM_MemCpy</name>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1aa9c4a8698d1a617177723438e73e7c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SYSTEM_MemSet</definition>
        <argsstring>(void *addr, U8 value, U16 n)</argsstring>
        <name>SYSTEM_MemSet</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a0f7e4888692ae30ad5ddeab0c7918eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref></type>
        <definition>BleStatus SYSTEM_RemovePersistentInformation</definition>
        <argsstring>(BD_ADDR *addr, U8 infoTypeFrom, U8 infoTypeTo)</argsstring>
        <name>SYSTEM_RemovePersistentInformation</name>
        <param>
          <type><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>infoTypeFrom</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>infoTypeTo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack request the system to remove an information from persistent memory</para><para><ref refid="_ble_system_8h_1a0f7e4888692ae30ad5ddeab0c7918eec" kindref="member">SYSTEM_RemovePersistentInformation()</ref> The BLE stack needs to remove a specific persistent information from the persistent memory. It request to remove a range of infotype The stack call this function when the Application wants to unbond with a remote device or when it detect that profile information is no more valid Also, an application may delete the linkUp information for a given profile by calling this function.</para><para>BLE_SECURITY shall be enabled.</para><para>addr : A valid pointer to the remote address for which persistent information shall be retrieved infoTypeFrom : the starting range of the infoType to delete, this infoTypeFrom is included into the range to delete infoTypeTo : the ending range of the infoType to delete, this infoTypeTo is included into the range to delete</para><para>return the status of the operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1abf61858fe97532d5dfdff19d70e8eb98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* SYSTEM_ReverseMemCpy</definition>
        <argsstring>(void *to, const void *from, U16 n)</argsstring>
        <name>SYSTEM_ReverseMemCpy</name>
        <param>
          <type>void *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1aff6291e2141c9a5687e38e1d4dd344ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref></type>
        <definition>BleStatus SYSTEM_SetPersistentInformation</definition>
        <argsstring>(BD_ADDR *addr, U8 infoType, U8 *infoValue, U8 infoLen)</argsstring>
        <name>SYSTEM_SetPersistentInformation</name>
        <param>
          <type><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>infoType</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref> *</type>
          <declname>infoValue</declname>
        </param>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>infoLen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack requests the system to store an information in persistent memory</para><para><ref refid="_ble_system_8h_1aff6291e2141c9a5687e38e1d4dd344ff" kindref="member">SYSTEM_SetPersistentInformation()</ref> The BLE stack needs to save a specific security information with a specified remote device in the persistent memory.</para><para>BLE_SECURITY shall be enabled.</para><para>addr : A valid pointer to the remote address for which security information should be stored, IMPORTANT NOTE: if <ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> is 00:00:00:00:00:00, all the entry of the persistent memory shall be updated. infoType : the type of the information to store infoValue : a valid pointer to the information to save infoLen : the length the information to save</para><para>return the status of the operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1adc3b05fa002d7d6691d93454c4a09a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_StackMutexPend</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_StackMutexPend</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock the stack mutex.</para><para><ref refid="_ble_system_8c_1adc3b05fa002d7d6691d93454c4a09a25" kindref="member">SYSTEM_StackMutexPend()</ref> The BLE stack uses a MUTEX to prevent internal interface reentrency and dead lock, the BLE stack calls this function to acquire the MUTEX this function SHALL be implemented. It could be implemented using a mutex or perhaps a semaphore</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1ace421c7c66b2caec3fced6c8188223c6" kindref="member">SYSTEM_StackMutexPost()</ref></para></simplesect>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="55" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1ace421c7c66b2caec3fced6c8188223c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_StackMutexPost</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_StackMutexPost</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock the stack mutex.</para><para><ref refid="_ble_system_8c_1ace421c7c66b2caec3fced6c8188223c6" kindref="member">SYSTEM_StackMutexPost()</ref> The BLE stack uses a MUTEX to prevent internal interface reentrency and dead lock, the BLE stack calls this function to acquire the MUTEX this function SHALL be implemented. It could be implemented using a mutex or perhaps a semaphore</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1adc3b05fa002d7d6691d93454c4a09a25" kindref="member">SYSTEM_StackMutexPend()</ref></para></simplesect>
<simplesect kind="return"><para>none</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="76" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1a65372745d14128ffbb349918c446cc6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_ble_types_8h_1a811024d35b9b8a41095b1f583b649e56" kindref="member">U32</ref></type>
        <definition>U32 SYSTEM_TimerGetRemain</definition>
        <argsstring>(void)</argsstring>
        <name>SYSTEM_TimerGetRemain</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack request the timer remainting time</para><para><ref refid="_ble_system_8c_1a65372745d14128ffbb349918c446cc6a" kindref="member">SYSTEM_TimerGetRemain()</ref> The BLE stack need the remaining time of the timer created by <ref refid="_ble_system_8c_1ae5b2f31ab4cf42b40a157ccf94048519" kindref="member">SYSTEM_CreateTimer()</ref> in order to do some internal things</para><para><simplesect kind="see"><para><ref refid="_ble_system_8c_1ae5b2f31ab4cf42b40a157ccf94048519" kindref="member">SYSTEM_CreateTimer()</ref> , <ref refid="_ble_system_8c_1aea03852267e73019391033c4afc10b36" kindref="member">SYSTEM_CancelTimer()</ref></para></simplesect>
<simplesect kind="return"><para>the time remaining in millisecond.</para></simplesect>
<simplesect kind="author"><para>Alexandre GIMARD </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="268" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Integration/_PortingTemplates_/BleSystem.c" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="_ble_system_8h_1aa0c18e6976101284b8a71121c6c6b15e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory</definition>
        <argsstring>(U8 index, BD_ADDR *to)</argsstring>
        <name>SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory</name>
        <param>
          <type><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref></type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref> *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The stack requests the system to replace the address of a remote device saved in persistent memory</para><para><ref refid="_ble_system_8h_1aa0c18e6976101284b8a71121c6c6b15e" kindref="member">SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory()</ref> When the stack is able to resolve remote RADOM RESOLVABLE private address, it may be able to &quot;resolve remote&quot;random resolvable address meaning that it can detect that the remote device has changed its Bluetooth device address; in this case the stack is asking the system to update the persistent memory storage with the new address for the given device index.</para><para>BLE_SECURITY shall be enabled. BLE_SM_SLAVE_RESOLVE_MASTER_RANDOM_ADDRESS shall be enabled</para><para>index : a 0-based index used to describe for which device, the address shall be updated (if SYSTEM_GetNumberOfDevicesInPersistentMemory set numberOfDevices = 1; then the first device will have index of 0)</para><para>to : A valid pointer to a stack memory block in which the new remote device address is stored.</para><para>return none </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h" line="434" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__BLESYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__BLESYSTEM_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>software<sp/>is<sp/>copyrighted<sp/>by<sp/>Alpwise,<sp/>2016.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>The<sp/>use<sp/>of<sp/>this<sp/>software<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>XDK<sp/>SDK<sp/>EULA</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">/****************************************************************************</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>File:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BleSystem.h</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Description:<sp/><sp/><sp/>Contains<sp/>interfaces<sp/>routines<sp/>for<sp/>SYSTEM<sp/>service<sp/>needed<sp/>by<sp/>the<sp/>BLE</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Stack.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>These<sp/>routines<sp/>should<sp/>be<sp/>filled<sp/>by<sp/>the<sp/>stack<sp/>implementer&apos;s</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Created:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>June,<sp/>2008</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Version:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.1</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>File<sp/>Revision:<sp/>$Rev:<sp/>3015<sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>$Project$</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_ble_types_8h" kindref="compound">BleTypes.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="_ble_system_8h_1ac6afabdc09a49a433ee19d8a9486056d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>min(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((a)<sp/>&lt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="_ble_system_8h_1affe776513b24d84b39af8ab0930fef7f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>max(a,b)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((a)<sp/>&gt;<sp/>(b))<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>External<sp/>Functions</highlight></codeline>
<codeline lineno="37"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lock<sp/>the<sp/>stack<sp/>critical<sp/>section.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>SYSTEM_StackMutexPend()</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>uses<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>prevent<sp/>internal<sp/>interface<sp/></highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/><sp/>reentrency<sp/>and<sp/>dead<sp/>lock,<sp/>the<sp/>BLE<sp/>stack<sp/>calls<sp/>this<sp/>function<sp/>to<sp/>acquire</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>critical<sp/>section</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>function<sp/>SHALL<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>could<sp/>be<sp/>implemented<sp/>using<sp/>a<sp/>mutex<sp/>or<sp/>perhaps<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>shall<sp/>be<sp/>DISABLED</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_StackMutexPost()</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1adc3b05fa002d7d6691d93454c4a09a25" kindref="member">SYSTEM_StackMutexPend</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYSTEM_StackMutexPend(s)<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unlock<sp/>the<sp/>stack<sp/>critical<sp/>section.</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>SYSTEM_StackMutexPost()</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>uses<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>prevent<sp/>internal<sp/>interface<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/><sp/>reentrency<sp/>and<sp/>dead<sp/>lock,<sp/>the<sp/>BLE<sp/>stack<sp/>calls<sp/>this<sp/>function<sp/>to<sp/>release</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/><sp/>the<sp/>critical<sp/>section</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>function<sp/>SHALL<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>could<sp/>be<sp/>implemented<sp/>using<sp/>a<sp/>mutex<sp/>or<sp/>perhaps<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>shall<sp/>be<sp/>DISABLED</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_StackMutexPend()</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1ace421c7c66b2caec3fced6c8188223c6" kindref="member">SYSTEM_StackMutexPost</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYSTEM_StackMutexPost(s)<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lock<sp/>the<sp/>Attribute<sp/>database<sp/>mutex.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>SYSTEM_DatabaseMutexPend()</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>uses<sp/>a<sp/>MUTEX<sp/>to<sp/>prevent<sp/>internal/external<sp/>multiple<sp/>access<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>the<sp/>Attribute<sp/>protocol<sp/>database,<sp/>the<sp/>BLE<sp/>stack<sp/>calls<sp/>this<sp/>function<sp/>to<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/><sp/>acquire<sp/>the<sp/>MUTEX.<sp/>This<sp/>function<sp/>SHALL<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/><sp/>Note<sp/>that<sp/>the<sp/>User<sp/>application<sp/>does<sp/>not<sp/>call<sp/>this<sp/>function<sp/>directly,<sp/>but</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/><sp/>call<sp/>the<sp/>application<sp/>interface<sp/>ATT_SERVER_SecureDatabaseAccess().</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>Only<sp/>suitable<sp/>if<sp/>ATTRIBUTE_PROTOCOL<sp/>is<sp/>enabled<sp/>(1)</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>could<sp/>be<sp/>implemented<sp/>using<sp/>a<sp/>mutex<sp/>or<sp/>perhaps<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>shall<sp/>be<sp/>DISABLED</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_DatabaseMutexPost()</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1a7075172a4ee0dadb45b65aa54276be60" kindref="member">SYSTEM_DatabaseMutexPend</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYSTEM_DatabaseMutexPend(s)<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Unlock<sp/>the<sp/>stack<sp/>mutex.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>SYSTEM_DatabaseMutexPost()</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>uses<sp/>a<sp/>MUTEX<sp/>to<sp/>prevent<sp/>internal/external<sp/>multiple<sp/>access<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/><sp/>to<sp/>the<sp/>Attribute<sp/>protocol<sp/>database,<sp/>the<sp/>BLE<sp/>stack<sp/>calls<sp/>this<sp/>function<sp/>to<sp/></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/><sp/>release<sp/>the<sp/>MUTEX.<sp/>This<sp/>function<sp/>SHALL<sp/>be<sp/>implemented.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/><sp/>Note<sp/>that<sp/>the<sp/>User<sp/>application<sp/>does<sp/>not<sp/>call<sp/>this<sp/>function<sp/>directly,<sp/>but</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/><sp/>call<sp/>the<sp/>application<sp/>interface<sp/>ATT_SERVER_ReleaseDatabaseAccess().</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>Only<sp/>suitable<sp/>if<sp/>ATTRIBUTE_PROTOCOL<sp/>is<sp/>enabled<sp/>(1)</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>could<sp/>be<sp/>implemented<sp/>using<sp/>a<sp/>mutex<sp/>or<sp/>perhaps<sp/>a<sp/>semaphore</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>shall<sp/>be<sp/>DISABLED</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_DatabaseMutexPend()</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1ab70c2f4c136c32167af5cd50c65278b1" kindref="member">SYSTEM_DatabaseMutexPost</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SYSTEM_DatabaseMutexPost(s)<sp/>{};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_STACK_SKIP_MUTEX_FUNCTIONS<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>Memory<sp/>Operation</highlight></codeline>
<codeline lineno="131"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>n<sp/>bytes<sp/>from<sp/>the<sp/>&quot;from&quot;<sp/>address<sp/>to<sp/>the<sp/>&quot;to&quot;<sp/>address<sp/></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>SYSTEM_MemCpy()</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>copy<sp/>n<sp/>bytes<sp/>from<sp/>the<sp/>&quot;from&quot;<sp/>address<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/><sp/>&quot;to&quot;<sp/>address.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>bytes<sp/>are<sp/>copied<sp/>in<sp/>the<sp/>&quot;to&quot;<sp/>buffer<sp/>as<sp/>the<sp/>the<sp/>&quot;to&quot;<sp/>first<sp/>byte</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/><sp/>will<sp/>take<sp/>the<sp/>value<sp/>from<sp/>the<sp/>&quot;from&quot;<sp/>first<sp/>byte<sp/>and<sp/>the<sp/>&quot;to&quot;<sp/>n-ieme</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/><sp/><sp/>byte<sp/>will<sp/>take<sp/>the<sp/>value<sp/>from<sp/>the<sp/>n-ieme<sp/>&quot;from<sp/>&quot;<sp/>byte.</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>stack<sp/>uses<sp/>for<sp/>this<sp/>function<sp/>its<sp/>internal<sp/>function<sp/>definition<sp/>if</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>is<sp/>set<sp/>to<sp/>1</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>system<sp/>has<sp/>already<sp/>this<sp/>kind<sp/>of<sp/>mechanism<sp/>set<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>to<sp/>0<sp/>in<sp/>&quot;BLECustomConfig.h&quot;<sp/>and</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/><sp/>implement<sp/>these<sp/>functions<sp/>in<sp/>the<sp/>application<sp/>code,<sp/>it<sp/>may<sp/>save<sp/>ROM<sp/>memory.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/>to:<sp/>Pointer<sp/>to<sp/>the<sp/>destination<sp/>address</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/><sp/>from:<sp/>Pointer<sp/>to<sp/>the<sp/>source<sp/>address</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/>n:<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>copy</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>return<sp/>A<sp/>pointer<sp/>on<sp/>the<sp/>&quot;to&quot;<sp/>address</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="_ble_system_8h_1a8fb4759bffff4847275b933b92777717" kindref="member">SYSTEM_MemCpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from,<sp/><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref><sp/>n);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Copy<sp/>n<sp/>bytes<sp/>from<sp/>the<sp/>&quot;from&quot;<sp/>address<sp/>to<sp/>the<sp/>&quot;to&quot;<sp/>address<sp/></highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>SYSTEM_ReverseMemCpy()</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>copy<sp/>n<sp/>bytes<sp/>from<sp/>the<sp/>&quot;from&quot;<sp/>address<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/><sp/>&quot;to&quot;<sp/>address.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>bytes<sp/>are<sp/>copied<sp/>in<sp/>the<sp/>&quot;to&quot;<sp/>buffer<sp/>as<sp/>the<sp/>the<sp/>&quot;to&quot;<sp/>first<sp/>byte</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/><sp/><sp/>will<sp/>take<sp/>the<sp/>value<sp/>from<sp/>the<sp/>n-ieme<sp/>&quot;from&quot;<sp/>byte<sp/>and<sp/>the<sp/>&quot;to&quot;<sp/>n-ieme</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/><sp/><sp/>byte<sp/>will<sp/>take<sp/>the<sp/>value<sp/>from<sp/>the<sp/>first<sp/>&quot;from<sp/>&quot;<sp/>byte.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>stack<sp/>uses<sp/>for<sp/>this<sp/>function<sp/>its<sp/>internal<sp/>function<sp/>definition<sp/>if</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>is<sp/>set<sp/>to<sp/>1</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>system<sp/>has<sp/>already<sp/>this<sp/>kind<sp/>of<sp/>mechanism<sp/>set<sp/></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>to<sp/>0<sp/>in<sp/>&quot;BLECustomConfig.h&quot;<sp/>and</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/><sp/>implement<sp/>these<sp/>functions<sp/>in<sp/>the<sp/>application<sp/>code,<sp/>it<sp/>may<sp/>save<sp/>ROM<sp/>memory.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/><sp/>to:<sp/>Pointer<sp/>to<sp/>the<sp/>destination<sp/>address</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/><sp/>from:<sp/>Pointer<sp/>to<sp/>the<sp/>source<sp/>address</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/><sp/>n:<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>copy</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*<sp/>return<sp/>A<sp/>pointer<sp/>on<sp/>the<sp/>&quot;to&quot;<sp/>address</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="_ble_system_8h_1abf61858fe97532d5dfdff19d70e8eb98" kindref="member">SYSTEM_ReverseMemCpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*to,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*from,<sp/><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref><sp/>n);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Compare<sp/>n<sp/>bytes<sp/>between<sp/>the<sp/>&quot;a1&quot;<sp/>address<sp/>and<sp/>the<sp/>&quot;a2&quot;<sp/>address<sp/></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>SYSTEM_MemCmp()</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>compares<sp/>n<sp/>bytes<sp/>between<sp/>the<sp/>&quot;a1&quot;<sp/>address<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/>&quot;a2&quot;<sp/>address.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>stack<sp/>uses<sp/>for<sp/>this<sp/>function<sp/>its<sp/>internal<sp/>function<sp/>definition<sp/>if</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>is<sp/>set<sp/>to<sp/>1</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>system<sp/>has<sp/>already<sp/>this<sp/>kind<sp/>of<sp/>mechanism<sp/>set<sp/></highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>to<sp/>0<sp/>in<sp/>&quot;BLECustomConfig.h&quot;<sp/>and</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/><sp/>implement<sp/>these<sp/>functions<sp/>in<sp/>the<sp/>application<sp/>code,<sp/>it<sp/>may<sp/>save<sp/>ROM<sp/>memory.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/><sp/>a1:<sp/>Pointer<sp/>to<sp/>the<sp/>first<sp/>address</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/><sp/>a2:<sp/>Pointer<sp/>to<sp/>the<sp/>second<sp/>address</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/><sp/>n:<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>compare</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>return<sp/><sp/>0<sp/>if<sp/>the<sp/>n<sp/>bytes<sp/>are<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>positive<sp/>value<sp/>if<sp/>the<sp/>n<sp/>bytes<sp/>are<sp/>different</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref><sp/><ref refid="_ble_system_8h_1a90cb362bfcbc0199a48eeb02b9351fa5" kindref="member">SYSTEM_MemCmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a2,<sp/><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref><sp/>n);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>n<sp/>bytes<sp/>between<sp/>from<sp/>a<sp/>given<sp/>address<sp/>to<sp/>a<sp/>given<sp/>value.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>SYSTEM_MemSet()</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>function<sp/>set<sp/>n<sp/>bytes<sp/>between<sp/>from<sp/>a<sp/>given<sp/>address<sp/>(addr)<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/><sp/>given<sp/>value<sp/>(value).</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>stack<sp/>uses<sp/>for<sp/>this<sp/>function<sp/>its<sp/>internal<sp/>function<sp/>definition<sp/>if</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>is<sp/>set<sp/>to<sp/>1</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/>If<sp/>the<sp/>system<sp/>has<sp/>already<sp/>this<sp/>kind<sp/>of<sp/>mechanism<sp/>set<sp/></highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/>BLE_USE_INTERNAL_MEMORY_FUNCTIONS<sp/>to<sp/>0<sp/>in<sp/>&quot;BLECustomConfig.h&quot;<sp/>and</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/><sp/>implement<sp/>these<sp/>functions<sp/>in<sp/>the<sp/>application<sp/>code,<sp/>it<sp/>may<sp/>save<sp/>ROM<sp/>memory.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/><sp/>addr:<sp/>Pointer<sp/>to<sp/>the<sp/>address</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/><sp/>value:<sp/>value<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/><sp/>n:<sp/>number<sp/>of<sp/>bytes<sp/>to<sp/>set</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*<sp/>return<sp/><sp/>addr<sp/>is<sp/>returned</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="_ble_system_8h_1aa9c4a8698d1a617177723438e73e7c4c" kindref="member">SYSTEM_MemSet</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*addr,<sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><ref refid="_b_l_e_s_w___cycling_power_01_release_notes_8txt_1a5cad1470ef119e32b6400227eeaa8b18" kindref="member">value</ref>,<sp/><ref refid="_ble_types_8h_1adf928e51a60dba0df29d615401cc55a8" kindref="member">U16</ref><sp/>n);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*<sp/>Timer<sp/>Operation</highlight></codeline>
<codeline lineno="226"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>stack<sp/>request<sp/>a<sp/>timer<sp/>creation</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>SYSTEM_TimerCreate()</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>needs<sp/>one<sp/>timer<sp/>in<sp/>order<sp/>to<sp/>calculate<sp/>time-out<sp/>or<sp/>watchdog.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/><sp/>It<sp/>uses<sp/>this<sp/>function<sp/>to<sp/>create<sp/>the<sp/>timer;<sp/>timers<sp/>are<sp/>internally</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/>multiplexed,<sp/>so<sp/>it<sp/>needs<sp/>only<sp/>one.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_TimerCancel()<sp/>,<sp/>SYSTEM_TimerGetRemain()</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/><sp/>func<sp/>:<sp/>pointer<sp/>to<sp/>a<sp/>function<sp/>to<sp/>call<sp/>when<sp/>the<sp/>timer<sp/>expires</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/><sp/>param<sp/>:<sp/>parameter<sp/>to<sp/>pass<sp/>in<sp/>func<sp/>when<sp/>the<sp/>timer<sp/>expire</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/><sp/>millisecond<sp/>:<sp/>time<sp/>to<sp/>wait<sp/>before<sp/>the<sp/>timer<sp/>expiration</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1ae5b2f31ab4cf42b40a157ccf94048519" kindref="member">SYSTEM_CreateTimer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*func,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*param,<sp/><ref refid="_ble_types_8h_1a811024d35b9b8a41095b1f583b649e56" kindref="member">U32</ref><sp/>millisecond);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>stack<sp/>request<sp/>its<sp/>timer<sp/>destruction</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>SYSTEM_CancelTimer()</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>no<sp/>more<sp/>needs<sp/>timer.<sp/>It<sp/>requests<sp/>destruction<sp/>of<sp/>the<sp/>timer</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>created<sp/>with<sp/>SYSTEM_CreateTimer().</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_CreateTimer()<sp/>,<sp/>SYSTEM_TimerGetRemain()</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*<sp/>return<sp/>none</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1aea03852267e73019391033c4afc10b36" kindref="member">SYSTEM_CancelTimer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>stack<sp/>request<sp/>the<sp/>timer<sp/>remaining<sp/>time</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>SYSTEM_TimerGetRemain()</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>need<sp/>the<sp/>remaining<sp/>time<sp/>of<sp/>the<sp/>timer<sp/>created<sp/>by</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/><sp/>SYSTEM_CreateTimer()<sp/>in<sp/>order<sp/>to<sp/>do<sp/>some<sp/>internal<sp/>things</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>see<sp/>SYSTEM_CreateTimer()<sp/>,<sp/>SYSTEM_CancelTimer()</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>return<sp/>the<sp/>time<sp/>remaining<sp/>in<sp/>millisecond.</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><ref refid="_ble_types_8h_1a811024d35b9b8a41095b1f583b649e56" kindref="member">U32</ref><sp/><ref refid="_ble_system_8h_1a65372745d14128ffbb349918c446cc6a" kindref="member">SYSTEM_TimerGetRemain</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>Security<sp/>Operation<sp/>/<sp/>PERSITENT<sp/>memory<sp/>Handling</highlight></codeline>
<codeline lineno="272"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_SECURITY<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="_ble_system_8h_1aa265c638d4c8cc9dec437459ea8c929f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_MLTK16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x01<sp/><sp/><sp/><sp/>//<sp/>a<sp/>16<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="_ble_system_8h_1aa3b769dc27eae3bb0b17502376524d1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_SLTK16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x02<sp/><sp/><sp/><sp/>//<sp/>a<sp/>16<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="_ble_system_8h_1addf3385575a42ca76022cfde9fc4abdd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_MDIV2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x03<sp/><sp/><sp/><sp/>//<sp/>a<sp/>2<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="_ble_system_8h_1ab7f7ab77c29cba8f6e1fd3bac9302d3c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_MRAND8<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x04<sp/><sp/><sp/><sp/>//<sp/>a<sp/>8<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="_ble_system_8h_1af382a1abd1aeee61157bbc31ade69f04" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_MPROP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x05<sp/><sp/><sp/><sp/>//<sp/>a<sp/>single<sp/>Byte<sp/>length<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="_ble_system_8h_1a7f3331de97d67e2d808808453be90888" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_SPROP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x06<sp/><sp/><sp/><sp/>//<sp/>a<sp/>single<sp/>Byte<sp/>length<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="_ble_system_8h_1ab2bf931538ee2b42b85997e6b0398d33" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_REMOTE_IRK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x07<sp/><sp/><sp/><sp/>//<sp/>a<sp/>16<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>BLEINFOTYPE_LOCAL_IRK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08<sp/><sp/><sp/><sp/>//<sp/>a<sp/>16<sp/>Bytes<sp/>length<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="_ble_system_8h_1af401de9db19b1d60308d5f5f31ae0834" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_ATTHANDLESCHANGED<sp/><sp/><sp/>0x11<sp/><sp/><sp/><sp/>//<sp/>a<sp/>single<sp/>Byte<sp/>length<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="_ble_system_8h_1a15dbec6d595887d7068ae76f8f8a8734" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLEINFOTYPE_SERVICECHANGECONFIG<sp/>0x12<sp/><sp/><sp/><sp/>//<sp/>a<sp/>single<sp/>Byte<sp/>length<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref><sp/><ref refid="_ble_system_8h_1aff6291e2141c9a5687e38e1d4dd344ff" kindref="member">SYSTEM_SetPersistentInformation</ref>(</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref><sp/><sp/><sp/><sp/><sp/>*addr,<sp/></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoType,<sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*infoValue,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoLen);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref><sp/><ref refid="_ble_system_8h_1af1e3460f35fb11532ea4fcffd8791e5e" kindref="member">SYSTEM_GetPersistentInformation</ref>(</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref><sp/><sp/><sp/><sp/><sp/>*addr,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoType,<sp/></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**infoValue,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*infoLen);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="_ble_types_8h_1a51b22dff1300b8e07a6aa1acf7d24734" kindref="member">BleStatus</ref><sp/><ref refid="_ble_system_8h_1a0f7e4888692ae30ad5ddeab0c7918eec" kindref="member">SYSTEM_RemovePersistentInformation</ref>(</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref><sp/>*addr,<sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/>infoTypeFrom,<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/>infoTypeTo);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_SM_SLAVE_RESOLVE_MASTER_RANDOM_ADDRESS<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1afd05ecabb128333c50c37c9c4f416f48" kindref="member">SYSTEM_GetNumberOfDevicesInPersistentMemory</ref>(<ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/>*numberOfDevices);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1a593377cb318b65edfa2183e693847d2f" kindref="member">SYSTEM_GetDeviceAddressAtIndexInPersistentMemory</ref>(</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref><sp/><sp/><sp/><sp/><sp/>**addr);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_ble_system_8h_1aa0c18e6976101284b8a71121c6c6b15e" kindref="member">SYSTEM_UpdateDeviceAddressAtIndexInPersistentMemory</ref>(</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_ble_types_8h_1a3cb25ca6f51f003950f9625ff05536fc" kindref="member">U8</ref><sp/><sp/><sp/><sp/><sp/><sp/>index,<sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_b_d___a_d_d_r" kindref="compound">BD_ADDR</ref><sp/>*to);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_SM_SLAVE_RESOLVE_MASTER_RANDOM_ADDRESS<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_SECURITY<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************\</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>debug<sp/>Traces<sp/>Operation</highlight></codeline>
<codeline lineno="444"><highlight class="comment">\***************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(BLE_PRINT_DEBUG_TRACES<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>stack<sp/>request<sp/>the<sp/>system<sp/>to<sp/>print<sp/>some<sp/>Debug<sp/>Traces</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>SYSTEM_Log()</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/><sp/>The<sp/>BLE<sp/>stack<sp/>have<sp/>some<sp/>debug<sp/>information<sp/>to<sp/>print.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/><sp/>BLE_PRINT_DEBUG_TRACES<sp/>shall<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/>*<sp/><sp/>format:<sp/>a<sp/>list<sp/>of<sp/>printable<sp/>arguments</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>operation</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SYSTEM_Log(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,...);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//(BLE_PRINT_DEBUG_TRACES<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*__BLESYSTEM_H*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/BLEStack/3rd-party/Alpwise/ALPW-BLESDKCM3/BLESW_CoreStack/Interfaces/BleSystem.h"/>
  </compounddef>
</doxygen>
