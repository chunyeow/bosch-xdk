<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___log_8h" kind="file">
    <compoundname>Serval_Log.h</compoundname>
    <includes refid="_serval___types_8h" local="no">Serval_Types.h</includes>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___exceptions_8h" local="no">Serval_Exceptions.h</includes>
    <includedby refid="_l_w_m2_m_util_8c" local="yes">SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MUtil.c</includedby>
    <includedby refid="_serval___resources_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</includedby>
    <incdepgraph>
      <node id="30584">
        <label>stdbool.h</label>
      </node>
      <node id="30577">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="30578" relation="include">
        </childnode>
        <childnode refid="30618" relation="include">
        </childnode>
      </node>
      <node id="30588">
        <label>stdarg.h</label>
      </node>
      <node id="30615">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30600">
        <label>list.h</label>
      </node>
      <node id="30602">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="30603" relation="include">
        </childnode>
        <childnode refid="30582" relation="include">
        </childnode>
        <childnode refid="30581" relation="include">
        </childnode>
      </node>
      <node id="30580">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="30581" relation="include">
        </childnode>
      </node>
      <node id="30583">
        <label>stdint.h</label>
      </node>
      <node id="30581">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="30582" relation="include">
        </childnode>
      </node>
      <node id="30586">
        <label>stdlib.h</label>
      </node>
      <node id="30618">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="30576">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h</label>
        <link refid="Serval_Log.h"/>
        <childnode refid="30577" relation="include">
        </childnode>
        <childnode refid="30619" relation="include">
        </childnode>
        <childnode refid="30618" relation="include">
        </childnode>
      </node>
      <node id="30594">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="30597">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="30598" relation="include">
        </childnode>
      </node>
      <node id="30605">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="30607">
        <label>user.h</label>
      </node>
      <node id="30601">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="30581" relation="include">
        </childnode>
        <childnode refid="30602" relation="include">
        </childnode>
        <childnode refid="30605" relation="include">
        </childnode>
      </node>
      <node id="30608">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30592">
        <label>stddef.h</label>
      </node>
      <node id="30610">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30590">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="30591" relation="include">
        </childnode>
        <childnode refid="30593" relation="include">
        </childnode>
        <childnode refid="30597" relation="include">
        </childnode>
        <childnode refid="30599" relation="include">
        </childnode>
      </node>
      <node id="30579">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="30580" relation="include">
        </childnode>
        <childnode refid="30582" relation="include">
        </childnode>
        <childnode refid="30587" relation="include">
        </childnode>
        <childnode refid="30588" relation="include">
        </childnode>
        <childnode refid="30589" relation="include">
        </childnode>
        <childnode refid="30586" relation="include">
        </childnode>
        <childnode refid="30577" relation="include">
        </childnode>
        <childnode refid="30590" relation="include">
        </childnode>
        <childnode refid="30601" relation="include">
        </childnode>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30587">
        <label>limits.h</label>
      </node>
      <node id="30596">
        <label>portable.h</label>
      </node>
      <node id="30604">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="30585">
        <label>string.h</label>
      </node>
      <node id="30603">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="30604" relation="include">
        </childnode>
        <childnode refid="30581" relation="include">
        </childnode>
      </node>
      <node id="30582">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="30583" relation="include">
        </childnode>
        <childnode refid="30584" relation="include">
        </childnode>
        <childnode refid="30585" relation="include">
        </childnode>
        <childnode refid="30586" relation="include">
        </childnode>
      </node>
      <node id="30595">
        <label>projdefs.h</label>
      </node>
      <node id="30617">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="30616">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30619">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="30612">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30598">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="30613">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30611">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30599">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="30600" relation="include">
        </childnode>
      </node>
      <node id="30614">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30593">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="30583" relation="include">
        </childnode>
        <childnode refid="30580" relation="include">
        </childnode>
        <childnode refid="30594" relation="include">
        </childnode>
      </node>
      <node id="30578">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="30579" relation="include">
        </childnode>
      </node>
      <node id="30591">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="30592" relation="include">
        </childnode>
        <childnode refid="30583" relation="include">
        </childnode>
        <childnode refid="30593" relation="include">
        </childnode>
        <childnode refid="30595" relation="include">
        </childnode>
        <childnode refid="30596" relation="include">
        </childnode>
      </node>
      <node id="30589">
        <label>stdio.h</label>
      </node>
      <node id="30609">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="30606" relation="include">
        </childnode>
      </node>
      <node id="30606">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="30607" relation="include">
        </childnode>
        <childnode refid="30608" relation="include">
        </childnode>
        <childnode refid="30609" relation="include">
        </childnode>
        <childnode refid="30610" relation="include">
        </childnode>
        <childnode refid="30611" relation="include">
        </childnode>
        <childnode refid="30612" relation="include">
        </childnode>
        <childnode refid="30613" relation="include">
        </childnode>
        <childnode refid="30614" relation="include">
        </childnode>
        <childnode refid="30615" relation="include">
        </childnode>
        <childnode refid="30616" relation="include">
        </childnode>
        <childnode refid="30617" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="30622">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</label>
        <link refid="_serval___resources_8h"/>
      </node>
      <node id="30620">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h</label>
        <link refid="Serval_Log.h"/>
        <childnode refid="30621" relation="include">
        </childnode>
        <childnode refid="30622" relation="include">
        </childnode>
      </node>
      <node id="30621">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MUtil.c</label>
        <link refid="_l_w_m2_m_util_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_log_appender___s" prot="public">LogAppender_S</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___log_8h_1a754b3d074e0af4ad3c7b918dd77ecb2d" prot="public" static="no">
        <name>LOG_DEBUG</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="346" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1acecf832f227b6de313e11bfed0bef15b" prot="public" static="no">
        <name>LOG_DEBUG_LEN</name>
        <param><defname>ptr</defname></param>
        <param><defname>len</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="347" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ad4a9117ce894e3319e903142347a0f63" prot="public" static="no">
        <name>LOG_ERROR</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="_serval___log_8h_1a09a888a2ffb7aefa711dbf6f08231702" kindref="member">Log_flog</ref>(<ref refid="_serval___log_8h_1aae8d610fbe1dd4bf2f9b05f591761cbf" kindref="member">SERVAL_LOG_LEVEL_ERROR</ref>,   <ref refid="_mbed_t_l_s___dtls_server_8c_1ae09c5092507af45ad9aea45891dcbcad" kindref="member">LOG_MODULE</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="377" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="377" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ac94f98050ecfa983d8040c732c6593d1" prot="public" static="no">
        <name>LOG_ERROR_LEN</name>
        <param><defname>ptr</defname></param>
        <param><defname>len</defname></param>
        <initializer><ref refid="_serval___log_8h_1a9fe71e5ebd71ebc29cd2a42a9f59465b" kindref="member">Log_log</ref>(<ref refid="_serval___log_8h_1aae8d610fbe1dd4bf2f9b05f591761cbf" kindref="member">SERVAL_LOG_LEVEL_ERROR</ref>,  <ref refid="_mbed_t_l_s___dtls_server_8c_1ae09c5092507af45ad9aea45891dcbcad" kindref="member">LOG_MODULE</ref>, ptr, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="379" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="379" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a89cecd05aeaafc715ebc091cf74d10fe" prot="public" static="no">
        <name>LOG_FATAL</name>
        <param><defname>...</defname></param>
        <initializer><ref refid="_serval___log_8h_1a09a888a2ffb7aefa711dbf6f08231702" kindref="member">Log_flog</ref>(<ref refid="_serval___log_8h_1a610f66c8e3408d1ad3571558f2987745" kindref="member">SERVAL_LOG_LEVEL_FATAL</ref>,   <ref refid="_mbed_t_l_s___dtls_server_8c_1ae09c5092507af45ad9aea45891dcbcad" kindref="member">LOG_MODULE</ref>, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="390" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a5307277145bf05c5cc5684512fcd16b6" prot="public" static="no">
        <name>LOG_FATAL_LEN</name>
        <param><defname>ptr</defname></param>
        <param><defname>len</defname></param>
        <initializer><ref refid="_serval___log_8h_1a9fe71e5ebd71ebc29cd2a42a9f59465b" kindref="member">Log_log</ref>(<ref refid="_serval___log_8h_1a610f66c8e3408d1ad3571558f2987745" kindref="member">SERVAL_LOG_LEVEL_FATAL</ref>,  <ref refid="_mbed_t_l_s___dtls_server_8c_1ae09c5092507af45ad9aea45891dcbcad" kindref="member">LOG_MODULE</ref>, ptr, len)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="392" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a378e28bfcb78d17285210d6bbb70a083" prot="public" static="no">
        <name>LOG_INFO</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="358" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ae1ef3f44629957c0d6a04bc40e66cda3" prot="public" static="no">
        <name>LOG_INFO_LEN</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="359" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a95e9c9c663dff25ae81d4043c66e34a4" prot="public" static="no">
        <name>LOG_TIMING</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="405" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" prot="public" static="no">
        <name>LOG_TRACE</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="334" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a4944d53b6b77043b385bc7d46e7bb31b" prot="public" static="no">
        <name>LOG_TRACE_ENTER</name>
        <param></param>
        <initializer><ref refid="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" kindref="member">LOG_TRACE</ref>(&quot;&gt;&gt; %s()\n&quot;, __FUNCTION__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="408" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a134c565ebc72d81c353e6fb99a37e467" prot="public" static="no">
        <name>LOG_TRACE_ENTER_ARGS</name>
        <param><defname>x</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" kindref="member">LOG_TRACE</ref>(&quot;&gt;&gt; %s(&quot; x &quot;)\n&quot;, __FUNCTION__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="410" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1add5e4eccbb4a3380164d2674d5b8bdb0" prot="public" static="no">
        <name>LOG_TRACE_EXIT</name>
        <param></param>
        <initializer><ref refid="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" kindref="member">LOG_TRACE</ref>(&quot;&lt;&lt; %s()\n&quot;, __FUNCTION__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="412" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a0e33c640463b4d856dc46716c2cf15e4" prot="public" static="no">
        <name>LOG_TRACE_EXIT_RETURN</name>
        <param><defname>x</defname></param>
        <param><defname>...</defname></param>
        <initializer><ref refid="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" kindref="member">LOG_TRACE</ref>(&quot;&lt;&lt; %s() = &quot; x &quot;\n&quot;, __FUNCTION__, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="414" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ae60911bf79f99222618b00225d13036a" prot="public" static="no">
        <name>LOG_TRACE_LEN</name>
        <param><defname>ptr</defname></param>
        <param><defname>len</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="335" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1afef5ff03ea272d388345cf47148953d4" prot="public" static="no">
        <name>LOG_WARNING</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="370" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ab9ed6a54e55d32421504e5e7c1c7a262" prot="public" static="no">
        <name>LOG_WARNING_LEN</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="371" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1aa5b6caa92e25a63742e2395140b63e8b" prot="public" static="no">
        <name>SERVAL_ENABLE_NETWORK_LOG</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the logging level has been defined before, then we set it to SERVAL_LOG_LEVEL_INFO as a default logging level.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF Enable &apos;&apos;SERVAL_ENABLE_NETWORK_LOG&apos;&apos; in order to enable the logging over UDP </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="117" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ac462358ecf0027d96b9e307111e3652c" prot="public" static="no">
        <name>SERVAL_LOG_HEADER_LENGTH</name>
        <initializer>19</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Total length of the log header </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="137" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ac9232cd978069c55a1d1089b93aa7be9" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_DEBUG</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level DEBUG: Detailed information on the flow through the system. Expect these to be written to logs only.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="88" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1aae8d610fbe1dd4bf2f9b05f591761cbf" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_ERROR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level ERROR: Other runtime errors or unexpected conditions. Expect these to be immediately visible on a status console.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="56" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a610f66c8e3408d1ad3571558f2987745" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_FATAL</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level FATAL: Severe errors that cause premature termination. Expect these to be immediately visible on a status console.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="47" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1af98d995be2de9cfd20ed60b36d3de5bc" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_INFO</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level INFO: Interesting runtime events (startup/shutdown). Expect these to be immediately visible on a console, so be conservative and keep to a minimum.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="78" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a2e11812e9b3a5e2531ccde7f95ffdde4" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_OFF</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level OFF: Disables logging completely.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="38" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a98b83dff57ceaa36bab15694eacba050" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_TRACE</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level TRACE: More detailed information. Expect these to be written to logs only.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="97" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a6b2243c8412333abf03b2686637e8202" prot="public" static="no">
        <name>SERVAL_LOG_LEVEL_WARN</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Logging level WARN: Use of deprecated APIs, poor use of API, &apos;almost&apos; errors, other runtime situations that are undesirable or unexpected, but not necessarily &quot;wrong&quot;. Expect these to be immediately visCoapMessaging_getMessageTokenCOAPible on a status console.</para><para>NOTE: Available logging levels are: TRACE &gt; DEBUG &gt; INFO &gt; WARN &gt; ERROR &gt; FATAL &gt; OFF </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="67" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a17b24017adc3957f3d370bff9d77b024" prot="public" static="no">
        <name>SERVAL_LOG_MAX_LEN_MODULE_NAME</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>allowed length of a module name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="131" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1ab0e235cb68d5277af2626896c25749ec" prot="public" static="no">
        <name>SERVAL_LOG_MAX_LEN_TEXT</name>
        <initializer>300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maximum logtext length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="140" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a58c5f7f825600923329d14b0fdcbb64e" prot="public" static="no">
        <name>SERVAL_LOG_MAX_LEN_TIMESTAMP</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>length of a log timestamp </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="134" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___log_8h_1a891966fc550e4aab55b9adf1fff08158" prot="public" static="no">
        <name>SERVAL_UDP_LOG_DIRECT_SEND</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable &apos;&apos;SERVAL_UDP_LOG_DIRECT_SEND&apos;&apos; in order to enable that each log message is sent directly via udp. Disabled means that several log messages are collected until 5% of &apos;&apos;SERVAL_MAX_SIZE_APP_PACKET&apos;&apos; is reached. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="126" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___log_8h_1a1af8e8aad9150d7c2c482624bf703d48" prot="public" static="no">
        <type>struct <ref refid="struct_log_appender___s" kindref="compound">LogAppender_S</ref></type>
        <definition>typedef struct LogAppender_S  LogAppender_T</definition>
        <argsstring></argsstring>
        <name>LogAppender_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This type defines the attributes of an log appender. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___log_8h_1aec71c32d5d7561a48d41bfaeb0f44c20" prot="public" static="no">
        <type>int</type>
        <definition>typedef int LogLevel_T</definition>
        <argsstring></argsstring>
        <name>LogLevel_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="142" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___log_8h_1a6d4edf8782a0b28464121d8d6b3d2102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Log_disable</definition>
        <argsstring>(LogAppender_T *appender_ptr)</argsstring>
        <name>Log_disable</name>
        <param>
          <type><ref refid="struct_log_appender___t" kindref="compound">LogAppender_T</ref> *</type>
          <declname>appender_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables the given appender for logging.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">appender_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the appender to disable. It must be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___log_8h_1a0de24960e868434829cdea340f5de8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Log_enable</definition>
        <argsstring>(LogAppender_T *appender_ptr)</argsstring>
        <name>Log_enable</name>
        <param>
          <type><ref refid="struct_log_appender___t" kindref="compound">LogAppender_T</ref> *</type>
          <declname>appender_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables the given appender for logging.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">appender_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the appender to enable. It must be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___log_8h_1a09a888a2ffb7aefa711dbf6f08231702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Log_flog</definition>
        <argsstring>(LogLevel_T lvl, const char *module_name, const char *text_ptr,...)</argsstring>
        <name>Log_flog</name>
        <param>
          <type><ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref></type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text_ptr</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to log a message.</para><para>Depending on the parameter lvl and configured log level, a message will be logged to all enabled appenders.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of log level of message to be logged.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module which requested the logging, this will be added to log header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">text_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to be logged</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">...</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional information for creation of log message.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>loglevel_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___log_8h_1afd23ea8037a17d893d3050ed6ba3a30c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Log_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>Log_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to initialize logging. It sets the default logging level to the maximal allowed level, i.e., SERVAL_LOG_LEVEL.</para><para><simplesect kind="return"><para>RC_OK<linebreak/>
 RC_LOG_INIT_ERROR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___log_8h_1a9fe71e5ebd71ebc29cd2a42a9f59465b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Log_log</definition>
        <argsstring>(LogLevel_T lvl, const char *module_name, const char *text_ptr, int len)</argsstring>
        <name>Log_log</name>
        <param>
          <type><ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref></type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>module_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to log a message.</para><para>Depending on the parameter lvl and configured log level, a message will be logged to all enabled appenders.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of log level of message to be logged.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">module_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of module which requested the logging, this will be added to log header.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">text_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to be logged</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of message to be logged.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>loglevel_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___log_8h_1a88129e72a49d6d48fcc21a122868b827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Log_setLogLevel</definition>
        <argsstring>(LogLevel_T lvl)</argsstring>
        <name>Log_setLogLevel</name>
        <param>
          <type><ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref></type>
          <declname>lvl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the log level. The following levels are supported: SERVAL_LOG_LEVEL_OFF<linebreak/>
 SERVAL_LOG_LEVEL_FATAL<linebreak/>
 SERVAL_LOG_LEVEL_ERROR<linebreak/>
 SERVAL_LOG_LEVEL_WARNING<linebreak/>
 SERVAL_LOG_LEVEL_INFO<linebreak/>
 SERVAL_LOG_LEVEL_DEBUG<linebreak/>
 SERVAL_LOG_LEVEL_TRACE<linebreak/>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lvl</parametername>
</parameternamelist>
<parameterdescription>
<para>Loglevel to set</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success<linebreak/>
 RC_LOG_LEVEL_NOT_SUPPORTED Log level is higher than SERVAL_LOG_LEVEL, which indicates the maximal log level at build time. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h" line="243" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logging Module</para><para>This module provides function to handle the logging. The logging can be done via UART or UDP/IP. The logging can be done in different modes (e.g. debugging). </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor">#ifndef<sp/>SERVAL_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_LOG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___exceptions_8h" kindref="compound">Serval_Exceptions.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="_serval___log_8h_1a2e11812e9b3a5e2531ccde7f95ffdde4" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_OFF<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="_serval___log_8h_1a610f66c8e3408d1ad3571558f2987745" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_FATAL<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="_serval___log_8h_1aae8d610fbe1dd4bf2f9b05f591761cbf" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_ERROR<sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="_serval___log_8h_1a6b2243c8412333abf03b2686637e8202" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_WARN<sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="_serval___log_8h_1af98d995be2de9cfd20ed60b36d3de5bc" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_INFO<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="_serval___log_8h_1ac9232cd978069c55a1d1089b93aa7be9" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_DEBUG<sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="_serval___log_8h_1a98b83dff57ceaa36bab15694eacba050" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL_TRACE<sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">#ifndef<sp/>SERVAL_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL<sp/><sp/><sp/><sp/>SERVAL_LOG_LEVEL_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor">#ifndef<sp/>SERVAL_ENABLE_NETWORK_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="_serval___log_8h_1aa5b6caa92e25a63742e2395140b63e8b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_NETWORK_LOG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor">#ifndef<sp/>SERVAL_UDP_LOG_DIRECT_SEND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="_serval___log_8h_1a891966fc550e4aab55b9adf1fff08158" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_UDP_LOG_DIRECT_SEND<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="_serval___log_8h_1a17b24017adc3957f3d370bff9d77b024" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_MAX_LEN_MODULE_NAME<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="_serval___log_8h_1a58c5f7f825600923329d14b0fdcbb64e" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_MAX_LEN_TIMESTAMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="_serval___log_8h_1ac462358ecf0027d96b9e307111e3652c" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_HEADER_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="_serval___log_8h_1ab0e235cb68d5277af2626896c25749ec" refkind="member"><highlight class="preprocessor">#define<sp/>SERVAL_LOG_MAX_LEN_TEXT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>300</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="_serval___log_8h_1aec71c32d5d7561a48d41bfaeb0f44c20" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___log_8h_1aec71c32d5d7561a48d41bfaeb0f44c20" kindref="member">LogLevel_T</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_PAL_LOG_CONSTRUCTION<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Log_constructLogHeader(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/><ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref><sp/>lvl,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_log_appender___s" kindref="compound">LogAppender_S</ref></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*vlog)(<ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref><sp/>lvl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*format,<sp/><ref refid="group___l_o_g_g_i_n_g_1gaf53f622e3b6c080daeb167c1955d7ec1" kindref="member">va_list</ref><sp/>argptr);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="struct_log_appender___s_1a219c615b86400d7d6da2578507030412" kindref="member">writeLen</ref>)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_log_appender___s" kindref="compound">LogAppender_S</ref><sp/>*<ref refid="struct_log_appender___s_1a256ce2b1853ac1e832fe9e9e067677d3" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DUTY_CYCLING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>(*<ref refid="struct_log_appender___s_1ac4cff57a709f3767add69f2393e1f5ab" kindref="member">sleep</ref>)(void);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><ref refid="_serval___log_8h_1a1af8e8aad9150d7c2c482624bf703d48" kindref="member">LogAppender_T</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="struct_log_appender___s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_log_appender___s" kindref="compound">LogAppender_S</ref></highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179" refid="struct_log_appender___s_1a1cb96f9a46a5addcf02dccfc5705ff86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="struct_log_appender___s_1a1cb96f9a46a5addcf02dccfc5705ff86" kindref="member">write</ref>)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="181" refid="struct_log_appender___s_1a219c615b86400d7d6da2578507030412" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*<ref refid="struct_log_appender___s_1a219c615b86400d7d6da2578507030412" kindref="member">writeLen</ref>)(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);</highlight></codeline>
<codeline lineno="182" refid="struct_log_appender___s_1a256ce2b1853ac1e832fe9e9e067677d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_log_appender___s" kindref="compound">LogAppender_S</ref><sp/>*<ref refid="struct_log_appender___s_1a256ce2b1853ac1e832fe9e9e067677d3" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DUTY_CYCLING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="struct_log_appender___s_1ac4cff57a709f3767add69f2393e1f5ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>(*<ref refid="struct_log_appender___s_1ac4cff57a709f3767add69f2393e1f5ab" kindref="member">sleep</ref>)(void);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}<sp/><ref refid="_serval___log_8h_1a1af8e8aad9150d7c2c482624bf703d48" kindref="member">LogAppender_T</ref>;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___log_8h_1afd23ea8037a17d893d3050ed6ba3a30c" kindref="member">Log_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___log_8h_1a0de24960e868434829cdea340f5de8a7" kindref="member">Log_enable</ref>(<ref refid="struct_log_appender___t" kindref="compound">LogAppender_T</ref><sp/>*appender_ptr);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___log_8h_1a6d4edf8782a0b28464121d8d6b3d2102" kindref="member">Log_disable</ref>(<ref refid="struct_log_appender___t" kindref="compound">LogAppender_T</ref><sp/>*appender_ptr);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_NETWORK_LOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___ip_8h" kindref="compound">Serval_Ip.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Log_enableUdpLogAppender(</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*destIp,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>destPort);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Log_disableUdpLogAppender(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___log_8h_1a88129e72a49d6d48fcc21a122868b827" kindref="member">Log_setLogLevel</ref>(<ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref><sp/>lvl);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___log_8h_1a09a888a2ffb7aefa711dbf6f08231702" kindref="member">Log_flog</ref>(<ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref><sp/>lvl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text_ptr,<sp/>...);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="_serval___log_8h_1a9fe71e5ebd71ebc29cd2a42a9f59465b" kindref="member">Log_log</ref>(<ref refid="group___l_o_g_g_i_n_g_1gac0c3f7506fe56f3078d92a3838c01f60" kindref="member">LogLevel_T</ref><sp/>lvl,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*module_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>SERVAL_COMPONENT<sp/>is<sp/>defined<sp/>for<sp/>a<sp/>module,<sp/>use<sp/>the<sp/>new<sp/>logging<sp/>definition.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>This<sp/>allows<sp/>a<sp/>finer<sp/>grained<sp/>debugging.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>Thus,<sp/>if<sp/>SERVAL_COMPONENT<sp/>is<sp/>COAP,<sp/>then<sp/>the<sp/>log<sp/>level<sp/>for<sp/>this<sp/>component</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>can<sp/>be<sp/>tweaked<sp/>by<sp/>setting<sp/>SERVAL_COMPONENT_COAP_LOG_LEVEL=.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SERVAL_COMPONENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Various<sp/>helper<sp/>functions<sp/>since<sp/>programming<sp/>with<sp/>the<sp/>preprocessor<sp/>is<sp/>really<sp/>broken<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_0<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_1<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_2<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_3<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_4<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_5<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_HAS_LEVEL_6<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_STRINGIFY(x)<sp/>#x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_TOKENPASTE(x,y,z)<sp/>x<sp/>##<sp/>y<sp/>##<sp/>z</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_CHECK(x)<sp/>__SERVAL_LOG_TOKENPASTE(__SERVAL_LOG_,HAS_LEVEL_,x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_LEVEL_FCT(component)<sp/><sp/><sp/><sp/><sp/><sp/>__SERVAL_LOG_TOKENPASTE(SERVAL_COMPONENT_,<sp/>component,<sp/>_LOG_LEVEL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_MODULE_STRING_FCT(module)<sp/>__SERVAL_LOG_STRINGIFY(module)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LOG_MODULE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_MODULE<sp/>__SERVAL_LOG_MODULE_STRING_FCT(SERVAL_COMPONENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SERVAL_LOG_LEVEL<sp/>__SERVAL_LOG_LEVEL_FCT(SERVAL_COMPONENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__SERVAL_LOG_CHECK(__SERVAL_LOG_LEVEL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SERVAL_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_LOG_LEVEL<sp/>__SERVAL_LOG_LEVEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_COMPONENT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_TRACE<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_TRACE<sp/>and</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>LOG_TRACE_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_TRACE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE(...)<sp/>\</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_TRACE,<sp/><sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_TRACE,<sp/><sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="_serval___log_8h_1a58c994180e09d2f6400133b19b1d7036" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="_serval___log_8h_1ae60911bf79f99222618b00225d13036a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_LEN(ptr,len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_DEBUG<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_DEBUG<sp/>and</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>LOG_DEBUG_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DEBUG(...)<sp/>\</highlight></codeline>
<codeline lineno="342"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_DEBUG,<sp/><sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DEBUG_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_DEBUG,<sp/><sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_serval___log_8h_1a754b3d074e0af4ad3c7b918dd77ecb2d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DEBUG(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="_serval___log_8h_1acecf832f227b6de313e11bfed0bef15b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_DEBUG_LEN(ptr,len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_INFO<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_INFO<sp/>and</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>LOG_INFO_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_INFO)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO(...)<sp/>\</highlight></codeline>
<codeline lineno="354"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_INFO,<sp/><sp/><sp/><sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="356"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_INFO,<sp/><sp/><sp/><sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="_serval___log_8h_1a378e28bfcb78d17285210d6bbb70a083" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="_serval___log_8h_1ae1ef3f44629957c0d6a04bc40e66cda3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_INFO_LEN(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_WARN<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_WARNING<sp/>and</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>LOG_WARNING_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_WARN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WARNING(...)<sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_WARN,<sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WARNING_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_WARN,<sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="_serval___log_8h_1afef5ff03ea272d388345cf47148953d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WARNING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="_serval___log_8h_1ab9ed6a54e55d32421504e5e7c1c7a262" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_WARNING_LEN(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_ERROR<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_ERROR<sp/>and</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>LOG_ERROR_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_ERROR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="_serval___log_8h_1ad4a9117ce894e3319e903142347a0f63" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR(...)<sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_ERROR,<sp/><sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="_serval___log_8h_1ac94f98050ecfa983d8040c732c6593d1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_ERROR,<sp/><sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_ERROR_LEN(ptr,len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>LOG_LEVEL_FATAL<sp/>is<sp/>enabled,<sp/>then<sp/>allow<sp/>the<sp/>use<sp/>of<sp/>LOG_FATAL<sp/>and</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/>LOG_FATAL_LEN<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(SERVAL_LOG_LEVEL<sp/>&gt;=<sp/>SERVAL_LOG_LEVEL_FATAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="_serval___log_8h_1a89cecd05aeaafc715ebc091cf74d10fe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FATAL(...)<sp/>\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_FATAL,<sp/><sp/><sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="_serval___log_8h_1a5307277145bf05c5cc5684512fcd16b6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FATAL_LEN(ptr,len)<sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Log_log(SERVAL_LOG_LEVEL_FATAL,<sp/><sp/>LOG_MODULE,<sp/>ptr,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FATAL(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FATAL_LEN(ptr,len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Enable<sp/>to<sp/>use<sp/>LOG_TIMING<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_PROFILING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TIMING(...)<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>Log_flog(SERVAL_LOG_LEVEL_OFF,<sp/>LOG_MODULE,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="_serval___log_8h_1a95e9c9c663dff25ae81d4043c66e34a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TIMING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="_serval___log_8h_1a4944d53b6b77043b385bc7d46e7bb31b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_ENTER()<sp/>\</highlight></codeline>
<codeline lineno="409"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_TRACE(&quot;&gt;&gt;<sp/>%s()\n&quot;,<sp/>__FUNCTION__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="_serval___log_8h_1a134c565ebc72d81c353e6fb99a37e467" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_ENTER_ARGS(x,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_TRACE(&quot;&gt;&gt;<sp/>%s(&quot;<sp/>x<sp/>&quot;)\n&quot;,<sp/>__FUNCTION__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="_serval___log_8h_1add5e4eccbb4a3380164d2674d5b8bdb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_EXIT()<sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_TRACE(&quot;&lt;&lt;<sp/>%s()\n&quot;,<sp/>__FUNCTION__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="_serval___log_8h_1a0e33c640463b4d856dc46716c2cf15e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_TRACE_EXIT_RETURN(x,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG_TRACE(&quot;&lt;&lt;<sp/>%s()<sp/>=<sp/>&quot;<sp/>x<sp/>&quot;\n&quot;,<sp/>__FUNCTION__,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_LOG_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Log.h"/>
  </compounddef>
</doxygen>
