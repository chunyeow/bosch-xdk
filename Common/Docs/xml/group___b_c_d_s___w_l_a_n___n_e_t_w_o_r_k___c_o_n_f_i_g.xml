<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g" kind="group">
    <compoundname>BCDS_WLAN_NETWORK_CONFIG</compoundname>
    <title>Network Configuration</title>
    <innerfile refid="_b_c_d_s___wlan_network_config_8h">BCDS_WlanNetworkConfig.h</innerfile>
    <innerclass refid="struct_wlan_network_config___ip_settings___s" prot="public">WlanNetworkConfig_IpSettings_S</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gae92d6cf23a5ef348fad87fff095665f5" prot="public" static="no">
        <name>WlanNetworkConfig_IpStatus_E</name>
        <enumvalue id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ggae92d6cf23a5ef348fad87fff095665f5a61ce7795c1225a3f66ea501577e688e8" prot="public">
          <name>WLANNWCNF_IPSTATUS_IPV4_AQRD</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv4 Address Acquired </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ggae92d6cf23a5ef348fad87fff095665f5ad650ba80822e2160facd5add3d2ba50d" prot="public">
          <name>WLANNWCNF_IPSTATUS_IPV6_AQRD</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IPv6 Address Acquired </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ggae92d6cf23a5ef348fad87fff095665f5a0eb0cb0c6c20215cdf65e526ddd8006e" prot="public">
          <name>WLANNWCNF_IPSTATUS_IP_NOTAQRD</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IP Address Not Acquired </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Different IP status for the Network Configuration function callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="85" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="84" bodyend="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga6d739e78043ab3677b69467d8b4ad39c" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* WlanNetworkConfig_IpCallback_T)(WlanNetworkConfig_IpStatus_T ipStatus)</definition>
        <argsstring>)(WlanNetworkConfig_IpStatus_T ipStatus)</argsstring>
        <name>WlanNetworkConfig_IpCallback_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining the prototype which Set IP function call back must conform to. This call back is called to notify the user when the IP is acquired following the call of <ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga198a7e8f40173e71da57a8e79905acfd" kindref="member">WlanNetworkConfig_SetIpDhcp()</ref>. Returns the NCI IP status as a parameter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="107" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gaf3b3c9b37be77d520086ad0fff43f56a" prot="public" static="no">
        <type>struct <ref refid="struct_wlan_network_config___ip_settings___s" kindref="compound">WlanNetworkConfig_IpSettings_S</ref></type>
        <definition>typedef struct WlanNetworkConfig_IpSettings_S WlanNetworkConfig_IpSettings_T</definition>
        <argsstring></argsstring>
        <name>WlanNetworkConfig_IpSettings_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="119" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga6af27191038f58bf2a54c5b4188124ef" prot="public" static="no">
        <type>enum <ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gae92d6cf23a5ef348fad87fff095665f5" kindref="member">WlanNetworkConfig_IpStatus_E</ref></type>
        <definition>typedef enum WlanNetworkConfig_IpStatus_E WlanNetworkConfig_IpStatus_T</definition>
        <argsstring></argsstring>
        <name>WlanNetworkConfig_IpStatus_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="119" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga08ed9de4517316c3744ada07ddb34dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T WlanNetworkConfig_GetIpAddress</definition>
        <argsstring>(uint8_t *url, uint32_t *destAddr)</argsstring>
        <name>WlanNetworkConfig_GetIpAddress</name>
        <param>
          <type>uint8_t *</type>
          <declname>url</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>destAddr</declname>
        </param>
        <briefdescription>
<para>This API returns back the Ip address by the host name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
<para>url The string pointer holding the host name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
</parameternamelist>
<parameterdescription>
<para>destAddr The variable in which IP address to be stored</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK IP address returned succesffuly </para></simplesect>
<simplesect kind="return"><para>RETCODE_FAILURE Error occurred in fetching the ip address </para></simplesect>
<simplesect kind="return"><para>RETCODE_NULL_POINTER if the input parameter passes NULL</para></simplesect>
Example usage:</para><para><programlisting><codeline><highlight class="normal">uint8_t<sp/>url[]<sp/>=<sp/>&quot;www.google.com&quot;</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/>ipAddress<sp/>=<sp/>0x00;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>ret;</highlight></codeline>
<codeline><highlight class="normal">ret<sp/>=<sp/>WlanNetworkConfig_GetIpaddress(url,<sp/>&amp;ipAddress);</highlight></codeline>
<codeline><highlight class="normal">if(RETCODE_OK<sp/>!=<sp/>ret)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//handle<sp/>error</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="353" column="1"/>
        <referencedby refid="_network_config_8c_1a463b8efbd6c5719f233f878783cd8f9a" compoundref="_network_config_8c" startline="123" endline="126">NetworkConfig_GetIpAddress</referencedby>
        <referencedby refid="group___p_a_l__init_1ga8358cacaefdc97458fa8986128af443f" compoundref="_serval_p_a_l___wi_fi_8c" startline="103" endline="114">PAL_getIpaddress</referencedby>
        <referencedby refid="_l_w_m2_m_dns_util_8h_1abc5ec06fe4f4bdac07760aad40ba1825" compoundref="_l_w_m2_m_dns_util_8c" startline="242" endline="369">LWM2MDnsUtil_ExtendedResolveHostname</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga610f25671b673e8ed2df02dd35aeef79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T WlanNetworkConfig_GetIpSettings</definition>
        <argsstring>(WlanNetworkConfig_IpSettings_T *myIpSettings)</argsstring>
        <name>WlanNetworkConfig_GetIpSettings</name>
        <param>
          <type><ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gaf3b3c9b37be77d520086ad0fff43f56a" kindref="member">WlanNetworkConfig_IpSettings_T</ref> *</type>
          <declname>myIpSettings</declname>
        </param>
        <briefdescription>
<para>Function to handle WLAN IP settings. This function gets the IP settings after a Successful connection. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">myIpSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Network configuration settings. Pointer contains IP address, Gateway, DNS Server and DHCP information</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acba5d476dcd59fa4e9cf717ce9484a0df08" kindref="member">RETCODE_NULL_POINTER</ref> - if the input parameter passes NULL. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> - Settings retrieved correctly. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbaea901b927978b56cbfae3fa93c3ddfa4" kindref="member">RETCODE_UNINITIALIZED</ref> - if WlanConnect_GetInitStatus failed by returning WLANCONNECT_NOT_INITIALZED. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> - if sl_NetCfgGet failed by returning NETWORKCONFIG_FAILURE .</para></simplesect>
<simplesect kind="return"><para>The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
Example usage: Getting the IP settings <programlisting><codeline><highlight class="normal">//<sp/>Local<sp/>variable<sp/>that<sp/>stores<sp/>the<sp/>IP<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">WlanNetworkConfig_IpSettings_T<sp/>myIpGet;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Local<sp/>variable<sp/>for<sp/>storing<sp/>the<sp/>return<sp/>status</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>retrieve<sp/>the<sp/>IP<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanNetworkConfig_GetIpSettings(&amp;myIpGet);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>print<sp/>a<sp/>message<sp/>if<sp/>the<sp/>function<sp/>returned<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(RETCODE_OK<sp/>==<sp/>retStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;The<sp/>IP<sp/>was<sp/>retrieved<sp/>successfully&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="144" column="1"/>
        <referencedby refid="group___a_w_s___s_e_n_d___d_a_t_a___o_v_e_r___m_q_t_t_1ga9705492018c39d2f2643bb75c503f9b4" compoundref="_aws_send_data_over_m_q_t_t_2source_2_app_controller_8c" startline="294" endline="323">AppControllerValidateWLANConnectivity</referencedby>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
        <referencedby refid="_network_config_8c_1affdb5da672927ad5fd6d35a56d921577" compoundref="_network_config_8c" startline="87" endline="90">NetworkConfig_GetIpSettings</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga51c3c1c93110333402dd5ceb00890c54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga6af27191038f58bf2a54c5b4188124ef" kindref="member">WlanNetworkConfig_IpStatus_T</ref></type>
        <definition>WlanNetworkConfig_IpStatus_T WlanNetworkConfig_GetIpStatus</definition>
        <argsstring>(void)</argsstring>
        <name>WlanNetworkConfig_GetIpStatus</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to get the IP status. This function return the IP status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WLANNWCNF_IPSTATUS_IPV4_AQRD - IPv4 was acquired </para></simplesect>
<simplesect kind="return"><para>WLANNWCNF_IPSTATUS_IPV6_AQRD - IPv6 was acquired (currently not supported) </para></simplesect>
<simplesect kind="return"><para>WLANNWCNF_IPSTATUS_IP_NOTAQRD - IP was not acquired</para></simplesect>
Example usage: Block until IP status is acquired and Wlan is connected <programlisting><codeline><highlight class="normal">while<sp/>((WLANNWCT_STATUS_DISCONNECTED<sp/>==<sp/>WlanNetworkConnect_GetStatus())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>||<sp/>(WLANNWCNF_IPSTATUS_IP_NOTAQRD<sp/>==<sp/>WlanNetworkConfig_GetIpStatus()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Stay<sp/>here<sp/>until<sp/>connected<sp/>and<sp/>ip<sp/>acquired.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Timeout<sp/>logic<sp/>can<sp/>be<sp/>added<sp/>here.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>This API must be called only after initialization </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="326" column="1"/>
        <referencedby refid="group___a_w_s___s_e_n_d___d_a_t_a___o_v_e_r___m_q_t_t_1ga9705492018c39d2f2643bb75c503f9b4" compoundref="_aws_send_data_over_m_q_t_t_2source_2_app_controller_8c" startline="294" endline="323">AppControllerValidateWLANConnectivity</referencedby>
        <referencedby refid="group___b_o_s_c_h___x_d_k___c_l_o_u_d___c_o_n_n_e_c_t_i_v_i_t_y_1gaee13b98bef01547033a861f8d1f4e1ef" compoundref="_bosch_x_d_k_cloud_connectivity_2source_2_app_controller_8c" startline="462" endline="518">AppControllerWLANMonitor</referencedby>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
        <referencedby refid="_network_config_8c_1a153675bb415f07cf9c8fe6a3c3d988bc" compoundref="_network_config_8c" startline="77" endline="80">NetworkConfig_GetIpStatus</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gae635ae5f0047c1c4144fbe90a4ed957d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t WlanNetworkConfig_Ipv4Byte</definition>
        <argsstring>(uint32_t ipValue, uint8_t index)</argsstring>
        <name>WlanNetworkConfig_Ipv4Byte</name>
        <param>
          <type>uint32_t</type>
          <declname>ipValue</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function to convert an hexadecimal to IP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ipValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Hexadecimal value of the IP V4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines which byte of the IPV4 will be returned.It should be from 0 to 3</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the integer value of IP from given hexadecimal value </para></simplesect>
<simplesect kind="return"><para>any error value refer <ref refid="group__netcfg_1gac926ef1f2a6d3c3b521a4625a361a874" kindref="member">SL_IPV4_BYTE</ref> error codes</para></simplesect>
Example usage: Extract IPV4 byte from the hexadecimal IP value and print it <programlisting><codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>IP<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">WlanNetworkConfig_GetIpSettings(&amp;myIpGet);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Print<sp/>the<sp/>retrieved<sp/>IP<sp/>address.<sp/>The<sp/>Gateway,<sp/>DNS<sp/>and<sp/>Mask</highlight></codeline>
<codeline><highlight class="normal">//<sp/>can<sp/>also<sp/>be<sp/>extracted<sp/>in<sp/>the<sp/>same<sp/>manner</highlight></codeline>
<codeline><highlight class="normal">printf(&quot;<sp/>-<sp/>The<sp/>static<sp/>IP<sp/>was<sp/>retrieved<sp/>:<sp/>%u.%u.%u.%u<sp/>\n\r&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>int)<sp/>(WlanNetworkConfig_Ipv4Byte(myIpGet.ipV4,<sp/>3)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>int)<sp/>(WlanNetworkConfig_Ipv4Byte(myIpGet.ipV4,<sp/>2)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>int)<sp/>(WlanNetworkConfig_Ipv4Byte(myIpGet.ipV4,<sp/>1)),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned<sp/>int)<sp/>(WlanNetworkConfig_Ipv4Byte(myIpGet.ipV4,<sp/>0)));</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="300" column="1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga8fa6ade652d32d7f1ee669214a79153c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t WlanNetworkConfig_Ipv4Value</definition>
        <argsstring>(uint8_t add3, uint8_t add2, uint8_t add1, uint8_t add0)</argsstring>
        <name>WlanNetworkConfig_Ipv4Value</name>
        <param>
          <type>uint8_t</type>
          <declname>add3</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>add2</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>add1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>add0</declname>
        </param>
        <briefdescription>
<para>Function to convert an IP to hexadecimal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">add3</parametername>
</parameternamelist>
<parameterdescription>
<para>Decimal value of the first byte (MSB) of an IPV4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">add2</parametername>
</parameternamelist>
<parameterdescription>
<para>Decimal value of the second byte of an IPV4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">add1</parametername>
</parameternamelist>
<parameterdescription>
<para>Decimal value of the third byte of an IPV4 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">add0</parametername>
</parameternamelist>
<parameterdescription>
<para>Decimal value of the last byte (LSB) of an IPV4</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success returns the integer value of IP from given hexadecimal value </para></simplesect>
<simplesect kind="return"><para>any error value refer <ref refid="group__netcfg_1ga4eab1e8ae1d6680598de66bfff8c3ec8" kindref="member">SL_IPV4_VAL</ref> error codes</para></simplesect>
Example usage: Transform IPV4 to hexadecimal value <programlisting><codeline><highlight class="normal">//<sp/>Local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanNetworkConfig_IpSettings_T<sp/>myIpSet;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>After<sp/>calling<sp/>the<sp/>function<sp/>the<sp/>IPV4<sp/>values<sp/>shall<sp/>be<sp/>:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0xc0a80278,<sp/>the<sp/>equivalent<sp/>for<sp/>192.168.2.120</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0xc0a80201,<sp/>the<sp/>equivalent<sp/>for<sp/>192.168.2.1</highlight></codeline>
<codeline><highlight class="normal">//<sp/>0xffffff00,<sp/>the<sp/>equivalent<sp/>for<sp/>255.255.255.0</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipv4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WlanNetworkConfig_Ipv4Value(192,168,2,120);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4DnsServer<sp/>=<sp/>WlanNetworkConfig_Ipv4Value(192,168,2,1);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4Gateway<sp/><sp/><sp/>=<sp/>WlanNetworkConfig_Ipv4Value(192,168,2,1);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4Mask<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WlanNetworkConfig_Ipv4Value(255,255,255,0);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga198a7e8f40173e71da57a8e79905acfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T WlanNetworkConfig_SetIpDhcp</definition>
        <argsstring>(WlanNetworkConfig_IpCallback_T myIpCallback)</argsstring>
        <name>WlanNetworkConfig_SetIpDhcp</name>
        <param>
          <type><ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga6d739e78043ab3677b69467d8b4ad39c" kindref="member">WlanNetworkConfig_IpCallback_T</ref></type>
          <declname>myIpCallback</declname>
        </param>
        <briefdescription>
<para>Function to handle WLAN IP settings. This function sets the IP by using DHCP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">myIpCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function for notifying user of IP acquisition using DHCP</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbaea901b927978b56cbfae3fa93c3ddfa4" kindref="member">RETCODE_UNINITIALIZED</ref> - if WlanConnect_GetInitStatus failed by returning WLANCONNECT_NOT_INITIALZED. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> - if sl_Start failed by returning other than ROLE_STA. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> - sets the IP by using DHCP successfully.</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
Example usage: Setting DHCP IP with Callback <programlisting><codeline><highlight class="normal">//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>myDhcpIpCallbackFunc(WlanNetworkConfig_IpStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>user<sp/>can<sp/>do<sp/>something<sp/>inside<sp/>this<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">NCI_ipCallback_t<sp/>myIpCallback;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>IP<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">myIpCallback<sp/>=<sp/>myDhcpIpCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Configure<sp/>DHCP<sp/>IP<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanNetworkConfig_SetIpDhcp(myIpCallback);</highlight></codeline>
</programlisting></para><para>Example2 usage: Setting DHCP IP without Callback <programlisting><codeline><highlight class="normal">//<sp/>Configure<sp/>DHCP<sp/>IP<sp/>without<sp/>callback.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>default<sp/>function<sp/>in<sp/>case<sp/>no<sp/>other</highlight></codeline>
<codeline><highlight class="normal">//<sp/>function<sp/>is<sp/>used<sp/>in<sp/>order<sp/>to<sp/>set<sp/>the<sp/>IP</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanNetworkConfig_SetIpDhcp(NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="235" column="1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
        <referencedby refid="_network_config_8c_1a7fec08671de13287000a0b3a1a251ae2" compoundref="_network_config_8c" startline="100" endline="103">NetworkConfig_SetIpDhcp</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gabbaeb6b12feb60f487acfa8605f40e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T WlanNetworkConfig_SetIpStatic</definition>
        <argsstring>(WlanNetworkConfig_IpSettings_T myIpSettings)</argsstring>
        <name>WlanNetworkConfig_SetIpStatic</name>
        <param>
          <type><ref refid="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gaf3b3c9b37be77d520086ad0fff43f56a" kindref="member">WlanNetworkConfig_IpSettings_T</ref></type>
          <declname>myIpSettings</declname>
        </param>
        <briefdescription>
<para>Function to handle WLAN IP settings. This function sets the static IP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">myIpSettings</parametername>
</parameternamelist>
<parameterdescription>
<para>Network configuration settings structure. Contains IP address, Gateway, DNS Server and DHCP information</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> - Settings retrieved correctly. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbaea901b927978b56cbfae3fa93c3ddfa4" kindref="member">RETCODE_UNINITIALIZED</ref> - if WlanConnect_GetInitStatus failed by returning WLANCONNECT_NOT_INITIALZED. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> - if sl_NetCfgGet failed by returning NETWORKCONFIG_FAILURE. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> - if sl_Start failed by returning other than ROLE_STA.</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning Example usage: Setting static IP <programlisting><codeline><highlight class="normal">//<sp/>Local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanNetworkConfig_IpSettings_T<sp/>myIpSet;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>IP<sp/>settings<sp/>that<sp/>will<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal">myIpSet.isDHCP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>(uint8_t)<sp/><sp/>DHCP_DISABLED;</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>NCI_ipv4Value(192,168,2,120);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4DnsServer<sp/>=<sp/><sp/>NCI_ipv4Value(192,168,2,1);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4Gateway<sp/><sp/><sp/>=<sp/><sp/>NCI_ipv4Value(192,168,2,1);</highlight></codeline>
<codeline><highlight class="normal">myIpSet.ipV4Mask<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>NCI_ipv4Value(255,255,255,0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>static<sp/>IP</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanNetworkConfig_SetIpStatic(myIpSet);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>print<sp/>a<sp/>message<sp/>if<sp/>the<sp/>function<sp/>returned<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(RETCODE_OK<sp/>==<sp/>retStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;The<sp/>static<sp/>IP<sp/>was<sp/>set<sp/>successfully&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="187" column="1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
        <referencedby refid="_network_config_8c_1a072cdf65943a1214359ae1518920fe12" compoundref="_network_config_8c" startline="92" endline="98">NetworkConfig_SetIpStatic</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga96b07012c57394eaf540ae59c2de345f" prot="public" static="no">
        <name>WLANNWCNF_DHCP_DISABLED</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro for Dynamically Host Configuration Protocol disabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="74" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="74" bodyend="-1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gae5f88351b55d681e1db5240f3cff2a79" prot="public" static="no">
        <name>WLANNWCNF_DHCP_ENABLED</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro for Dynamically Host Configuration Protocol enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="78" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1ga415b98d2effebf4cbed353d557f2c1ba" prot="public" static="no">
        <name>WLANNWCNF_DHCP_FLG_ACQ</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro for Dynamically Host Configuration Protocol acquired </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="81" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="81" bodyend="-1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga45a7411bed72ce367a7e7b6f053d6545" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="171" endline="187">myDhcpIpCallbackFunc</referencedby>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___n_e_t_w_o_r_k___c_o_n_f_i_g_1gab448525836fcf69f37a246a70602ddea" prot="public" static="no">
        <name>WLANNWCNF_DHCP_FLG_NOT_ACQ</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro for Dynamically Host Configuration Protocol not acquired </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" line="80" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Wlan/include/BCDS_WlanNetworkConfig.h" bodystart="80" bodyend="-1"/>
        <referencedby refid="group___w_l_a_n___n_e_t_w_o_r_k___m_a_n_a_g_e_m_e_n_t_1ga6b08614c341359b0edd92c1feaf47fc6" compoundref="_wlan_network_management_2source_2_app_controller_8c" startline="203" endline="527">SetAndGetIp</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface header for the Network Configuration Interface module. </para>    </briefdescription>
    <detaileddescription>
<para>The interface header exports High-level Network Configuration API&apos;s for integrating with the Network Interface which are used to Get &amp; Set IP Settings Set DHCP IP address and to get the IPV4 IpAddress and ipv4 byte value. </para>    </detaileddescription>
  </compounddef>
</doxygen>
