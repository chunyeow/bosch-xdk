<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_b_c_d_s___wlan_connect_8h" kind="file">
    <compoundname>BCDS_WlanConnect.h</compoundname>
    <includes refid="_b_c_d_s___basics_8h" local="yes">BCDS_Basics.h</includes>
    <includes refid="_b_c_d_s___retcode_8h" local="yes">BCDS_Retcode.h</includes>
    <includes refid="_b_c_d_s___network_config_8h" local="yes">BCDS_NetworkConfig.h</includes>
    <includes refid="_b_c_d_s___wlan_network_connect_8h" local="yes">BCDS_WlanNetworkConnect.h</includes>
    <includedby refid="_network_config_8c" local="yes">SDK/xdk110/Common/legacy/source/NetworkConfig.c</includedby>
    <includedby refid="_wlan_connect_8c" local="yes">SDK/xdk110/Common/legacy/source/WlanConnect.c</includedby>
    <incdepgraph>
      <node id="23707">
        <label>stdbool.h</label>
      </node>
      <node id="23712">
        <label>BCDS_WlanNetworkConnect.h</label>
        <link refid="_b_c_d_s___wlan_network_connect_8h"/>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
      </node>
      <node id="23710">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23706">
        <label>stdint.h</label>
      </node>
      <node id="23709">
        <label>stdlib.h</label>
      </node>
      <node id="23711">
        <label>BCDS_NetworkConfig.h</label>
        <link refid="_b_c_d_s___network_config_8h"/>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
      </node>
      <node id="23708">
        <label>string.h</label>
      </node>
      <node id="23705">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="23706" relation="include">
        </childnode>
        <childnode refid="23707" relation="include">
        </childnode>
        <childnode refid="23708" relation="include">
        </childnode>
        <childnode refid="23709" relation="include">
        </childnode>
      </node>
      <node id="23704">
        <label>SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h</label>
        <link refid="BCDS_WlanConnect.h"/>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23711" relation="include">
        </childnode>
        <childnode refid="23712" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="23714">
        <label>SDK/xdk110/Common/legacy/source/NetworkConfig.c</label>
        <link refid="_network_config_8c"/>
      </node>
      <node id="23715">
        <label>SDK/xdk110/Common/legacy/source/WlanConnect.c</label>
        <link refid="_wlan_connect_8c"/>
      </node>
      <node id="23713">
        <label>SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h</label>
        <link refid="BCDS_WlanConnect.h"/>
        <childnode refid="23714" relation="include">
        </childnode>
        <childnode refid="23715" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_wlan_connect___scan_info___s" prot="public">WlanConnect_ScanInfo_S</innerclass>
    <innerclass refid="struct_wlan_connect___scan_list___s" prot="public">WlanConnect_ScanList_S</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8182ff3bdd2b2dc31e7403ca0b1d6197" prot="public" static="no">
        <name>WLANCONNECT_DUMMY_SSID</name>
        <initializer>&quot;XDK110&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>macro to represent the ssid of the device in WPS_PBC and WPS_PIN Security mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="80" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="81" bodyend="-1"/>
        <referencedby refid="_wlan_connect_8c_1a5d20c403ef7d79b6ce38888545501643" compoundref="_wlan_connect_8c" startline="440" endline="482">WlanConnect_WPS_PBC</referencedby>
        <referencedby refid="_wlan_connect_8c_1aef0cbcc48d0069bdc3f8fe30133864a9" compoundref="_wlan_connect_8c" startline="484" endline="527">WlanConnect_WPS_PIN</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga9022be429b4293f7bcd4a2eaad3d1562" prot="public" static="no">
        <name>WLANCONNECT_ENROLLEE_PIN</name>
        <initializer>&quot;35072317&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the Enrollee PIN that must be entered in the router for WPS PIN Connection. The pin code is stored in the SFlash. The default pin code is 35072317. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="79" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="78" bodyend="-1"/>
        <referencedby refid="_wlan_connect_8c_1aef0cbcc48d0069bdc3f8fe30133864a9" compoundref="_wlan_connect_8c" startline="484" endline="527">WlanConnect_WPS_PIN</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gad4413716f81083350408ba189f87fe1f" prot="public" static="no">
        <name>WLANCONNECT_INITIALZED</name>
        <initializer>UINT8_C(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to represent Initialized state of Wlan </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="81" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga58ec0627311bb29cb08c4cd2b74eeb0f" prot="public" static="no">
        <name>WLANCONNECT_MAX_MAC_ADDR_LEN</name>
        <initializer>UINT8_C(6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The max buffer for storing the MAC address length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="77" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="77" bodyend="-1"/>
        <referencedby refid="_wlan_connect_8c_1abbdb496ce3db76ba6ad9a3882e1a41cc" compoundref="_wlan_connect_8c" startline="714" endline="850">WlanConnect_ScanNetworks</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf8a2cb3d5c7218281612c86d54a37213" prot="public" static="no">
        <name>WLANCONNECT_MAX_SCAN_INFO_BUF</name>
        <initializer>UINT8_C(20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The max buffer for storing the scan data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="75" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga155d053525d0fb688587248b9fedae23" prot="public" static="no">
        <name>WLANCONNECT_MAX_SSID_LENGTH</name>
        <initializer>UINT8_C(32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The max buffer for storing the SSID length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="76" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="76" bodyend="-1"/>
        <referencedby refid="_wlan_connect_8c_1abbdb496ce3db76ba6ad9a3882e1a41cc" compoundref="_wlan_connect_8c" startline="714" endline="850">WlanConnect_ScanNetworks</referencedby>
      </memberdef>
      <memberdef kind="define" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gad30a7a6e3ae5dbbb7858b9923e36e14f" prot="public" static="no">
        <name>WLANCONNECT_NOT_INITIALZED</name>
        <initializer>UINT8_C(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to represent un-Initialized state of Wlan </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="82" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="83" bodyend="-1"/>
        <referencedby refid="_wlan_connect_8c_1a465235bdbbcd96b17389fb9a12875b6a" compoundref="_wlan_connect_8c" startline="286" endline="333">WlanConnect_Open</referencedby>
        <referencedby refid="_wlan_connect_8c_1af65d9ac0f02489ae99a5e40e5bd38588" compoundref="_wlan_connect_8c" startline="335" endline="388">WlanConnect_WEP_Open</referencedby>
        <referencedby refid="_wlan_connect_8c_1ac52437d88ce199ce1d49baba8938af8d" compoundref="_wlan_connect_8c" startline="390" endline="438">WlanConnect_WPA</referencedby>
        <referencedby refid="_wlan_connect_8c_1a5d20c403ef7d79b6ce38888545501643" compoundref="_wlan_connect_8c" startline="440" endline="482">WlanConnect_WPS_PBC</referencedby>
        <referencedby refid="_wlan_connect_8c_1aef0cbcc48d0069bdc3f8fe30133864a9" compoundref="_wlan_connect_8c" startline="484" endline="527">WlanConnect_WPS_PIN</referencedby>
        <referencedby refid="_wlan_connect_8c_1aa63bfe8d9118a1300b0c1bc3c897f7d3" compoundref="_wlan_connect_8c" startline="529" endline="586">WlanConnect_EnterpriseWPA</referencedby>
        <referencedby refid="_wlan_connect_8c_1a4e9d8d1671b1a81d2c677e506eed20e0" compoundref="_wlan_connect_8c" startline="588" endline="611">WlanConnect_DeleteAllProfiles</referencedby>
        <referencedby refid="_wlan_connect_8c_1aea24a59e30c0ff0fce2beeb63af11e55" compoundref="_wlan_connect_8c" startline="613" endline="685">WlanConnect_Disconnect</referencedby>
        <referencedby refid="_wlan_connect_8c_1abbdb496ce3db76ba6ad9a3882e1a41cc" compoundref="_wlan_connect_8c" startline="714" endline="850">WlanConnect_ScanNetworks</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc4f8903f62ab24d2878c20cb669c61d" prot="public" static="no">
        <name>WlanConnect_CurrentStatus_E</name>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da20ab27345c4aaf1656409add757075ea" prot="public">
          <name>CONNECTED_AND_IPV4_ACQUIRED</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da009901d3eb7461917089f257dc8b0c21" prot="public">
          <name>CONNECTED_AND_IP_NOT_ACQUIRED</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da2b84c36cd8b1c8c93a906720cd20682e" prot="public">
          <name>DISCONNECTED_AND_IPV4_ACQUIRED</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da7916d45927ea1483cf47cf3dcfca8c84" prot="public">
          <name>DISCONNECTED_IP_NOT_ACQUIRED</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="107" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5936cd0b0e4650ee879b91b4388ccd40" prot="public" static="no">
        <name>WlanConnect_Retcode_E</name>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a970303d0b9f3e80c90027336cceef105" prot="public">
          <name>RETCODE_SIMPLELINK_STOP_FAILED</name>
          <initializer>= 75</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a94ea21e7455b6b9491788b3aa96d37f7" prot="public">
          <name>RETCODE_SIMPLELINK_STA_MODE_FAILED</name>
          <initializer>= 76</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining callback status. This type is used for different connection status for the WLAN Connect function callback. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="91" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="90" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gacde04487fc6749f6a03f4fa32a975ad6" prot="public" static="no">
        <name>WlanConnect_Status_E</name>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a8ed44f0212d22786740a22ba5b0ce556" prot="public">
          <name>WLAN_CONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6aad379dae4c66e39bd383da137acbcee4" prot="public">
          <name>WLAN_DISCONNECTED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a0f3e5485bd2077daa8010491012f7f6b" prot="public">
          <name>WLAN_CONNECTION_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a3e9b0523a8d01c9bcbe90f663356de66" prot="public">
          <name>WLAN_CONNECTION_PWD_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a274cda9ec5d58024b59704076acef3ef" prot="public">
          <name>WLAN_DISCONNECT_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="97" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="96" bodyend="103"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga9d725caefd919a8a7011fc5065608fc6" prot="public" static="no">
        <type>unsigned</type>
        <definition>typedef unsigned long(WlanConnect_ScanInterval_T)</definition>
        <argsstring>(WlanConnect_ScanInterval_T)</argsstring>
        <name>long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining scan interval. This type is used for WlanConnect_scanNetworks function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="137" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* WlanConnect_Callback_T)(WlanConnect_Status_T connectStatus)</definition>
        <argsstring>)(WlanConnect_Status_T connectStatus)</argsstring>
        <name>WlanConnect_Callback_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining the prototype which connection call back must conform to. This call back is called to notify the user when connection is established Returns the connection status as a parameter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="171" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7064a8ca9a95c1fac44bd2b7619c2579" prot="public" static="no">
        <type>enum <ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc4f8903f62ab24d2878c20cb669c61d" kindref="member">WlanConnect_CurrentStatus_E</ref></type>
        <definition>typedef enum WlanConnect_CurrentStatus_E WlanConnect_CurrentNwStatus_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_CurrentNwStatus_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="99" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga96043d40ccd7ca91671ca1409fe5b113" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* WlanConnect_DisconnectCallback_T)(WlanConnect_Status_T discconnectStatus)</definition>
        <argsstring>)(WlanConnect_Status_T discconnectStatus)</argsstring>
        <name>WlanConnect_DisconnectCallback_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining the prototype which disconnection call back must conform to. This call back is called to notify the user when connection is terminated following the call to WlanConnect_disconnect(). Returns the connection status as a parameter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="179" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" prot="public" static="no">
        <type>signed char *</type>
        <definition>typedef signed char* WlanConnect_PassPhrase_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_PassPhrase_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining a pointer to char This type is used in order to pass the network Pass Phrase </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="131" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5ed5ab171ed4c0b869c5491c46368702" prot="public" static="no">
        <type>struct <ref refid="struct_wlan_connect___scan_info___s" kindref="compound">WlanConnect_ScanInfo_S</ref></type>
        <definition>typedef struct WlanConnect_ScanInfo_S WlanConnect_ScanInfo_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_ScanInfo_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="137" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga1ddaa83623800239c6b2381ac4f4d4e1" prot="public" static="no">
        <type>struct <ref refid="struct_wlan_connect___scan_list___s" kindref="compound">WlanConnect_ScanList_S</ref></type>
        <definition>typedef struct WlanConnect_ScanList_S WlanConnect_ScanList_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_ScanList_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="137" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" prot="public" static="no">
        <type>signed char *</type>
        <definition>typedef signed char* WlanConnect_SSID_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_SSID_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining a pointer to char. This type is used in order to pass the network SSID </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="119" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" prot="public" static="no">
        <type>enum <ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gacde04487fc6749f6a03f4fa32a975ad6" kindref="member">WlanConnect_Status_E</ref></type>
        <definition>typedef enum WlanConnect_Status_E WlanConnect_Status_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_Status_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="99" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf59d068304c06bac80566d2040681f58" prot="public" static="no">
        <type>signed char *</type>
        <definition>typedef signed char* WlanConnect_Username_T</definition>
        <argsstring></argsstring>
        <name>WlanConnect_Username_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type defining a pointer to char. This type is used in order to pass the network Username </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="125" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_Init(void))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_Init</declname>
          <defname>LoRa_Join</defname>
          <array>void</array>
        </param>
        <briefdescription>
<para>WLAN driver initialization function.<linebreak/>
 This function initializes WLAN driver context and Hardware interfaces; Also initializes the WLAN Stack. This API should be called first before calling any other API. </para>        </briefdescription>
        <detaileddescription>
<para>starts a LoRa join process</para><para>WLI Delete All Profiles interface.<linebreak/>
 This function erases from memory all the stored profiles from WIFI Protected Setup functions.</para><para>WLAN driver de-initialization function.<linebreak/>
 Performs memory deallocation, closes WLAN driver context and shuts down the hardware interfaces.</para><para><simplesect kind="note"><para>By default device is configured to STA mode even if device is in different modes (Like AP, P2P). If user want to change the mode, they need to use the Simple link API directly</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning </para></simplesect>
<simplesect kind="return"><para>RETCODE_OK - Successfully WLAN driver initialized. </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Not initialized WLAN driver.</para></simplesect>
Example1 usage: Initialize the WLAN Stack and the WLAN Driver <programlisting><codeline><highlight class="normal">//<sp/>Initialize<sp/>WLAN<sp/>driver<sp/>and<sp/>WLAN<sp/>stack</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_Init();</highlight></codeline>
</programlisting></para><para>Example2 usage: Restart Device <programlisting><codeline><highlight class="normal">//<sp/>Local<sp/>API<sp/>return<sp/>status</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus[2];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">retStatus[0]<sp/>=<sp/>WlanConnect_DeInit();</highlight></codeline>
<codeline><highlight class="normal">retStatus[1]<sp/>=<sp/>WlanConnect_Init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>if<sp/>device<sp/>restart<sp/>has<sp/>finished<sp/>with<sp/>error</highlight></codeline>
<codeline><highlight class="normal">if<sp/>((RETCODE_OK<sp/>!=<sp/>retStatus[0])<sp/>||<sp/>(RETCODE_OK<sp/>!=<sp/>retStatus[1]))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;Restart<sp/>device<sp/>failed&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning </para></simplesect>
<simplesect kind="return"><para>RETCODE_OK - Successfully WLAN driver de-initialized. </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - De-initializing WLAN driver failed</para></simplesect>
Example1 usage: Deinitialize the WLAN Stack <programlisting><codeline><highlight class="normal">//<sp/>Deinitialize<sp/>WLAN<sp/>stack</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_DeInit();</highlight></codeline>
</programlisting></para><para>Example2 usage: Restart Device <programlisting><codeline><highlight class="normal">//<sp/>Local<sp/>API<sp/>return<sp/>status</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus[2];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">retStatus[0]<sp/>=<sp/>WlanConnect_DeInit();</highlight></codeline>
<codeline><highlight class="normal">retStatus[1]<sp/>=<sp/>WlanConnect_Init();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>if<sp/>device<sp/>restart<sp/>has<sp/>finished<sp/>with<sp/>error</highlight></codeline>
<codeline><highlight class="normal">if<sp/>((RETCODE_OK<sp/>!=<sp/>retStatus[0])<sp/>||<sp/>(RETCODE_OK<sp/>!=<sp/>retStatus[1]))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;Restart<sp/>device<sp/>failed&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - successfully erased all profiles. </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - error during erase</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning Example usage: Delete all stored WLI profiles <programlisting><codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_DeleteAllProfiles();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(RETCODE_OK<sp/>!=<sp/>retStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;Profiles<sp/>were<sp/>not<sp/>deleted<sp/>correctly&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para></simplesect>
<xrefsect id="deprecated_1_deprecated000056"><xreftitle>Deprecated</xreftitle><xrefdescription><para>since version vxx.xx.xx </para></xrefdescription></xrefsect></para><para>RETCODE_OK: join procedure successfully started RECODE_FAILURE: join error </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga46af92a13a59fc789eaa218eac5d66cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_Open(WlanConnect_SSID_T connectSSID, WlanConnect_Callback_T connectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_Open</declname>
          <array>WlanConnect_SSID_T connectSSID, WlanConnect_Callback_T connectCallback</array>
        </param>
        <briefdescription>
<para>WLI Connect to Open Network interface.<linebreak/>
 This function connects to an open network.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectSSID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network SSID to connect to.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user function callback.<linebreak/>
 Returns the WLI connection status as a parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - Successfully connected to the AP.In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>WLAN_CONNECTION_ERROR - Failure because of incorrect SSID. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but ip not acquired.</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
Example1 usage: Connect to an open WLAN network with callback (non-blocking) <programlisting><codeline><highlight class="normal">//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_Callback_T<sp/>connectCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;Name-Of-Open-Network&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_Open(connectSSID,<sp/>connectCallback);</highlight></codeline>
</programlisting></para><para>Example2 usage: Connect to an open WLAN network in blocking mode <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Open<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;Name-Of-Open-Network&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Task<sp/>will<sp/>be<sp/>blocked<sp/>here<sp/>until<sp/>connection<sp/>is<sp/>done<sp/>and<sp/>IP<sp/>acquired</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_Open(connectSSID,<sp/>NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8ff6a6044b598ac49329198ce8bac251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_WEP_Open(WlanConnect_SSID_T connectSSID, WlanConnect_PassPhrase_T connectPass, uint8_t passPhraseLength, WlanConnect_Callback_T connectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_WEP_Open</declname>
          <array>WlanConnect_SSID_T connectSSID, WlanConnect_PassPhrase_T connectPass, uint8_t passPhraseLength, WlanConnect_Callback_T connectCallback</array>
        </param>
        <briefdescription>
<para>WLI Connect to WEP Open Network interface.<linebreak/>
 This function connects to an WEP Open network.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectionSSID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network SSID to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectionPass</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network Pass Phrase. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">passPhraseLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the Pass Phrase </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectionCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the connection callback. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - API return code for success. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_SSID_NOT_FOUND - Failure because of incorrect SSID. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_WRONG_PASSWORD - Failure because of incorrect Pass phrase. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but ip not acquired </para></simplesect>
<simplesect kind="return"><para>RETCODE_INVALID_PARAM - passPhraseLength is zero</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
Example1 usage: Connect to an WEP Open network with callback (non-blocking) <programlisting><codeline><highlight class="normal">//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">//For<sp/>example<sp/>if<sp/>AP<sp/>is<sp/>configured<sp/>to<sp/>WEP<sp/>with<sp/>40bit<sp/>Hex<sp/>password<sp/>of:<sp/>&quot;FFFFFFFFFF&quot;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>passPhrase[5]<sp/>=<sp/>{<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF<sp/>};</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_Callback_T<sp/>connectCallback;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>passPhraseLength;[Don&apos;t<sp/>use<sp/>strlen()<sp/>in<sp/>order<sp/>not<sp/>to<sp/>bump<sp/>on<sp/>zero/NULL<sp/>in<sp/>the<sp/>passPhrase]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WEP<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WEP-OPEN-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)passPhrase;</highlight></codeline>
<codeline><highlight class="normal">passPhraseLength<sp/>=<sp/>UINT8_C(5);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_WEP_Open(connectSSID,<sp/>connectPassPhrase,passPhraseLength,<sp/>connectCallback);</highlight></codeline>
</programlisting></para><para>Example2 usage: Connect to an WEP Open network in blocking mode <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">//For<sp/>example<sp/>if<sp/>AP<sp/>is<sp/>configured<sp/>to<sp/>WEP<sp/>with<sp/>40bit<sp/>Hex<sp/>password<sp/>of:<sp/>&quot;FFFFFFFFFF&quot;</highlight></codeline>
<codeline><highlight class="normal">char<sp/>passPhrase[5]<sp/>=<sp/>{<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF<sp/>};</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>passPhraseLength;[Don&apos;t<sp/>use<sp/>strlen()<sp/>in<sp/>order<sp/>not<sp/>to<sp/>bump<sp/>on<sp/>zero/NULL<sp/>in<sp/>the<sp/>passPhrase]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WEP<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WEP-OPEN-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)passPhrase;</highlight></codeline>
<codeline><highlight class="normal">passPhraseLength<sp/>=<sp/>UINT8_C(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_WEP_Open(connectSSID,<sp/>connectPassPhrase,passPhraseLength,<sp/>NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga902f69081e1ddb752ba32b51912eb41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_WPA(WlanConnect_SSID_T connectSSID, WlanConnect_PassPhrase_T connectPass, WlanConnect_Callback_T connectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_WPA</declname>
          <array>WlanConnect_SSID_T connectSSID, WlanConnect_PassPhrase_T connectPass, WlanConnect_Callback_T connectCallback</array>
        </param>
        <briefdescription>
<para>WLI Connect to WPA Network interface.<linebreak/>
 This function connects to an WPA2-PSK or WPA-PSK network.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectionSSID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network SSID to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectionPass</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network Pass Phrase. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectionCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the connection callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - API return code for success. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_SSID_NOT_FOUND - Failure because of incorrect SSID. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_WRONG_PASSWORD - Failure because of incorrect Pass phrase. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but ip not acquired</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
Example1 usage: Connect to WPA/WPA2 network with callback (non-blocking) <programlisting><codeline><highlight class="normal">//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_Callback_T<sp/>connectCallback;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WPA/WPA2<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WPA-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)&quot;WPA-PASSWORD&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_WPA(connectSSID,<sp/>connectPassPhrase,<sp/>connectCallback);</highlight></codeline>
</programlisting></para><para>Example2 usage: Connect to WPA/WPA2 network in blocking mode <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WPA/WPA2<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WPA-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)&quot;WPA-PASSWORD&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_WPA(connectSSID,<sp/>connectPassPhrase,<sp/>NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga235ea44122c038371d53fc4404b342bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_WPS_PBC(WlanConnect_Callback_T connectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_WPS_PBC</declname>
          <defname>WlanConnect_WPS_PIN</defname>
          <array>WlanConnect_Callback_T connectCallback</array>
        </param>
        <briefdescription>
<para>WLI Connect using WPS PBC interface.<linebreak/>
 This function connects to a network by using the Wi-Fi Protected Setup. After calling the function the user must push the connect button of the Router for around 5 seconds.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para>WLI Connect using WPS PIN interface.<linebreak/>
 This function connects to a network by using the Wi-Fi Protected Setup. The function is configured with the following enrollee PIN code: 35072317. This PIN must be entered in the router interface after calling the function.<linebreak/>
 Function is configurable in two ways:</para><para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectionCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the connection callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning </para></simplesect>
<simplesect kind="return"><para>RETCODE_OK - API return code for success. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done. </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>RETCODE_CONNECTION_ERROR - connection Failure . </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but ip not acquired</para></simplesect>
Example1 usage: Connect to a wireless network using WPS (WiFi Protected Setup) PBC (Push Button Connect) with callback (non-blocking) <programlisting><codeline><highlight class="normal"><sp/>//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal"><sp/>Retcode_T<sp/>retStatus[3];</highlight></codeline>
<codeline><highlight class="normal"><sp/>WlanConnect_Callback_T<sp/>connectCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal"><sp/>connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Because<sp/>the<sp/>board<sp/>connects<sp/>to<sp/>network<sp/>very<sp/>fast,<sp/>the<sp/>user</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>must<sp/>disconnect<sp/>and<sp/>delete<sp/>all<sp/>stored<sp/>profiles<sp/>before</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>retrying<sp/>to<sp/>connect<sp/>with<sp/>WPS<sp/>PBC</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[0]<sp/>=<sp/>WlanConnect_Disconnect(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Delete<sp/>all<sp/>stored<sp/>profiles<sp/>in<sp/>order<sp/>to<sp/>connect<sp/>WPS<sp/>by<sp/>pushing</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>the<sp/>button<sp/>all<sp/>the<sp/>time.<sp/>Remove<sp/>this<sp/>line<sp/>if<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>keep<sp/>profile<sp/>after<sp/>running<sp/>once<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[1]<sp/>=<sp/>WlanConnect_DeleteAllProfiles();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[2]<sp/>=<sp/>WlanConnect_WPS_PBC(connectCallback);</highlight></codeline>
</programlisting></para><para>Example2 usage: Connect to a wireless network using WPS (WiFi Protected Setup) PBC (Push Button Connect) in blocking mode (without callback) <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus[3];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Because<sp/>the<sp/>board<sp/>connects<sp/>to<sp/>network<sp/>very<sp/>fast,<sp/>the<sp/>user</highlight></codeline>
<codeline><highlight class="normal">//<sp/>must<sp/>disconnect<sp/>and<sp/>delete<sp/>all<sp/>stored<sp/>profiles<sp/>before</highlight></codeline>
<codeline><highlight class="normal">//<sp/>retrying<sp/>to<sp/>connect<sp/>with<sp/>WPS<sp/>PBC</highlight></codeline>
<codeline><highlight class="normal">retStatus[0]<sp/>=<sp/>WlanConnect_Disconnect(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Delete<sp/>all<sp/>stored<sp/>profiles<sp/>in<sp/>order<sp/>to<sp/>connect<sp/>WPS<sp/>by<sp/>pushing</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>button<sp/>all<sp/>the<sp/>time.<sp/>Remove<sp/>this<sp/>line<sp/>if<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal">//<sp/>keep<sp/>profile<sp/>after<sp/>running<sp/>once<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">retStatus[1]<sp/>=<sp/>WlanConnect_DeleteAllProfiles();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus[2]<sp/>=<sp/>WlanConnect_WPS_PBC(NULL);</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectionCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to char containing the connection callback.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - API return code for success. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>RETCODE_CONNECTION_ERROR - Connection Failure because of incorrect Pin. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but IP not acquired</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning Example1 usage: Connect to a wireless network using WPS (WiFi Protected Setup) PIN (Personal Identify. Number) with callback (non-blocking) <programlisting><codeline><highlight class="normal"><sp/>//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal"><sp/>Retcode_T<sp/>retStatus[3];</highlight></codeline>
<codeline><highlight class="normal"><sp/>WlanConnect_Callback_T<sp/>connectCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal"><sp/>connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Because<sp/>the<sp/>board<sp/>connects<sp/>to<sp/>network<sp/>very<sp/>fast,<sp/>the<sp/>user</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>must<sp/>disconnect<sp/>and<sp/>delete<sp/>all<sp/>stored<sp/>profiles<sp/>before</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>retrying<sp/>to<sp/>connect<sp/>with<sp/>WPS<sp/>PIN</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[0]<sp/>=<sp/>WlanConnect_Disconnect(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Delete<sp/>all<sp/>stored<sp/>profiles<sp/>in<sp/>order<sp/>to<sp/>connect<sp/>WPS<sp/>using</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>enrollee<sp/>PIN<sp/>all<sp/>the<sp/>time.<sp/>Remove<sp/>this<sp/>line<sp/>if<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>keep<sp/>profile<sp/>after<sp/>running<sp/>once<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[1]<sp/>=<sp/>WlanConnect_DeleteAllProfiles();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal"><sp/>retStatus[2]<sp/>=<sp/>WlanConnect_WPS_PIN(connectCallback);</highlight></codeline>
</programlisting></para></simplesect>
Example2 usage: Connect to a wireless network using WPS (WiFi Protected Setup) PIN (Personal Identification Number) in blocking mode <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus[3];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Because<sp/>the<sp/>board<sp/>connects<sp/>to<sp/>network<sp/>very<sp/>fast,<sp/>the<sp/>user</highlight></codeline>
<codeline><highlight class="normal">//<sp/>must<sp/>disconnect<sp/>and<sp/>delete<sp/>all<sp/>stored<sp/>profiles<sp/>before</highlight></codeline>
<codeline><highlight class="normal">//<sp/>retrying<sp/>to<sp/>connect<sp/>with<sp/>WPS<sp/>PIN</highlight></codeline>
<codeline><highlight class="normal">retStatus[0]<sp/>=<sp/>WlanConnect_Disconnect(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Delete<sp/>all<sp/>stored<sp/>profiles<sp/>in<sp/>order<sp/>to<sp/>connect<sp/>WPS<sp/>using</highlight></codeline>
<codeline><highlight class="normal">//<sp/>enrollee<sp/>PIN<sp/>all<sp/>the<sp/>time.<sp/>Remove<sp/>this<sp/>line<sp/>if<sp/>you<sp/>want<sp/>to</highlight></codeline>
<codeline><highlight class="normal">//<sp/>keep<sp/>profile<sp/>after<sp/>running<sp/>once<sp/>the<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">retStatus[1]<sp/>=<sp/>WlanConnect_DeleteAllProfiles();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus[2]<sp/>=<sp/>WlanConnect_WPS_PIN(NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="604" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga679f1329bde2d45694cd693cdb3750c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_EnterpriseWPA(WlanConnect_SSID_T connectSSID, WlanConnect_Username_T connectUsername, WlanConnect_PassPhrase_T connectPassPhrase, WlanConnect_Callback_T connectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_EnterpriseWPA</declname>
          <array>WlanConnect_SSID_T connectSSID, WlanConnect_Username_T connectUsername, WlanConnect_PassPhrase_T connectPassPhrase, WlanConnect_Callback_T connectCallback</array>
        </param>
        <briefdescription>
<para>WLI Connect to Enterprise WPA Network interface.<linebreak/>
 This function connects to an WPA2-PSK or WPA-PSK network.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>blocking : callback parameter is set to <ref refid="group___user_events_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL(maximum blocking in error case will be 15seconds)</ref></para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">connectionSSID</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network SSID to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectUsername</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network Username to connect to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">connectionPass</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to char containing the network Pass Phrase. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockingCall</parametername>
</parameternamelist>
<parameterdescription>
<para>bool value to define the calling type as blocking or non-blocking</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - API return code for success. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that the WLI connection is done </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - Failure returned by simplelink API. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_SSID_NOT_FOUND - Failure because of incorrect SSID. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_WRONG_PASSWORD - Failure because of incorrect Pass phrase. </para></simplesect>
<simplesect kind="return"><para>RETCODE_ERROR_IP_NOT_ACQ - Connected but ip not acquired</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning</para></simplesect>
<simplesect kind="note"><para>It uses index 0 for certificate. The Host must have been programmed with the certificate in this Index prior. It uses PEAP0-MSCHAPv2 as EAP method. It uses the connectUsername for default and anonymous user names</para></simplesect>
Example1 usage: Connect to Enterprise WPA/WPA2 network with callback (non-blocking) <programlisting><codeline><highlight class="normal">//<sp/>Callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">void<sp/>myConnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLI_CONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>connection<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Connect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>User<sp/>may<sp/>add<sp/>logic<sp/>once<sp/>the<sp/>connection<sp/>is<sp/>done</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>E.g<sp/>launch<sp/>another<sp/>OS<sp/>Timer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>user<sp/>may<sp/>retry<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WPA/WPA2<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WPA-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectUsername<sp/>=<sp/>(WlanConnect_Username_T)&quot;WPA-USERNAME-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)&quot;WPA-PASSWORD&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>callback<sp/>functions</highlight></codeline>
<codeline><highlight class="normal">connectCallback<sp/>=<sp/>myConnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>non<sp/>blocking<sp/>function<sp/>with<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_EnterpriseWPA(connectSSID,<sp/>connectUsername,<sp/>connectPassPhrase,<sp/>myConnectCallbackFunc);</highlight></codeline>
</programlisting></para><para>Example2 usage: Connect to Enterprise WPA/WPA2 network in blocking mode <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_SSID_T<sp/>connectSSID;</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_PassPhrase_T<sp/>connectPassPhrase;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>WPA/WPA2<sp/>encrypted<sp/>wireless<sp/>network<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">connectSSID<sp/>=<sp/>(WlanConnect_SSID_T)&quot;WPA-NETWORK-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectUsername<sp/>=<sp/>(WlanConnect_Username_T)&quot;WPA-USERNAME-NAME&quot;;</highlight></codeline>
<codeline><highlight class="normal">connectPassPhrase<sp/>=<sp/>(WlanConnect_PassPhrase_T)&quot;WPA-PASSWORD&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Connect<sp/>to<sp/>network<sp/>--&gt;<sp/>blocking<sp/>function<sp/>without<sp/>callback</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_EnterpriseWPA(connectSSID,<sp/>connectUsername,<sp/>connectPassPhrase,<sp/>NULL);</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="779" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga46cbfb3c6915d8371b2cb3a574bfdeea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_Disconnect(WlanConnect_DisconnectCallback_T disconnectCallback))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_Disconnect</declname>
          <array>WlanConnect_DisconnectCallback_T disconnectCallback</array>
        </param>
        <briefdescription>
<para>WLI disconnect interface.<linebreak/>
 This function disconnects from the WLAN network.<linebreak/>
 Function is configurable in two ways: </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>blocking : callback parameter is set to WLI_NULL(maximum blocking in error case will be 15seconds)</para></listitem><listitem><para>non-blocking : callback parameter is set to the address of the user function</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">disconnectCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user function callback<linebreak/>
 Returns the WLI connection status as a parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK successfully disconnected from Access point. In case of API success return value after calling a blocking function, the WLI_SUCCESS implicitly confirms to the user that WLAN disconnection is done. </para></simplesect>
<simplesect kind="return"><para>RETCODE_DISCONNECT_ERROR Error in disconnecting</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning Example1 usage: Disconnect with callback (non-blocking) <programlisting><codeline><highlight class="normal">void<sp/>myDisconnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLAN_DISCONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>disconnection<sp/>successfully<sp/>from<sp/>WlanConnect_Disconnect<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>Disconnect<sp/>OK!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//user<sp/>can<sp/>retry</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_DisconnectCallback_T<sp/>disconnectCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>disconnect<sp/>callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">disconnectCallback<sp/>=<sp/>myDisconnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>disconnect<sp/>from<sp/>network<sp/>with<sp/>callback<sp/>--&gt;<sp/>non-blocking</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_Disconnect(disconnectCallback);</highlight></codeline>
</programlisting></para></simplesect>
Example2 usage: Disconnect without callback <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>disconnect<sp/>from<sp/>network<sp/>in<sp/>blocking<sp/>mode</highlight></codeline>
<codeline><highlight class="normal">retStatus<sp/>=<sp/>WlanConnect_Disconnect(NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(RETCODE_OK<sp/>==<sp/>retStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Disconnect<sp/>has<sp/>completed<sp/>successfully</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Disconnected<sp/>successfully!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="874" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga17931f4a0c1987c514a07e92a9323534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(Retcode_T WlanConnect_ScanNetworks(WlanConnect_ScanInterval_T scanInterval, WlanConnect_ScanList_T *scanList))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref> </type>
          <declname>WlanConnect_ScanNetworks</declname>
          <array>WlanConnect_ScanInterval_T scanInterval, WlanConnect_ScanList_T *scanList</array>
        </param>
        <briefdescription>
<para>Function used to scan the available networks.<linebreak/>
 Get the available scan information.<linebreak/>
 List of scan results will be available via the call back function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">scanInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>Time interval between network scan.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">scanList</parametername>
</parameternamelist>
<parameterdescription>
<para>Structure pointer hold the WLI scan information data.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RETCODE_OK - scan done successful. </para></simplesect>
<simplesect kind="return"><para>RETCODE_SIMPLELINK_ERROR - scan was not successful. </para></simplesect>
<simplesect kind="return"><para>RETCODE_NO_NW_AVAILABLE - No network available to scan.</para></simplesect>
<simplesect kind="return"><para>Retcode_T The return value consist of (First 1 MSByte represents Package ID, Next Byte represents Severity and Last 2 LSBytes represents error code) Below shows the error code(last 2 Bytes) meaning Example usage: Scan networks and print SSIDs <programlisting><codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">WLI_scanReturnCode_t<sp/>retScanStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_ScanInterval_T<sp/>scanInterval;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_ScanList_T<sp/>scanList;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>scan<sp/>interval</highlight></codeline>
<codeline><highlight class="normal">scanInterval<sp/>=<sp/>5;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Fill<sp/>out<sp/>the<sp/>scan<sp/>list<sp/>by<sp/>calling<sp/>the<sp/>scan<sp/>network<sp/>function</highlight></codeline>
<codeline><highlight class="normal">retScanStatus<sp/>=<sp/>WlanConnect_ScanNetworks(scanInterval,<sp/>&amp;scanList);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>number<sp/>of<sp/>entries</highlight></codeline>
<codeline><highlight class="normal">int<sp/>nbEntries<sp/>=<sp/>scanList.numOfScanEntries;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Print<sp/>all<sp/>the<sp/>non-empty<sp/>SSIDs</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nbEntries;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(0<sp/>!=<sp/>scanList.scanData[i].ssidLength)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;<sp/>-<sp/>found<sp/>SSID<sp/>number<sp/>%d<sp/>is<sp/>:<sp/>%s\n\r&quot;,<sp/>i,<sp/>scanList.scanData[i].ssid);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Delay<sp/>each<sp/>printf<sp/>with<sp/>0,5<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(DELAY_500_MSEC);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="926" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc0764c00853195514dae667ce8dc821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(WlanConnect_CurrentNwStatus_T WlanConnect_GetCurrentNwStatus(void))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7064a8ca9a95c1fac44bd2b7619c2579" kindref="member">WlanConnect_CurrentNwStatus_T</ref> </type>
          <declname>WlanConnect_GetCurrentNwStatus</declname>
          <array>void</array>
        </param>
        <briefdescription>
<para>Function to get the current network status This function sets a disconnect callback which is used to notify the user that there has been a disconnection that was not triggered by the user.ed on connection status. </para>        </briefdescription>
        <detaileddescription>
<para>This API must be called only after initialization</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">allDisconnectCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to user function callback. Returns the WLI connection status as a parameter.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CONNECTED_AND_IPV4_ACQUIRED - currently WLAN connected and IP acquired. </para></simplesect>
<simplesect kind="return"><para>CONNECTED_AND_IP_NOT_ACQUIRED - currently WLAN connected and IP not acquired. </para></simplesect>
<simplesect kind="return"><para>DISCONNECTED_AND_IPV4_ACQUIRED - currently WLAN disconnected and IP acquired </para></simplesect>
<simplesect kind="return"><para>DISCONNECTED_IP_NOT_ACQUIRED - currently WLAN disconnected and IP not acquired.</para></simplesect>
Example usage: Get current status of a network and set a callback for any disconnect events <programlisting><codeline><highlight class="normal">void<sp/>myAllDisconnectCallbackFunc(WlanConnect_ConnectionStatus_T<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(WLI_DISCONNECTED<sp/>==<sp/>returnStatus)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Network<sp/>disconnection<sp/>successfully<sp/>from<sp/>WlanConnect_Disconnect<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Callback<sp/>Function<sp/>:<sp/>A<sp/>disconnect<sp/>event<sp/>has<sp/>happened!\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>local<sp/>variables</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retStatus;</highlight></codeline>
<codeline><highlight class="normal">WlanConnect_DisconnectCallback_T<sp/>myAllDisconnectCallback;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Set<sp/>callback<sp/>function</highlight></codeline>
<codeline><highlight class="normal">myAllDisconnectCallback<sp/>=<sp/>myAllDisconnectCallbackFunc;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(DISCONNECTED_IP_NOT_ACQUIRED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>!=<sp/>WlanConnect_GetCurrentNwStatus()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>&amp;&amp;<sp/>(DISCONNECTED_AND_IPV4_ACQUIRED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>!=<sp/>WlanConnect_GetCurrentNwStatus()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>retStatus<sp/>=<sp/>WlanConnect_Disconnect(myAllDisconnectCallback);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Finished<sp/>disconnection<sp/>successfully<sp/>\n\r&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="976" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gab2e3f3bb4db373d32cdcb50140b79b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(WlanConnect_Status_T WlanConnect_GetStatus(void))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" kindref="member">WlanConnect_Status_T</ref> </type>
          <declname>WlanConnect_GetStatus</declname>
          <array>void</array>
        </param>
        <briefdescription>
<para>Function to get the connection status.<linebreak/>
 This function return the connection status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WLI_CONNECTED - WLI connected obtained after calling connect function. </para></simplesect>
<simplesect kind="return"><para>WLI_DISCONNECTED - WLI disconnected obtained after calling disconnect function.</para></simplesect>
Example usage: Block until IP status is acquired and Wlan is connected <programlisting><codeline><highlight class="normal">while<sp/>((WLI_DISCONNECTED<sp/>==<sp/>WlanConnect_GetStatus())</highlight></codeline>
<codeline><highlight class="normal"><sp/>||<sp/>(NETWORKCONFIG_IP_NOT_ACQUIRED<sp/>==<sp/>NetworkConfig_GetIpStatus()))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Stay<sp/>here<sp/>until<sp/>connected<sp/>and<sp/>ip<sp/>acquired.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Timeout<sp/>logic<sp/>can<sp/>be<sp/>added<sp/>here.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="warning"><para>This API must be called only after initialization </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="1001" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7678f8b852d3232b68e51f83b980156e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BCDS_DEPRECATED</definition>
        <argsstring>(uint8_t WlanConnect_GetInitStatus(void))</argsstring>
        <name>BCDS_DEPRECATED</name>
        <param>
          <type>uint8_t </type>
          <declname>WlanConnect_GetInitStatus</declname>
          <array>void</array>
        </param>
        <briefdescription>
<para>Function to get the connection status.<linebreak/>
 This function return the connection status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>WLANCONNECT_INITIALZED - Wlan module is initialized. </para></simplesect>
<simplesect kind="return"><para>WLANCONNECT_NOT_INITIALZED - Wlan module is not initialized. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h" line="1012" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>Licensee<sp/>agrees<sp/>that<sp/>the<sp/>example<sp/>code<sp/>provided<sp/>to<sp/>Licensee<sp/>has<sp/>been<sp/>developed<sp/>and<sp/>released<sp/>by<sp/>Bosch<sp/>solely<sp/>as<sp/>an<sp/>example<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>potential<sp/>reference<sp/>for<sp/>application<sp/>development<sp/>by<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Fitness<sp/>and<sp/>suitability<sp/>of<sp/>the<sp/>example<sp/>code<sp/>for<sp/>any<sp/>use<sp/>within<sp/>application<sp/>developed<sp/>by<sp/>Licensee<sp/>need<sp/>to<sp/>be<sp/>verified<sp/>by<sp/>Licensee<sp/>on<sp/>its<sp/>own<sp/>authority<sp/>by<sp/>taking<sp/>appropriate<sp/>state<sp/>of<sp/>the<sp/>art<sp/>actions<sp/>and<sp/>measures<sp/>(e.g.<sp/>by<sp/>means<sp/>of<sp/>quality<sp/>assurance<sp/>measures).</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>for<sp/>conducting<sp/>the<sp/>development<sp/>of<sp/>its<sp/>applications<sp/>as<sp/>well<sp/>as<sp/>integration<sp/>of<sp/>parts<sp/>of<sp/>the<sp/>example<sp/>code<sp/>into<sp/>such<sp/>applications,<sp/>taking<sp/>into<sp/>account<sp/>the<sp/>state<sp/>of<sp/>the<sp/>art<sp/>of<sp/>technology<sp/>and<sp/>any<sp/>statutory<sp/>regulations<sp/>and<sp/>provisions<sp/>applicable<sp/>for<sp/>such<sp/>applications.<sp/>Compliance<sp/>with<sp/>the<sp/>functional<sp/>system<sp/>requirements<sp/>and<sp/>testing<sp/>there<sp/>of<sp/>(including<sp/>validation<sp/>of<sp/>information/data<sp/>security<sp/>aspects<sp/>and<sp/>functional<sp/>safety)<sp/>and<sp/>release<sp/>shall<sp/>be<sp/>solely<sp/>incumbent<sp/>upon<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/>For<sp/>the<sp/>avoidance<sp/>of<sp/>doubt,<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>and<sp/>fully<sp/>liable<sp/>for<sp/>the<sp/>applications<sp/>and<sp/>any<sp/>distribution<sp/>of<sp/>such<sp/>applications<sp/>into<sp/>the<sp/>market.</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(1)<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(2)<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>distribution.<sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(3)The<sp/>name<sp/>of<sp/>the<sp/>author<sp/>may<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*<sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="34"><highlight class="comment">*<sp/><sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment">*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="36"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>Bosch<sp/>Connected<sp/>Devices<sp/>and<sp/>Solutions<sp/>GmbH.</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>All<sp/>Rights<sp/>Reserved.<sp/>Confidential.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>Distribution<sp/>only<sp/>to<sp/>people<sp/>who<sp/>need<sp/>to<sp/>know<sp/>this<sp/>information<sp/>in</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>order<sp/>to<sp/>do<sp/>their<sp/>job.(Need-to-know<sp/>principle).</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Distribution<sp/>to<sp/>persons<sp/>outside<sp/>the<sp/>company,<sp/>only<sp/>if<sp/>these<sp/>persons</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>signed<sp/>a<sp/>non-disclosure<sp/>agreement.</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>Electronic<sp/>transmission,<sp/>e.g.<sp/>via<sp/>electronic<sp/>mail,<sp/>must<sp/>be<sp/>made<sp/>in</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>encrypted<sp/>form.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="comment">/*<sp/>header<sp/>definition<sp/>********************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BCDS_WLANCONNECT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BCDS_WLANCONNECT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>interface<sp/>declaration<sp/>*********************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_c_d_s___basics_8h" kindref="compound">BCDS_Basics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_c_d_s___retcode_8h" kindref="compound">BCDS_Retcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_c_d_s___network_config_8h" kindref="compound">BCDS_NetworkConfig.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_c_d_s___wlan_network_connect_8h" kindref="compound">BCDS_WlanNetworkConnect.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>type<sp/>and<sp/>macro<sp/>definitions<sp/>****************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf8a2cb3d5c7218281612c86d54a37213" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WLANCONNECT_MAX_SCAN_INFO_BUF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(20)<sp/></highlight></codeline>
<codeline lineno="76" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga155d053525d0fb688587248b9fedae23" refkind="member"><highlight class="preprocessor">#define<sp/>WLANCONNECT_MAX_SSID_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(32)<sp/></highlight></codeline>
<codeline lineno="77" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga58ec0627311bb29cb08c4cd2b74eeb0f" refkind="member"><highlight class="preprocessor">#define<sp/>WLANCONNECT_MAX_MAC_ADDR_LEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(6)<sp/></highlight></codeline>
<codeline lineno="78" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga9022be429b4293f7bcd4a2eaad3d1562" refkind="member"><highlight class="preprocessor">#define<sp/>WLANCONNECT_ENROLLEE_PIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;35072317&quot;<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor">#define<sp/>WLANCONNECT_DUMMY_SSID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;XDK110&quot;<sp/></highlight></codeline>
<codeline lineno="81" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8182ff3bdd2b2dc31e7403ca0b1d6197" refkind="member"><highlight class="preprocessor">#define<sp/>WLANCONNECT_INITIALZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(1)<sp/></highlight></codeline>
<codeline lineno="82" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gad4413716f81083350408ba189f87fe1f" refkind="member"><highlight class="preprocessor">#define<sp/>WLANCONNECT_NOT_INITIALZED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0)<sp/></highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor">enum<sp/>WlanConnect_Retcode_E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5936cd0b0e4650ee879b91b4388ccd40" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a970303d0b9f3e80c90027336cceef105" kindref="member">RETCODE_SIMPLELINK_STOP_FAILED</ref><sp/>=<sp/>75,</highlight></codeline>
<codeline lineno="92" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a970303d0b9f3e80c90027336cceef105" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a94ea21e7455b6b9491788b3aa96d37f7" kindref="member">RETCODE_SIMPLELINK_STA_MODE_FAILED</ref><sp/>=<sp/>76</highlight></codeline>
<codeline lineno="93" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gga5936cd0b0e4650ee879b91b4388ccd40a94ea21e7455b6b9491788b3aa96d37f7" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gacde04487fc6749f6a03f4fa32a975ad6" kindref="member">WlanConnect_Status_E</ref></highlight></codeline>
<codeline lineno="96" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gacde04487fc6749f6a03f4fa32a975ad6" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a8ed44f0212d22786740a22ba5b0ce556" kindref="member">WLAN_CONNECTED</ref>,</highlight></codeline>
<codeline lineno="98" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a8ed44f0212d22786740a22ba5b0ce556" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6aad379dae4c66e39bd383da137acbcee4" kindref="member">WLAN_DISCONNECTED</ref>,</highlight></codeline>
<codeline lineno="99" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6aad379dae4c66e39bd383da137acbcee4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a0f3e5485bd2077daa8010491012f7f6b" kindref="member">WLAN_CONNECTION_ERROR</ref>,</highlight></codeline>
<codeline lineno="100" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a0f3e5485bd2077daa8010491012f7f6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a3e9b0523a8d01c9bcbe90f663356de66" kindref="member">WLAN_CONNECTION_PWD_ERROR</ref>,</highlight></codeline>
<codeline lineno="101" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a3e9b0523a8d01c9bcbe90f663356de66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a274cda9ec5d58024b59704076acef3ef" kindref="member">WLAN_DISCONNECT_ERROR</ref>,</highlight></codeline>
<codeline lineno="102" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggacde04487fc6749f6a03f4fa32a975ad6a274cda9ec5d58024b59704076acef3ef" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gacde04487fc6749f6a03f4fa32a975ad6" kindref="member">WlanConnect_Status_E</ref><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" kindref="member">WlanConnect_Status_T</ref>;</highlight></codeline>
<codeline lineno="104" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc4f8903f62ab24d2878c20cb669c61d" kindref="member">WlanConnect_CurrentStatus_E</ref></highlight></codeline>
<codeline lineno="106" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc4f8903f62ab24d2878c20cb669c61d" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da20ab27345c4aaf1656409add757075ea" kindref="member">CONNECTED_AND_IPV4_ACQUIRED</ref><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="108" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da20ab27345c4aaf1656409add757075ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da009901d3eb7461917089f257dc8b0c21" kindref="member">CONNECTED_AND_IP_NOT_ACQUIRED</ref><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="109" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da009901d3eb7461917089f257dc8b0c21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da2b84c36cd8b1c8c93a906720cd20682e" kindref="member">DISCONNECTED_AND_IPV4_ACQUIRED</ref><sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="110" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da2b84c36cd8b1c8c93a906720cd20682e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da7916d45927ea1483cf47cf3dcfca8c84" kindref="member">DISCONNECTED_IP_NOT_ACQUIRED</ref><sp/>=<sp/>0x03,</highlight></codeline>
<codeline lineno="111" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ggadc4f8903f62ab24d2878c20cb669c61da7916d45927ea1483cf47cf3dcfca8c84" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gadc4f8903f62ab24d2878c20cb669c61d" kindref="member">WlanConnect_CurrentStatus_E</ref><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7064a8ca9a95c1fac44bd2b7619c2579" kindref="member">WlanConnect_CurrentNwStatus_T</ref>;</highlight></codeline>
<codeline lineno="113" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7064a8ca9a95c1fac44bd2b7619c2579" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="118"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>char<sp/>(*<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" kindref="member">WlanConnect_SSID_T</ref>);</highlight></codeline>
<codeline lineno="119" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="124"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>char<sp/>(*<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf59d068304c06bac80566d2040681f58" kindref="member">WlanConnect_Username_T</ref>);</highlight></codeline>
<codeline lineno="125" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf59d068304c06bac80566d2040681f58" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="130"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>char<sp/>(*<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" kindref="member">WlanConnect_PassPhrase_T</ref>);</highlight></codeline>
<codeline lineno="131" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="136"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga9d725caefd919a8a7011fc5065608fc6" kindref="member">long</ref><sp/>(WlanConnect_ScanInterval_T);</highlight></codeline>
<codeline lineno="137" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga9d725caefd919a8a7011fc5065608fc6" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="142"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_wlan_connect___scan_info___s" kindref="compound">WlanConnect_ScanInfo_S</ref></highlight></codeline>
<codeline lineno="143" refid="struct_wlan_connect___scan_info___s" refkind="compound"><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_wlan_connect___scan_info___s_1ab7dc65519eaf0f727ab8a6d6355bc71a" kindref="member">Ssid</ref>[<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga155d053525d0fb688587248b9fedae23" kindref="member">WLANCONNECT_MAX_SSID_LENGTH</ref>];<sp/></highlight></codeline>
<codeline lineno="145" refid="struct_wlan_connect___scan_info___s_1ab7dc65519eaf0f727ab8a6d6355bc71a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_wlan_connect___scan_info___s_1aedbd16473e6c1f213770d1a612de939c" kindref="member">SsidLength</ref>;<sp/></highlight></codeline>
<codeline lineno="146" refid="struct_wlan_connect___scan_info___s_1aedbd16473e6c1f213770d1a612de939c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_wlan_connect___scan_info___s_1ada1596fa8ba8f13880f0aeb340162c4a" kindref="member">SecurityType</ref>;<sp/></highlight></codeline>
<codeline lineno="147" refid="struct_wlan_connect___scan_info___s_1ada1596fa8ba8f13880f0aeb340162c4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_wlan_connect___scan_info___s_1a6bb52f4408d73addbc59649976ca1b03" kindref="member">Bssid</ref>[<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga58ec0627311bb29cb08c4cd2b74eeb0f" kindref="member">WLANCONNECT_MAX_MAC_ADDR_LEN</ref>];<sp/></highlight></codeline>
<codeline lineno="148" refid="struct_wlan_connect___scan_info___s_1a6bb52f4408d73addbc59649976ca1b03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/><ref refid="struct_wlan_connect___scan_info___s_1a595a0659af5896f6aed1aaa0a7d0e0b4" kindref="member">Rssi</ref>;<sp/></highlight></codeline>
<codeline lineno="149" refid="struct_wlan_connect___scan_info___s_1a595a0659af5896f6aed1aaa0a7d0e0b4" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_wlan_connect___scan_info___s" kindref="compound">WlanConnect_ScanInfo_S</ref><sp/><ref refid="struct_wlan_connect___scan_info___s" kindref="compound">WlanConnect_ScanInfo_T</ref>;</highlight></codeline>
<codeline lineno="151" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5ed5ab171ed4c0b869c5491c46368702" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="157"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_wlan_connect___scan_list___s" kindref="compound">WlanConnect_ScanList_S</ref></highlight></codeline>
<codeline lineno="158" refid="struct_wlan_connect___scan_list___s" refkind="compound"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/><ref refid="struct_wlan_connect___scan_list___s_1ab3bb144a40665f825a9f88d03f5c7025" kindref="member">NumOfScanEntries</ref>;<sp/></highlight></codeline>
<codeline lineno="160" refid="struct_wlan_connect___scan_list___s_1ab3bb144a40665f825a9f88d03f5c7025" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_wlan_connect___scan_list___s_1ae5496f262c20f5fff03194f25526ce90" kindref="member">TimeStamp</ref>;<sp/></highlight></codeline>
<codeline lineno="161" refid="struct_wlan_connect___scan_list___s_1ae5496f262c20f5fff03194f25526ce90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_wlan_connect___scan_info___s" kindref="compound">WlanConnect_ScanInfo_T</ref><sp/><ref refid="struct_wlan_connect___scan_list___s_1a3719e3c9bf3a4d8d15a2e5802521f608" kindref="member">ScanData</ref>[<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf8a2cb3d5c7218281612c86d54a37213" kindref="member">WLANCONNECT_MAX_SCAN_INFO_BUF</ref>];<sp/></highlight></codeline>
<codeline lineno="162" refid="struct_wlan_connect___scan_list___s_1a3719e3c9bf3a4d8d15a2e5802521f608" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_wlan_connect___scan_list___s" kindref="compound">WlanConnect_ScanList_S</ref><sp/><ref refid="struct_wlan_connect___scan_list___s" kindref="compound">WlanConnect_ScanList_T</ref>;</highlight></codeline>
<codeline lineno="164" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga1ddaa83623800239c6b2381ac4f4d4e1" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="170"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref>)(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" kindref="member">WlanConnect_Status_T</ref><sp/>connectStatus);</highlight></codeline>
<codeline lineno="171" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="178"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga96043d40ccd7ca91671ca1409fe5b113" kindref="member">WlanConnect_DisconnectCallback_T</ref>)(</highlight></codeline>
<codeline lineno="179" refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga96043d40ccd7ca91671ca1409fe5b113" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" kindref="member">WlanConnect_Status_T</ref><sp/>discconnectStatus);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>function<sp/>prototype<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1aedc3e3e198474548cde441070dff7f52" kindref="member">WlanConnect_Init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1a3c710b947527d86a6347634340353237" kindref="member">WlanConnect_DeInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1a465235bdbbcd96b17389fb9a12875b6a" kindref="member">WlanConnect_Open</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" kindref="member">WlanConnect_SSID_T</ref><sp/>connectSSID,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1af65d9ac0f02489ae99a5e40e5bd38588" kindref="member">WlanConnect_WEP_Open</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" kindref="member">WlanConnect_SSID_T</ref><sp/>connectSSID,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" kindref="member">WlanConnect_PassPhrase_T</ref><sp/>connectPass,uint8_t<sp/>passPhraseLength,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1ac52437d88ce199ce1d49baba8938af8d" kindref="member">WlanConnect_WPA</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" kindref="member">WlanConnect_SSID_T</ref><sp/>connectSSID,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" kindref="member">WlanConnect_PassPhrase_T</ref><sp/>connectPass,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1a5d20c403ef7d79b6ce38888545501643" kindref="member">WlanConnect_WPS_PBC</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1aef0cbcc48d0069bdc3f8fe30133864a9" kindref="member">WlanConnect_WPS_PIN</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1aa63bfe8d9118a1300b0c1bc3c897f7d3" kindref="member">WlanConnect_EnterpriseWPA</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8fa22d19722edf04fdad3598fc52c347" kindref="member">WlanConnect_SSID_T</ref><sp/>connectSSID,<sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gaf59d068304c06bac80566d2040681f58" kindref="member">WlanConnect_Username_T</ref><sp/>connectUsername,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gafede7bdeba520d6b863aee49da9de08b" kindref="member">WlanConnect_PassPhrase_T</ref><sp/>connectPassPhrase,<sp/><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga8192a4d3c30b9c2b3df59db3dd7d0a77" kindref="member">WlanConnect_Callback_T</ref><sp/>connectCallback));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1a4e9d8d1671b1a81d2c677e506eed20e0" kindref="member">WlanConnect_DeleteAllProfiles</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1aea24a59e30c0ff0fce2beeb63af11e55" kindref="member">WlanConnect_Disconnect</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga96043d40ccd7ca91671ca1409fe5b113" kindref="member">WlanConnect_DisconnectCallback_T</ref><sp/>disconnectCallback));</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="_wlan_connect_8c_1abbdb496ce3db76ba6ad9a3882e1a41cc" kindref="member">WlanConnect_ScanNetworks</ref>(WlanConnect_ScanInterval_T<sp/>scanInterval,</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_wlan_connect___scan_list___s" kindref="compound">WlanConnect_ScanList_T</ref>*<sp/>scanList));</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga7064a8ca9a95c1fac44bd2b7619c2579" kindref="member">WlanConnect_CurrentNwStatus_T</ref><sp/><ref refid="_wlan_connect_8c_1a6a914b5a1194727e7856a12b76566974" kindref="member">WlanConnect_GetCurrentNwStatus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">/******************************************************************************/</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(<ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1gabb6102e0677e351920b736bbfb0f82ad" kindref="member">WlanConnect_Status_T</ref><sp/><ref refid="_wlan_connect_8c_1a0b1e8ed24b54dff3dcc6df9af99d1868" kindref="member">WlanConnect_GetStatus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><ref refid="group___b_c_d_s___w_l_a_n___c_o_n_n_e_c_t_1ga5a88f559b5f9cae9ac0e94bbe75082a8" kindref="member">BCDS_DEPRECATED</ref>(uint8_t<sp/><ref refid="_wlan_connect_8c_1a5519f22f26952970030f6840b9f64f19" kindref="member">WlanConnect_GetInitStatus</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>global<sp/>variable<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inline<sp/>function<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BCDS_WLANCONNECT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="comment">/******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/legacy/include/BCDS_WlanConnect.h"/>
  </compounddef>
</doxygen>
