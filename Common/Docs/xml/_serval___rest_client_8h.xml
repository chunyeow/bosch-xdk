<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___rest_client_8h" kind="file">
    <compoundname>Serval_RestClient.h</compoundname>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___rest_8h" local="no">Serval_Rest.h</includes>
    <includes refid="_serval___msg_8h" local="no">Serval_Msg.h</includes>
    <includes refid="_serval___security_8h" local="no">Serval_Security.h</includes>
    <incdepgraph>
      <node id="31313">
        <label>stdbool.h</label>
      </node>
      <node id="31306">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="31307" relation="include">
        </childnode>
        <childnode refid="31347" relation="include">
        </childnode>
      </node>
      <node id="31317">
        <label>stdarg.h</label>
      </node>
      <node id="31344">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31329">
        <label>list.h</label>
      </node>
      <node id="31331">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="31332" relation="include">
        </childnode>
        <childnode refid="31311" relation="include">
        </childnode>
        <childnode refid="31310" relation="include">
        </childnode>
      </node>
      <node id="31350">
        <label>Serval_StringDescr.h</label>
        <link refid="_serval___string_descr_8h"/>
        <childnode refid="31306" relation="include">
        </childnode>
      </node>
      <node id="31309">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="31310" relation="include">
        </childnode>
      </node>
      <node id="31303">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h</label>
        <link refid="Serval_RestClient.h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31305" relation="include">
        </childnode>
        <childnode refid="31351" relation="include">
        </childnode>
        <childnode refid="31360" relation="include">
        </childnode>
      </node>
      <node id="31312">
        <label>stdint.h</label>
      </node>
      <node id="31310">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="31311" relation="include">
        </childnode>
      </node>
      <node id="31315">
        <label>stdlib.h</label>
      </node>
      <node id="31347">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="31349">
        <label>Serval_Policy.h</label>
        <link refid="_serval___policy_8h"/>
      </node>
      <node id="31323">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="31326">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="31327" relation="include">
        </childnode>
      </node>
      <node id="31334">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="31336">
        <label>user.h</label>
      </node>
      <node id="31330">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="31310" relation="include">
        </childnode>
        <childnode refid="31331" relation="include">
        </childnode>
        <childnode refid="31334" relation="include">
        </childnode>
      </node>
      <node id="31305">
        <label>Serval_Rest.h</label>
        <link refid="_serval___rest_8h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31348" relation="include">
        </childnode>
        <childnode refid="31359" relation="include">
        </childnode>
        <childnode refid="31351" relation="include">
        </childnode>
      </node>
      <node id="31337">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31354">
        <label>Serval_Callable.h</label>
        <link refid="_serval___callable_8h"/>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31355" relation="include">
        </childnode>
      </node>
      <node id="31360">
        <label>Serval_Security.h</label>
        <link refid="_serval___security_8h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31351" relation="include">
        </childnode>
        <childnode refid="31307" relation="include">
        </childnode>
        <childnode refid="31361" relation="include">
        </childnode>
      </node>
      <node id="31361">
        <label>Serval_MsgSendingCtx.h</label>
        <link refid="_serval___msg_sending_ctx_8h"/>
        <childnode refid="31349" relation="include">
        </childnode>
      </node>
      <node id="31321">
        <label>stddef.h</label>
      </node>
      <node id="31339">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31319">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="31320" relation="include">
        </childnode>
        <childnode refid="31322" relation="include">
        </childnode>
        <childnode refid="31326" relation="include">
        </childnode>
        <childnode refid="31328" relation="include">
        </childnode>
      </node>
      <node id="31308">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="31309" relation="include">
        </childnode>
        <childnode refid="31311" relation="include">
        </childnode>
        <childnode refid="31316" relation="include">
        </childnode>
        <childnode refid="31317" relation="include">
        </childnode>
        <childnode refid="31318" relation="include">
        </childnode>
        <childnode refid="31315" relation="include">
        </childnode>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31319" relation="include">
        </childnode>
        <childnode refid="31330" relation="include">
        </childnode>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31316">
        <label>limits.h</label>
      </node>
      <node id="31351">
        <label>Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31350" relation="include">
        </childnode>
        <childnode refid="31352" relation="include">
        </childnode>
        <childnode refid="31353" relation="include">
        </childnode>
        <childnode refid="31354" relation="include">
        </childnode>
        <childnode refid="31356" relation="include">
        </childnode>
        <childnode refid="31349" relation="include">
        </childnode>
        <childnode refid="31358" relation="include">
        </childnode>
      </node>
      <node id="31348">
        <label>Serval_Http.h</label>
        <link refid="_serval___http_8h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31349" relation="include">
        </childnode>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31350" relation="include">
        </childnode>
        <childnode refid="31351" relation="include">
        </childnode>
      </node>
      <node id="31325">
        <label>portable.h</label>
      </node>
      <node id="31333">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="31314">
        <label>string.h</label>
      </node>
      <node id="31332">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="31333" relation="include">
        </childnode>
        <childnode refid="31310" relation="include">
        </childnode>
      </node>
      <node id="31355">
        <label>Serval_StructCtx.h</label>
        <link refid="_serval___struct_ctx_8h"/>
        <childnode refid="31321" relation="include">
        </childnode>
      </node>
      <node id="31311">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="31312" relation="include">
        </childnode>
        <childnode refid="31313" relation="include">
        </childnode>
        <childnode refid="31314" relation="include">
        </childnode>
        <childnode refid="31315" relation="include">
        </childnode>
      </node>
      <node id="31358">
        <label>Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="31306" relation="include">
        </childnode>
        <childnode refid="31349" relation="include">
        </childnode>
        <childnode refid="31351" relation="include">
        </childnode>
      </node>
      <node id="31356">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="31357" relation="include">
        </childnode>
        <childnode refid="31306" relation="include">
        </childnode>
      </node>
      <node id="31324">
        <label>projdefs.h</label>
      </node>
      <node id="31346">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="31357">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="31310" relation="include">
        </childnode>
      </node>
      <node id="31345">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31353">
        <label>Serval_Filesystem.h</label>
        <link refid="_serval___filesystem_8h"/>
        <childnode refid="31306" relation="include">
        </childnode>
      </node>
      <node id="31304">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="31359">
        <label>Serval_Coap.h</label>
        <link refid="_serval___coap_8h"/>
        <childnode refid="31304" relation="include">
        </childnode>
        <childnode refid="31349" relation="include">
        </childnode>
      </node>
      <node id="31341">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31327">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="31342">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31352">
        <label>Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="31350" relation="include">
        </childnode>
      </node>
      <node id="31340">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31328">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="31329" relation="include">
        </childnode>
      </node>
      <node id="31343">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31322">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="31312" relation="include">
        </childnode>
        <childnode refid="31309" relation="include">
        </childnode>
        <childnode refid="31323" relation="include">
        </childnode>
      </node>
      <node id="31307">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="31308" relation="include">
        </childnode>
      </node>
      <node id="31320">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="31321" relation="include">
        </childnode>
        <childnode refid="31312" relation="include">
        </childnode>
        <childnode refid="31322" relation="include">
        </childnode>
        <childnode refid="31324" relation="include">
        </childnode>
        <childnode refid="31325" relation="include">
        </childnode>
      </node>
      <node id="31318">
        <label>stdio.h</label>
      </node>
      <node id="31338">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="31335" relation="include">
        </childnode>
      </node>
      <node id="31335">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="31336" relation="include">
        </childnode>
        <childnode refid="31337" relation="include">
        </childnode>
        <childnode refid="31338" relation="include">
        </childnode>
        <childnode refid="31339" relation="include">
        </childnode>
        <childnode refid="31340" relation="include">
        </childnode>
        <childnode refid="31341" relation="include">
        </childnode>
        <childnode refid="31342" relation="include">
        </childnode>
        <childnode refid="31343" relation="include">
        </childnode>
        <childnode refid="31344" relation="include">
        </childnode>
        <childnode refid="31345" relation="include">
        </childnode>
        <childnode refid="31346" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_rest_client___req_info___s" prot="public">RestClient_ReqInfo_S</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___rest_client_8h_1ad11a1af6817cd08ac70feaf8a3047ff8" prot="public" static="no">
        <name>REST_CLIENT_PROTOCOL_COAP</name>
        <initializer><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8a9e2100477d4dcb72de05c43c91fe3ee0" kindref="member">REST_PROTOCOL_COAP</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="52" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___rest_client_8h_1a620fada2c84be772cc17a0ce6429320b" prot="public" static="no">
        <name>REST_CLIENT_PROTOCOL_HTTP</name>
        <initializer><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8af2db2f652ebce43cf1d432b0531029bb" kindref="member">REST_PROTOCOL_HTTP</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="53" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___rest_client_8h_1a5cb6bdf53e5096b0a545d5dbcfccedb5" prot="public" static="no">
        <name>RestClient_Protocol_T</name>
        <initializer><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the possible protocols of a REST message <simplesect kind="see"><para><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref> </para></simplesect>
<xrefsect id="deprecated_1_deprecated000066"><xreftitle>Deprecated</xreftitle><xrefdescription><para>since 1.3 </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="51" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___rest_client_8h_1aedd1fcdcff6eb95c351c6192bac77851" prot="public" static="no">
        <name>SERVAL_ENABLE_REST_SECURE_CLIENT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Defines if the secure REST client instance should be enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="34" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5" prot="public" static="no">
        <name>RestClient_MsgReliabilityMode_T</name>
        <enumvalue id="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a25aa6bf8d7109e7c50c35349116d2e65" prot="public">
          <name>REST_CLIENT_MSG_RELIABLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a07e55bab388cb95987a70b045517b505" prot="public">
          <name>REST_CLIENT_MSG_UNRELIABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the reliability mode of a REST message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="57" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="56" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___rest_client_8h_1a56ed8c15567d6929ac6869afb4eb01fc" prot="public" static="no">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref>(*</type>
        <definition>typedef retcode_t(* RestAppRespCallback_T)(RestSession_T *restSession, Msg_T *msg_ptr, retcode_t status)</definition>
        <argsstring>)(RestSession_T *restSession, Msg_T *msg_ptr, retcode_t status)</argsstring>
        <name>RestAppRespCallback_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A data type representing a callback function pointer for REST application. The application uses such callback functions in order to be notified about the received messages. Also if there was an error during receiving response for request by CoAP client this callback will be invoked with error code and the RestSession_T, which can be used to identify failed request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="102" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___rest_client_8h_1ab1ea2924ec2622605d55a866994ae23d" prot="public" static="no">
        <type>struct <ref refid="struct_rest_client___req_info___s" kindref="compound">RestClient_ReqInfo_S</ref></type>
        <definition>typedef struct RestClient_ReqInfo_S  RestClient_ReqInfo_T</definition>
        <argsstring></argsstring>
        <name>RestClient_ReqInfo_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This data structure holds the data of a REST request. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="92" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___rest_client_8h_1ad6621ef49c8073f339fba28a415e79e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_closeSecureConn</definition>
        <argsstring>(Ip_Address_T *peerAddr_ptr, Ip_Port_T peerPort, Rest_Protocol_T protocol)</argsstring>
        <name>RestClient_closeSecureConn</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>peerAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>peerPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function close and disconnect an existing secure COAP connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>ip address of the remote server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peerPort</parametername>
</parameternamelist>
<parameterdescription>
<para>port number of the remote server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>This defines which protocol should be used for the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when error code available On success, RC_OK is returned. <linebreak/>
 RC_REST_SECURE_CONNECTION_ERROR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1aaefe076a7f0ead2b7219f1b150a030e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_connectSecure</definition>
        <argsstring>(Ip_Address_T *peerAddr_ptr, Ip_Port_T peerPort, Rest_Protocol_T protocol)</argsstring>
        <name>RestClient_connectSecure</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>peerAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>peerPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function connects and opens a secure COAP client connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>ip address of the remote server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peerPort</parametername>
</parameternamelist>
<parameterdescription>
<para>port number of the remote server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>This defines which protocol should be used for the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>when error code available On success, RC_OK is returned. <linebreak/>
 RC_REST_SECURE_CONNECTION_ERROR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1aec447e675d89be4c4664b0228402d0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_fillReqMsg</definition>
        <argsstring>(Msg_T *msg_ptr, RestClient_ReqInfo_T const *requestInfo_ptr)</argsstring>
        <name>RestClient_fillReqMsg</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_client_8h_1ab1ea2924ec2622605d55a866994ae23d" kindref="member">RestClient_ReqInfo_T</ref> const *</type>
          <declname>requestInfo_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Writes the request into the given message using the given request info.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the message to be used for the response.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">requestInfo_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the request info to be used for the request</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success <linebreak/>
 RC_REST_CREATE_REQUEST_ERROR if an error occurs creating the request.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___rest_client_8h_1ab1ea2924ec2622605d55a866994ae23d" kindref="member">RestClient_ReqInfo_T</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1a2e14540110d040c890863366c462ccf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_getSecureConnError</definition>
        <argsstring>(Ip_Address_T *peerAddr_ptr, Ip_Port_T peerPort, retcode_t *rc_ptr)</argsstring>
        <name>RestClient_getSecureConnError</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>peerAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>peerPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref> *</type>
          <declname>rc_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the errors of a secure connection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peerPort</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rc_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>status of this connection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, RC_OK is returned.<linebreak/>
 RC_REST_SECURE_CONNECTION_ERROR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1af955b7b37a787c42a41b2bd26672f497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_getSecureConnState</definition>
        <argsstring>(Ip_Address_T *peerAddr_ptr, Ip_Port_T peerPort, SecureConnectionState_T *state_ptr)</argsstring>
        <name>RestClient_getSecureConnState</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>peerAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>peerPort</declname>
        </param>
        <param>
          <type><ref refid="_serval___security_8h_1a29fcbcabec77bab5261483a90c6e5305" kindref="member">SecureConnectionState_T</ref> *</type>
          <declname>state_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the status of a secure connection</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peerPort</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>status of this connection</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, RC_OK is returned.<linebreak/>
 RC_REST_SECURE_CONNECTION_ERROR </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1a43238954e50b8e81f15d67300d1c6f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>RestClient_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the REST client including all needed used modules.</para><para><simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_CLIENT_INIT_ERROR if the initialization of the REST client module fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1a61a815b8805c81e5a442c7b81bbc9d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_initReqMsg</definition>
        <argsstring>(Ip_Address_T *addr_ptr, Ip_Port_T port, Msg_T **msg_pptr, Rest_Protocol_T protocol)</argsstring>
        <name>RestClient_initReqMsg</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>addr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> **</type>
          <declname>msg_pptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to initiate a request from REST client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the reference to the IP address of the receiver.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the server port of the receiver.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">msg_pptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This holds message to be filled by application for request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>This defines which protocol should be used for the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK, if successful<linebreak/>
 RC_REST_CLIENT_INIT_REQ_ERROR, otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1afa642b3c1fa4f95c3bd9335620331ee0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_initSecureReqMsg</definition>
        <argsstring>(Ip_Address_T *addr_ptr, Ip_Port_T port, Msg_T **msg_pptr, Rest_Protocol_T protocol)</argsstring>
        <name>RestClient_initSecureReqMsg</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>addr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> **</type>
          <declname>msg_pptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref></type>
          <declname>protocol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to initiate a secure request from REST client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the reference to the IP address of the receiver.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the server port of the receiver.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">msg_pptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This holds message to be filled by application for request.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>This defines which protocol should be used for the request.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK, if successful<linebreak/>
 RC_REST_CLIENT_INIT_REQ_ERROR, otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1aa7dc5063f9f2bba964c1ad43b0a722af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RestClient_iterateSecureConnections</definition>
        <argsstring>(int16_t *iterator_ptr, bool onlyWithError, Ip_Address_T *ipAddr_ptr, Ip_Port_T *port_ptr)</argsstring>
        <name>RestClient_iterateSecureConnections</name>
        <param>
          <type>int16_t *</type>
          <declname>iterator_ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>onlyWithError</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function reports the secure connections.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">iterator_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Iterator for this function. Initialized to -1 it reports the first connection. The next returned values will report the next connections. if -1 returns, no more connections are assigned to this socket. Example: int16_t iter = -1; while(1) { rc = _getSecureConnection(&amp;iter,...); if(iter &lt; 0) break; do_some_thing(...); }</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">onlyWithError</parametername>
</parameternamelist>
<parameterdescription>
<para>true -&gt; report only connections with failures. false -&gt; report all connections</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ipAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned ip address of the connection endpoint</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>returned port number of the connection endpoint </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1a868ca99a1c87ff2216935330f99579d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_request</definition>
        <argsstring>(Msg_T *msg_ptr, AppSentCallback_T appSentCallback, RestAppRespCallback_T respCallback)</argsstring>
        <name>RestClient_request</name>
        <param>
          <type><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref> *</type>
          <declname>msg_ptr</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg_8h_1af29aecb4103bc7942714cfb09979614b" kindref="member">AppSentCallback_T</ref></type>
          <declname>appSentCallback</declname>
        </param>
        <param>
          <type><ref refid="_serval___rest_client_8h_1a56ed8c15567d6929ac6869afb4eb01fc" kindref="member">RestAppRespCallback_T</ref></type>
          <declname>respCallback</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to push a request from REST client.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">msg_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to the request message to be pushed.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">appSentCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the application callback to be called for informing application about status of sending. If the application is not interested in the delivery notification, then this function may be NULL.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">respCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>This is the application callback to be called for a received response message for this request. If the application does not expect a response for this request it should be set to NULL.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK, if successful<linebreak/>
 RC_REST_CLIENT_SEND_ERROR, otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1a8f4ab6bd5f77304dc8a9ddcdab983f6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_startInstance</definition>
        <argsstring>(bool enableCoap, bool enableHttp)</argsstring>
        <name>RestClient_startInstance</name>
        <param>
          <type>bool</type>
          <declname>enableCoap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enableHttp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to start the default REST client</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enableCoap</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the CoAP binding should be enabled for this REST client instance.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enableHttp</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the HTTP binding should be enabled for this REST client instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if successful<linebreak/>
 RC_REST_CLIENT_LISTEN_ERROR if the listening for the client fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___rest_client_8h_1abd98b766f1e48c969964d5268b1049cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t RestClient_startSecureInstance</definition>
        <argsstring>(bool enableCoap, bool enableHttp)</argsstring>
        <name>RestClient_startSecureInstance</name>
        <param>
          <type>bool</type>
          <declname>enableCoap</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enableHttp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to start the secure CoAP client</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">enableCoap</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the CoAP binding should be enabled for this REST client instance.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enableHttp</parametername>
</parameternamelist>
<parameterdescription>
<para>Defines if the HTTP binding should be enabled for this REST client instance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>, RC_OK, if successful RC_REST_CLIENT_LISTEN_ERROR if the listening for the client fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h" line="211" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>REST Client Module</para><para>The interface description of the REST Client. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor">#ifndef<sp/>SERVAL_RESTCLIENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_RESTCLIENT_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___rest_8h" kindref="compound">Serval_Rest.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_8h" kindref="compound">Serval_Msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor">#if<sp/>(SERVAL_ENABLE_REST_COAP_BINDING<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_DTLS_CLIENT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(SERVAL_ENABLE_REST_HTTP_BINDING<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_TLS_CLIENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="_serval___rest_client_8h_1aedd1fcdcff6eb95c351c6192bac77851" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_REST_SECURE_CLIENT<sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_ENABLE_REST_SECURE_CLIENT<sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_HTTP_BINDING<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_TLS_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//#error<sp/>HTTP<sp/>Client<sp/>with<sp/>TLS<sp/>is<sp/>currently<sp/>not<sp/>supported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_SECURE_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___security_8h" kindref="compound">Serval_Security.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="_serval___rest_client_8h_1a5cb6bdf53e5096b0a545d5dbcfccedb5" refkind="member"><highlight class="preprocessor">#define<sp/>RestClient_Protocol_T<sp/>Rest_Protocol_T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="_serval___rest_client_8h_1ad11a1af6817cd08ac70feaf8a3047ff8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REST_CLIENT_PROTOCOL_COAP<sp/>REST_PROTOCOL_COAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="_serval___rest_client_8h_1a620fada2c84be772cc17a0ce6429320b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REST_CLIENT_PROTOCOL_HTTP<sp/>REST_PROTOCOL_HTTP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58" refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a25aa6bf8d7109e7c50c35349116d2e65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a25aa6bf8d7109e7c50c35349116d2e65" kindref="member">REST_CLIENT_MSG_RELIABLE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="59" refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a07e55bab388cb95987a70b045517b505" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5a07e55bab388cb95987a70b045517b505" kindref="member">REST_CLIENT_MSG_UNRELIABLE</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}<sp/><ref refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5" kindref="member">RestClient_MsgReliabilityMode_T</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="struct_rest_client___req_info___s" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_rest_client___req_info___s" kindref="compound">RestClient_ReqInfo_S</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68" refid="struct_rest_client___req_info___s_1af1c04a2c2a19e3e23267e6f33172856f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1af1c04a2c2a19e3e23267e6f33172856f" kindref="member">uriPath_ptr</ref>;</highlight></codeline>
<codeline lineno="70" refid="struct_rest_client___req_info___s_1ac818e0a037ae6960a8f327b2e82e0558" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1ac818e0a037ae6960a8f327b2e82e0558" kindref="member">uriQuery_ptr</ref>;</highlight></codeline>
<codeline lineno="72" refid="struct_rest_client___req_info___s_1aff9fb174aa8fcc298ae9983db1e8cd3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1aff9fb174aa8fcc298ae9983db1e8cd3c" kindref="member">payload_ptr</ref>;</highlight></codeline>
<codeline lineno="74" refid="struct_rest_client___req_info___s_1a1e4ca5601f9d3ac4063684a1638f0b57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1af8aa3c2c3b1f2cd28f40b3f66c1db3f7" kindref="member">RestPayloadLength_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1a1e4ca5601f9d3ac4063684a1638f0b57" kindref="member">payloadLen</ref>;</highlight></codeline>
<codeline lineno="76" refid="struct_rest_client___req_info___s_1a237d9f915e64202a8c45a34b820b56e2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1a237d9f915e64202a8c45a34b820b56e2" kindref="member">contentFormat</ref>;</highlight></codeline>
<codeline lineno="78" refid="struct_rest_client___req_info___s_1a82fb6544c5957e52b31714fc8ec9d5ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a8c84c4ec5aad636a4aeb8ed06c9c7b28" kindref="member">Rest_Method_T</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1a82fb6544c5957e52b31714fc8ec9d5ae" kindref="member">method</ref>;</highlight></codeline>
<codeline lineno="80" refid="struct_rest_client___req_info___s_1a353217bd62544a1cfc92db7d6807df1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_8h_1a4357f451decb439bd02d758c1b0e0b8b" kindref="member">Rest_ContentFormat_T</ref><sp/>*<sp/><sp/><ref refid="struct_rest_client___req_info___s_1a353217bd62544a1cfc92db7d6807df1f" kindref="member">acceptBuffer_ptr</ref>;</highlight></codeline>
<codeline lineno="82" refid="struct_rest_client___req_info___s_1a920124d47461db809d81c95a1d70e1f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s_1a920124d47461db809d81c95a1d70e1f8" kindref="member">numAccept</ref>;</highlight></codeline>
<codeline lineno="84" refid="struct_rest_client___req_info___s_1a09649a23d7a428b241c37da8a495fadb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_rest_client___req_info___s_1a09649a23d7a428b241c37da8a495fadb" kindref="member">rangeOffset</ref>;</highlight></codeline>
<codeline lineno="86" refid="struct_rest_client___req_info___s_1a1dfb2338183cbb72eec4b5218ea48d87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="struct_rest_client___req_info___s_1a1dfb2338183cbb72eec4b5218ea48d87" kindref="member">rangeLength</ref>;</highlight></codeline>
<codeline lineno="88" refid="struct_rest_client___req_info___s_1ae032e164f1daa754d6fbb79d59723931" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct_rest_client___req_info___s_1ae032e164f1daa754d6fbb79d59723931" kindref="member">host</ref>;</highlight></codeline>
<codeline lineno="91" refid="struct_rest_client___req_info___s_1a69cd31b0fab0389994356f1af2922a35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___rest_client_8h_1a08ef8d70bbf0a10fffaab3e8a2de3fb5" kindref="member">RestClient_MsgReliabilityMode_T</ref><sp/><ref refid="struct_rest_client___req_info___s_1a69cd31b0fab0389994356f1af2922a35" kindref="member">msgReliabilityMode</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><ref refid="_serval___rest_client_8h_1ab1ea2924ec2622605d55a866994ae23d" kindref="member">RestClient_ReqInfo_T</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="_serval___rest_client_8h_1a56ed8c15567d6929ac6869afb4eb01fc" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>(*<ref refid="_serval___rest_client_8h_1a56ed8c15567d6929ac6869afb4eb01fc" kindref="member">RestAppRespCallback_T</ref>)(<ref refid="_serval___rest_8h_1abaf8a4973e012ac469460a6947690303" kindref="member">RestSession_T</ref><sp/>*restSession,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,<sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>status);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1a43238954e50b8e81f15d67300d1c6f70" kindref="member">RestClient_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1a8f4ab6bd5f77304dc8a9ddcdab983f6d" kindref="member">RestClient_startInstance</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableCoap,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableHttp);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1a61a815b8805c81e5a442c7b81bbc9d48" kindref="member">RestClient_initReqMsg</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*addr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>**msg_pptr,<sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref><sp/>protocol);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1aec447e675d89be4c4664b0228402d0dc" kindref="member">RestClient_fillReqMsg</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref>*<sp/>msg_ptr,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_rest_client___req_info___s" kindref="compound">RestClient_ReqInfo_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*requestInfo_ptr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1a868ca99a1c87ff2216935330f99579d2" kindref="member">RestClient_request</ref>(<ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>*msg_ptr,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1af29aecb4103bc7942714cfb09979614b" kindref="member">AppSentCallback_T</ref><sp/>appSentCallback,<sp/><ref refid="_serval___rest_client_8h_1a56ed8c15567d6929ac6869afb4eb01fc" kindref="member">RestAppRespCallback_T</ref><sp/>respCallback);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_REST_SECURE_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1abd98b766f1e48c969964d5268b1049cd" kindref="member">RestClient_startSecureInstance</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableCoap,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableHttp);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1afa642b3c1fa4f95c3bd9335620331ee0" kindref="member">RestClient_initSecureReqMsg</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*addr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___msg_8h_1ae00d936510d9d4493cae90cf1ff00ee4" kindref="member">Msg_T</ref><sp/>**msg_pptr,<sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref><sp/>protocol);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1aaefe076a7f0ead2b7219f1b150a030e9" kindref="member">RestClient_connectSecure</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*peerAddr_ptr,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>peerPort,<sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref><sp/>protocol);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1ad6621ef49c8073f339fba28a415e79e6" kindref="member">RestClient_closeSecureConn</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*peerAddr_ptr,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>peerPort,<sp/><ref refid="_serval___rest_8h_1aa4a4e840fb8a02eed6c58b5a009fade8" kindref="member">Rest_Protocol_T</ref><sp/>protocol);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___rest_client_8h_1aa7dc5063f9f2bba964c1ad43b0a722af" kindref="member">RestClient_iterateSecureConnections</ref>(int16_t<sp/>*iterator_ptr,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>onlyWithError,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>*port_ptr);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1a2e14540110d040c890863366c462ccf4" kindref="member">RestClient_getSecureConnError</ref>(</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*peerAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>peerPort,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>*rc_ptr);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___rest_client_8h_1af955b7b37a787c42a41b2bd26672f497" kindref="member">RestClient_getSecureConnState</ref>(</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*peerAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>peerPort,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___security_8h_1a29fcbcabec77bab5261483a90c6e5305" kindref="member">SecureConnectionState_T</ref><sp/>*state_ptr);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_REST_SECURE_CLIENT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_REST_CLIENT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_RESTCLIENT_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h"/>
  </compounddef>
</doxygen>
