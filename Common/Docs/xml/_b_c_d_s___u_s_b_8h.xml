<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_b_c_d_s___u_s_b_8h" kind="file">
    <compoundname>BCDS_USB.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="yes">em_usb.h</includes>
    <includedby refid="_b_s_p___board_shared_8h" local="yes">SDK/xdk110/Platform/BSP/source/BSP_BoardShared.h</includedby>
    <includedby refid="_b_s_p___board_8c" local="yes">SDK/xdk110/Platform/BSP/source/BSP_Board.c</includedby>
    <includedby refid="_b_s_p___u_s_b___descriptors_8h" local="yes">SDK/xdk110/Platform/BSP/source/BSP_USB_Descriptors.h</includedby>
    <incdepgraph>
      <node id="34727">
        <label>stdint.h</label>
      </node>
      <node id="34726">
        <label>SDK/xdk110/Platform/BSP/include/BCDS_USB.h</label>
        <link refid="BCDS_USB.h"/>
        <childnode refid="34727" relation="include">
        </childnode>
        <childnode refid="34728" relation="include">
        </childnode>
      </node>
      <node id="34728">
        <label>em_usb.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="34732">
        <label>SDK/xdk110/Platform/BSP/source/BSP_BT_EM9301.c</label>
        <link refid="_b_s_p___b_t___e_m9301_8c"/>
      </node>
      <node id="34729">
        <label>SDK/xdk110/Platform/BSP/include/BCDS_USB.h</label>
        <link refid="BCDS_USB.h"/>
        <childnode refid="34730" relation="include">
        </childnode>
        <childnode refid="34731" relation="include">
        </childnode>
        <childnode refid="34743" relation="include">
        </childnode>
      </node>
      <node id="34737">
        <label>SDK/xdk110/Platform/BSP/source/BSP_Max31865.c</label>
        <link refid="_b_s_p___max31865_8c"/>
      </node>
      <node id="34731">
        <label>SDK/xdk110/Platform/BSP/source/BSP_Board.c</label>
        <link refid="_b_s_p___board_8c"/>
      </node>
      <node id="34730">
        <label>SDK/xdk110/Platform/BSP/source/BSP_BoardShared.h</label>
        <link refid="_b_s_p___board_shared_8h"/>
        <childnode refid="34731" relation="include">
        </childnode>
        <childnode refid="34732" relation="include">
        </childnode>
        <childnode refid="34733" relation="include">
        </childnode>
        <childnode refid="34734" relation="include">
        </childnode>
        <childnode refid="34735" relation="include">
        </childnode>
        <childnode refid="34736" relation="include">
        </childnode>
        <childnode refid="34737" relation="include">
        </childnode>
        <childnode refid="34738" relation="include">
        </childnode>
        <childnode refid="34739" relation="include">
        </childnode>
        <childnode refid="34740" relation="include">
        </childnode>
        <childnode refid="34741" relation="include">
        </childnode>
        <childnode refid="34742" relation="include">
        </childnode>
      </node>
      <node id="34739">
        <label>SDK/xdk110/Platform/BSP/source/BSP_SensorNode.c</label>
        <link refid="_b_s_p___sensor_node_8c"/>
      </node>
      <node id="34735">
        <label>SDK/xdk110/Platform/BSP/source/BSP_IRSensorNode.c</label>
        <link refid="_b_s_p___i_r_sensor_node_8c"/>
      </node>
      <node id="34741">
        <label>SDK/xdk110/Platform/BSP/source/BSP_UMTS_QuectelUC20.c</label>
        <link refid="_b_s_p___u_m_t_s___quectel_u_c20_8c"/>
      </node>
      <node id="34740">
        <label>SDK/xdk110/Platform/BSP/source/BSP_UMTS_LisaU2.c</label>
        <link refid="_b_s_p___u_m_t_s___lisa_u2_8c"/>
      </node>
      <node id="34738">
        <label>SDK/xdk110/Platform/BSP/source/BSP_Mic_AKU340.c</label>
        <link refid="_b_s_p___mic___a_k_u340_8c"/>
      </node>
      <node id="34734">
        <label>SDK/xdk110/Platform/BSP/source/BSP_IrqHandler.c</label>
        <link refid="_b_s_p___irq_handler_8c"/>
      </node>
      <node id="34736">
        <label>SDK/xdk110/Platform/BSP/source/BSP_LoRa_RN2xx3.c</label>
        <link refid="_b_s_p___lo_ra___r_n2xx3_8c"/>
      </node>
      <node id="34733">
        <label>SDK/xdk110/Platform/BSP/source/BSP_Charger_BQ2405X.c</label>
        <link refid="_b_s_p___charger___b_q2405_x_8c"/>
      </node>
      <node id="34743">
        <label>SDK/xdk110/Platform/BSP/source/BSP_USB_Descriptors.h</label>
        <link refid="_b_s_p___u_s_b___descriptors_8h"/>
      </node>
      <node id="34742">
        <label>SDK/xdk110/Platform/BSP/source/BSP_WiFi_cc3100mod.c</label>
        <link refid="_b_s_p___wi_fi__cc3100mod_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_u_s_b__line_coding__s" prot="public">USB_lineCoding_s</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffad" prot="public" static="no">
        <name>USB_returnCode_e</name>
        <enumvalue id="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffada68ee7000f7f5dbb4f98dfae7a80a4c0b" prot="public">
          <name>USB_SUCCESS</name>
          <initializer>= INT8_C(0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffadaee346d6a4cafcdc888e56e3600b15afc" prot="public">
          <name>USB_FAILURE</name>
          <initializer>= INT8_C(-1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USB Driver Interface. </para>        </briefdescription>
        <detaileddescription>
<para>Return status for the USB transfer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="52" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="51" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" prot="public" static="no">
        <type>enum <ref refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffad" kindref="member">USB_returnCode_e</ref></type>
        <definition>typedef enum USB_returnCode_e  USB_returnCode_t</definition>
        <argsstring></argsstring>
        <name>USB_returnCode_t</name>
        <briefdescription>
<para>USB Driver Interface. </para>        </briefdescription>
        <detaileddescription>
<para>Return status for the USB transfer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* USB_rxCallback)(uint8_t *, uint16_t)</definition>
        <argsstring>)(uint8_t *, uint16_t)</argsstring>
        <name>USB_rxCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define the prototype to which USB receive callback functions must confirm.</para><para>Functions implementing USB receive callbacks do not need to return, therefore their return type is void none.</para><para>Example task function prototype which confirms to the type declaration: <programlisting><codeline><highlight class="normal">void<sp/>EXL_exampleTxCallbackFunction(buffer,length);<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="65" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1a4b42a9c4d0df587a25246854bb990bc8" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t Baudrate</definition>
        <argsstring></argsstring>
        <name>Baudrate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Baudrate </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="66" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1ae071d001479a953bf69bd51080760d23" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t charFormat</definition>
        <argsstring></argsstring>
        <name>charFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop bits, 0=1 1=1.5 2=2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="67" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1ae2d3a26962c1846dff8d5c72bf6ef606" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dataBits</definition>
        <argsstring></argsstring>
        <name>dataBits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>5, 6, 7, 8 or 16 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="69" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1aff7b59f569ec689a7580bd6911daafd5" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t dummy</definition>
        <argsstring></argsstring>
        <name>dummy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To ensure size is a multiple of 4 bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="70" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1a6a6023b0e5468cf9349a047d9f01702a" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t parityType</definition>
        <argsstring></argsstring>
        <name>parityType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>0=None 1=Odd 2=Even 3=Mark 4=Space </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="68" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1a2ffcdb62ade4bd4ec00c2aba30403e42" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct_u_s_b__line_coding__s" kindref="compound">USB_lineCoding_s</ref> *</type>
        <definition>struct USB_lineCoding_s * USB_lineCoding_tp</definition>
        <argsstring></argsstring>
        <name>USB_lineCoding_tp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="79" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_b_c_d_s___u_s_b_8h_1a7cc2a256ae475cff6e0b8b1fd6c952be" prot="public" static="no" mutable="no">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref></type>
        <definition>USB_rxCallback usbRxCallback</definition>
        <argsstring></argsstring>
        <name>usbRxCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>received callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="71" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___b_c_d_s___f_o_t_a___f_w_c_o_n_t_a_i_n_e_r_1ga888a1dcc689347f73ea21b8e25a686df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct_u_s_b__line_coding__s" kindref="compound">USB_lineCoding_s</ref></type>
        <definition>struct USB_lineCoding_s __attribute__</definition>
        <argsstring>((packed)) USB_lineCoding_t</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(packed)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The serial port LINE CODING data structure, used to carry information about serial port baudrate, parity etc. between host and device. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1ab119ee5a4d07a9a0558e1b47fc0ba70a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t RETARGET_ReadChar</definition>
        <argsstring>(void)</argsstring>
        <name>RETARGET_ReadChar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>RETARGET API used by printf to Get single byte from USB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">void</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>retargetio.c</para></simplesect>
<simplesect kind="return"><para>byte : The byte which was received from USB </para></simplesect>
<simplesect kind="warning"><para>This API was made to retarget the scanf API to transmit data through USB The USB_receiveByte API is blocking and other API(TBD) must be used for interrupt based USB transfers. </para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1ab119ee5a4d07a9a0558e1b47fc0ba70a" kindref="member">RETARGET_ReadChar</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="226" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Common/source/RetargetStdio.c" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a1c921e27564f906d41aaa345f7b297c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref></type>
        <definition>USB_returnCode_t RETARGET_WriteChar</definition>
        <argsstring>(uint8_t *data, uint32_t len)</argsstring>
        <name>RETARGET_WriteChar</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>RETARGET API used by printf to transmit single byte to USB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>: The byte to be sent </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>retargetio.c </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>USB_returnCode_t</parametername>
</parameternamelist>
<parameterdescription>
<para>USB_FAILURE : USB transfer was not successful USB_SUCCESS : USB transfer was successful </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>: This API was made to retarget the printf API to transmit data through USB The USB_transmitByte API is blocking and other API(TBD) must be used for interrupt based USB transfers. </para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a1c921e27564f906d41aaa345f7b297c9" kindref="member">RETARGET_WriteChar</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a7a91b7e2b8b6696705b8536907b75615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref></type>
        <definition>USB_returnCode_t USB_callBackMapping</definition>
        <argsstring>(USB_rxCallback usbcallback)</argsstring>
        <name>USB_callBackMapping</name>
        <param>
          <type><ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref></type>
          <declname>usbcallback</declname>
        </param>
        <briefdescription>
<para>This API used to map the call back that needed to be called whenever a USB interrupt occurs. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">usbcallback</parametername>
</parameternamelist>
<parameterdescription>
<para>- function pointer of the callback to be mapped</para></parameterdescription>
</parameteritem>
</parameterlist>
USB_FAILURE : API call failed  USB_SUCCESS : API call succeeded</para><para><simplesect kind="warning"><para>This API will over-write any previous callback if configured. </para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a7a91b7e2b8b6696705b8536907b75615" kindref="member">USB_callBackMapping</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a35d4b1fdcba9babf9cd3d7ee571da971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USB_DisConnect</definition>
        <argsstring>(void)</argsstring>
        <name>USB_DisConnect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disconnect the USB device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a879e7559244f3e8c8993e105fd45cd36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USB_init</definition>
        <argsstring>(USB_lineCoding_tp lineCoding, USB_rxCallback usbRxCallback)</argsstring>
        <name>USB_init</name>
        <param>
          <type><ref refid="_b_c_d_s___u_s_b_8h_1a2ffcdb62ade4bd4ec00c2aba30403e42" kindref="member">USB_lineCoding_tp</ref></type>
          <declname>lineCoding</declname>
        </param>
        <param>
          <type><ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref></type>
          <declname>usbRxCallback</declname>
        </param>
        <briefdescription>
<para>Initializes the USB device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lineCoding</parametername>
</parameternamelist>
<parameterdescription>
<para>- The usb port LINE CODING data structure, used to carry information about serial port baudrate, parity etc. between host and device. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">usbRxCallback</parametername>
</parameternamelist>
<parameterdescription>
<para>- Application receive callback function to receive data over USB</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Please give the parameter usbRxCallback value as NULL.</para></simplesect>
<simplesect kind="note"><para>If the user wants to re-init USB please Refer code given as below for example</para></simplesect>
<programlisting><codeline><highlight class="normal">Example:</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;XdkUsbResetUtility.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">USB_lineCoding_t<sp/>BSP_USBHandle1;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>ReInitUSB(void)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">Retcode_T<sp/>retcode<sp/>=<sp/>RETCODE_OK;</highlight></codeline>
<codeline><highlight class="normal">BSP_USBHandle1.Baudrate<sp/>=<sp/>USB_SET_BAUDRATE;</highlight></codeline>
<codeline><highlight class="normal">BSP_USBHandle1.charFormat<sp/>=<sp/>USB_SET_STOPBITS_MODE;</highlight></codeline>
<codeline><highlight class="normal">BSP_USBHandle1.parityType<sp/>=<sp/>USB_SET_PARITY;</highlight></codeline>
<codeline><highlight class="normal">BSP_USBHandle1.dataBits<sp/>=<sp/>USB_SET_DATA_BITS;</highlight></codeline>
<codeline><highlight class="normal">BSP_USBHandle1.dummy<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">NVIC_SetPriority(USB_IRQn,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">USB_init(&amp;BSP_USBHandle1,<sp/>NULL);<sp/>//<sp/>Note<sp/>-<sp/>If<sp/>required<sp/>please<sp/>give<sp/>few<sp/>seconds<sp/>delay<sp/>for<sp/>USB<sp/>enumeration</highlight></codeline>
<codeline><highlight class="normal">returnValue<sp/>=<sp/>UsbResetUtility_Init();<sp/>//<sp/>Note<sp/>-<sp/>USB<sp/>receive<sp/>callback<sp/>is<sp/>set<sp/>to<sp/>UsbResetUtility_UsbISRCallback()<sp/>by<sp/>implementation.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(RETCODE_OK<sp/>==<sp/>returnValue)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>user<sp/>wants<sp/>to<sp/>handle<sp/>receive<sp/>then<sp/>the<sp/>below<sp/>API<sp/>calls<sp/>are<sp/>required</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>returnValue<sp/>=<sp/>UsbResetUtility_RegAppISR(&amp;ApplicationUsbRXcallback);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>if<sp/>(RETCODE_OK<sp/>==<sp/>returnValue)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>application<sp/>usb<sp/>receive<sp/>call<sp/>back<sp/>successfully<sp/>registered</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>user<sp/>application<sp/>receive<sp/>USB<sp/>call<sp/>back<sp/>sample<sp/>implementation</highlight></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>ApplicationUsbRXcallback(uint8_t<sp/>*<sp/>usbRcvBuffer,<sp/>uint32_t<sp/>usbRcvBufLength)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>Print<sp/>received<sp/>data<sp/>and<sp/>length</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="129" column="1"/>
        <referencedby refid="_b_s_p___board_8c_1ad7b221558ec67814ba6e859d03502fba" compoundref="_b_s_p___board_8c" startline="847" endline="858">Board_USB_Init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a63e760cba277adf454e31843d322241b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref></type>
        <definition>USB_returnCode_t USB_receiveByte</definition>
        <argsstring>(uint8_t *byte)</argsstring>
        <name>USB_receiveByte</name>
        <param>
          <type>uint8_t *</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Get single byte from USB. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">byte</parametername>
</parameternamelist>
<parameterdescription>
<para>: Pointer to which the received byte must be written  USB_FAILURE : API call failed  USB_SUCCESS : API call succeeded</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>: This API was made to scan the data received through scanf API. This API is blocking TODO interrupt based USB transfers must be implemented</para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a63e760cba277adf454e31843d322241b" kindref="member">USB_receiveByte</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a389063ac3c4c73160e7d83b7f0c3e4a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int USB_setupCommand</definition>
        <argsstring>(const USB_Setup_TypeDef *setup)</argsstring>
        <name>USB_setupCommand</name>
        <param>
          <type>const USB_Setup_TypeDef *</type>
          <declname>setup</declname>
        </param>
        <briefdescription>
<para>Called each time the USB host sends a SETUP command. Implements CDC class specific commands. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">setup</parametername>
</parameternamelist>
<parameterdescription>
<para>: USB Setup request package </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>USB_STATUS_REQ_UNHANDLED : Setup request not handled. </para></simplesect>
<simplesect kind="return"><para>USB_STATUS_OK : No errors detected</para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a389063ac3c4c73160e7d83b7f0c3e4a3" kindref="member">USB_setupCommand</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a53403a699c7192f8c36dd19fd2fb0097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USB_stateChange</definition>
        <argsstring>(USBD_State_TypeDef oldState, USBD_State_TypeDef newState)</argsstring>
        <name>USB_stateChange</name>
        <param>
          <type>USBD_State_TypeDef</type>
          <declname>oldState</declname>
        </param>
        <param>
          <type>USBD_State_TypeDef</type>
          <declname>newState</declname>
        </param>
        <briefdescription>
<para>Called each time the USB device state is changed. Starts CDC operation when device has been configured by USB host. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oldState</parametername>
</parameternamelist>
<parameterdescription>
<para>: previous USB device state enumerator. Unused parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">newState</parametername>
</parameternamelist>
<parameterdescription>
<para>: present USB device state enumerator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a53403a699c7192f8c36dd19fd2fb0097" kindref="member">USB_stateChange</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1aef191ec15ee3d2ca0e93b27cfaaeabde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref></type>
        <definition>USB_returnCode_t USB_transmitByte</definition>
        <argsstring>(uint8_t byte)</argsstring>
        <name>USB_transmitByte</name>
        <param>
          <type>uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>Transmit single byte to USB.(only for printf purpose) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">byte</parametername>
</parameternamelist>
<parameterdescription>
<para>: The byte to be sent  USB_FAILURE : API call failed  USB_SUCCESS : API call succeeded</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>: This API was made to transmit the data send through printf API. This API is blocking TODO interrupt based USB transfers must be implemented.</para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1aef191ec15ee3d2ca0e93b27cfaaeabde" kindref="member">USB_transmitByte</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_b_c_d_s___u_s_b_8h_1a30320573f452a73550f3190261383831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref></type>
        <definition>USB_returnCode_t USB_transmitData</definition>
        <argsstring>(uint8_t *data, uint32_t len)</argsstring>
        <name>USB_transmitData</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Transmit Data to USB.(only for printf purpose) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>: buffer of data that to be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>: length of data that to be transmitted  USB_FAILURE : API call failed  USB_SUCCESS : API call succeeded</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>: This API was made to transmit the data send through printf API. This API is blocking and other API(TBD) must be used for interrupt based USB transfers</para></simplesect>
<simplesect kind="warning"><para>Usage of <ref refid="_b_c_d_s___u_s_b_8h_1a30320573f452a73550f3190261383831" kindref="member">USB_transmitData</ref> should not be used in application code , since this api is required only for usb library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Licensee<sp/>agrees<sp/>that<sp/>the<sp/>example<sp/>code<sp/>provided<sp/>to<sp/>Licensee<sp/>has<sp/>been<sp/>developed<sp/>and<sp/>released<sp/>by<sp/>Bosch<sp/>solely<sp/>as<sp/>an<sp/>example<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>potential<sp/>reference<sp/>for<sp/>application<sp/>development<sp/>by<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>Fitness<sp/>and<sp/>suitability<sp/>of<sp/>the<sp/>example<sp/>code<sp/>for<sp/>any<sp/>use<sp/>within<sp/>application<sp/>developed<sp/>by<sp/>Licensee<sp/>need<sp/>to<sp/>be<sp/>verified<sp/>by<sp/>Licensee<sp/>on<sp/>its<sp/>own<sp/>authority<sp/>by<sp/>taking<sp/>appropriate<sp/>state<sp/>of<sp/>the<sp/>art<sp/>actions<sp/>and<sp/>measures<sp/>(e.g.<sp/>by<sp/>means<sp/>of<sp/>quality<sp/>assurance<sp/>measures).</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>for<sp/>conducting<sp/>the<sp/>development<sp/>of<sp/>its<sp/>applications<sp/>as<sp/>well<sp/>as<sp/>integration<sp/>of<sp/>parts<sp/>of<sp/>the<sp/>example<sp/>code<sp/>into<sp/>such<sp/>applications,<sp/>taking<sp/>into<sp/>account<sp/>the<sp/>state<sp/>of<sp/>the<sp/>art<sp/>of<sp/>technology<sp/>and<sp/>any<sp/>statutory<sp/>regulations<sp/>and<sp/>provisions<sp/>applicable<sp/>for<sp/>such<sp/>applications.<sp/>Compliance<sp/>with<sp/>the<sp/>functional<sp/>system<sp/>requirements<sp/>and<sp/>testing<sp/>there<sp/>of<sp/>(including<sp/>validation<sp/>of<sp/>information/data<sp/>security<sp/>aspects<sp/>and<sp/>functional<sp/>safety)<sp/>and<sp/>release<sp/>shall<sp/>be<sp/>solely<sp/>incumbent<sp/>upon<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>For<sp/>the<sp/>avoidance<sp/>of<sp/>doubt,<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>and<sp/>fully<sp/>liable<sp/>for<sp/>the<sp/>applications<sp/>and<sp/>any<sp/>distribution<sp/>of<sp/>such<sp/>applications<sp/>into<sp/>the<sp/>market.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(1)<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(2)<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>distribution.<sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(3)The<sp/>name<sp/>of<sp/>the<sp/>author<sp/>may<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/><sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*<sp/><sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment">*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight></codeline>
<codeline lineno="41"><highlight class="comment">/*<sp/>header<sp/>definition<sp/>********************************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>BCDS_USB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BCDS_USB_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>interface<sp/>declaration<sp/>*********************************************<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;em_usb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>type<sp/>and<sp/>macro<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffad" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffad" kindref="member">USB_returnCode_e</ref></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53" refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffada68ee7000f7f5dbb4f98dfae7a80a4c0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffada68ee7000f7f5dbb4f98dfae7a80a4c0b" kindref="member">USB_SUCCESS</ref><sp/>=<sp/>INT8_C(0),</highlight></codeline>
<codeline lineno="54" refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffadaee346d6a4cafcdc888e56e3600b15afc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a2c4d2989d3c997e2b8f0757bdd96ffadaee346d6a4cafcdc888e56e3600b15afc" kindref="member">USB_FAILURE</ref><sp/>=<sp/>INT8_C(-1),</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref>)(uint8_t<sp/>*,<sp/>uint16_t);</highlight></codeline>
<codeline lineno="66" refid="_b_c_d_s___u_s_b_8h_1a4b42a9c4d0df587a25246854bb990bc8" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="_b_c_d_s___u_s_b_8h_1aff7b59f569ec689a7580bd6911daafd5" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_u_s_b__line_coding__s" kindref="compound">USB_lineCoding_s</ref></highlight></codeline>
<codeline lineno="71" refid="_b_c_d_s___u_s_b_8h_1a7cc2a256ae475cff6e0b8b1fd6c952be" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72" refid="struct_u_s_b__line_coding__s_1a4b42a9c4d0df587a25246854bb990bc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_u_s_b__line_coding__s_1a4b42a9c4d0df587a25246854bb990bc8" kindref="member">Baudrate</ref>;<sp/></highlight></codeline>
<codeline lineno="73" refid="struct_u_s_b__line_coding__s_1ae071d001479a953bf69bd51080760d23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_u_s_b__line_coding__s_1ae071d001479a953bf69bd51080760d23" kindref="member">charFormat</ref>;<sp/></highlight></codeline>
<codeline lineno="74" refid="struct_u_s_b__line_coding__s_1a6a6023b0e5468cf9349a047d9f01702a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_u_s_b__line_coding__s_1a6a6023b0e5468cf9349a047d9f01702a" kindref="member">parityType</ref>;<sp/></highlight></codeline>
<codeline lineno="75" refid="struct_u_s_b__line_coding__s_1ae2d3a26962c1846dff8d5c72bf6ef606" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_u_s_b__line_coding__s_1ae2d3a26962c1846dff8d5c72bf6ef606" kindref="member">dataBits</ref>;<sp/></highlight></codeline>
<codeline lineno="76" refid="struct_u_s_b__line_coding__s_1aff7b59f569ec689a7580bd6911daafd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_u_s_b__line_coding__s_1aff7b59f569ec689a7580bd6911daafd5" kindref="member">dummy</ref>;<sp/></highlight></codeline>
<codeline lineno="77" refid="struct_u_s_b__line_coding__s_1a7cc2a256ae475cff6e0b8b1fd6c952be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref><sp/><ref refid="struct_u_s_b__line_coding__s_1a7cc2a256ae475cff6e0b8b1fd6c952be" kindref="member">usbRxCallback</ref>;<sp/></highlight></codeline>
<codeline lineno="79" refid="_b_c_d_s___u_s_b_8h_1a2ffcdb62ade4bd4ec00c2aba30403e42" refkind="member"><highlight class="normal">}<ref refid="group___b_c_d_s___f_o_t_a___f_w_c_o_n_t_a_i_n_e_r_1ga888a1dcc689347f73ea21b8e25a686df" kindref="member">__attribute__</ref><sp/>((packed))<sp/>USB_lineCoding_t,<sp/>*<ref refid="_b_c_d_s___u_s_b_8h_1a2ffcdb62ade4bd4ec00c2aba30403e42" kindref="member">USB_lineCoding_tp</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>function<sp/>prototype<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a879e7559244f3e8c8993e105fd45cd36" kindref="member">USB_init</ref>(USB_lineCoding_tp<sp/>lineCoding,<sp/><ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a7cc2a256ae475cff6e0b8b1fd6c952be" kindref="member">usbRxCallback</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1aef191ec15ee3d2ca0e93b27cfaaeabde" kindref="member">USB_transmitByte</ref>(uint8_t<sp/><ref refid="_fault_handler_8c_1a977b4c6fdb29af4d067f43aa302e99e9" kindref="member">byte</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a63e760cba277adf454e31843d322241b" kindref="member">USB_receiveByte</ref>(uint8_t*<sp/>byte);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a30320573f452a73550f3190261383831" kindref="member">USB_transmitData</ref>(uint8_t<sp/>*data,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a53403a699c7192f8c36dd19fd2fb0097" kindref="member">USB_stateChange</ref>(USBD_State_TypeDef<sp/>oldState,<sp/>USBD_State_TypeDef<sp/>newState);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a389063ac3c4c73160e7d83b7f0c3e4a3" kindref="member">USB_setupCommand</ref>(const<sp/>USB_Setup_TypeDef<sp/>*setup);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a7a91b7e2b8b6696705b8536907b75615" kindref="member">USB_callBackMapping</ref>(<ref refid="_b_c_d_s___u_s_b_8h_1ab3772f65ab04d0f68069f37172001922" kindref="member">USB_rxCallback</ref><sp/>usbcallback);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a35d4b1fdcba9babf9cd3d7ee571da971" kindref="member">USB_DisConnect</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">uint8_t<sp/><ref refid="_b_c_d_s___u_s_b_8h_1ab119ee5a4d07a9a0558e1b47fc0ba70a" kindref="member">RETARGET_ReadChar</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><ref refid="_b_c_d_s___u_s_b_8h_1af0f98e66450be55819a5e55cb3d3d86c" kindref="member">USB_returnCode_t</ref><sp/><ref refid="_b_c_d_s___u_s_b_8h_1a1c921e27564f906d41aaa345f7b297c9" kindref="member">RETARGET_WriteChar</ref>(uint8_t<sp/>*data,<sp/>uint32_t<sp/>len);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>public<sp/>global<sp/>variable<sp/>declarations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>inline<sp/>function<sp/>definitions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BCDS_USB_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/BSP/include/BCDS_USB.h"/>
  </compounddef>
</doxygen>
