<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_b_c_d_s___n_v_m_8h" kind="file">
    <compoundname>BCDS_NVM.h</compoundname>
    <includes refid="_b_c_d_s___retcode_8h" local="yes">BCDS_Retcode.h</includes>
    <includedby refid="_b_c_d_s___n_v_m_user_page_items_8h" local="yes">SDK/xdk110/Common/config/Drivers/BCDS_NVMUserPageItems.h</includedby>
    <incdepgraph>
      <node id="35666">
        <label>stdbool.h</label>
      </node>
      <node id="35665">
        <label>stdint.h</label>
      </node>
      <node id="35663">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="35664" relation="include">
        </childnode>
      </node>
      <node id="35668">
        <label>stdlib.h</label>
      </node>
      <node id="35662">
        <label>SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h</label>
        <link refid="BCDS_NVM.h"/>
        <childnode refid="35663" relation="include">
        </childnode>
      </node>
      <node id="35667">
        <label>string.h</label>
      </node>
      <node id="35664">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="35665" relation="include">
        </childnode>
        <childnode refid="35666" relation="include">
        </childnode>
        <childnode refid="35667" relation="include">
        </childnode>
        <childnode refid="35668" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="35671">
        <label>SDK/xdk110/Common/config/Drivers/BCDS_NVMConfig.h</label>
        <link refid="_b_c_d_s___n_v_m_config_8h"/>
        <childnode refid="35672" relation="include">
        </childnode>
        <childnode refid="35673" relation="include">
        </childnode>
        <childnode refid="35674" relation="include">
        </childnode>
        <childnode refid="35675" relation="include">
        </childnode>
      </node>
      <node id="35673">
        <label>SDK/xdk110/Common/source/SystemStartup.c</label>
        <link refid="_system_startup_8c"/>
      </node>
      <node id="35674">
        <label>SDK/xdk110/Common/source/Utility/FOTA.c</label>
        <link refid="_f_o_t_a_8c"/>
      </node>
      <node id="35669">
        <label>SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h</label>
        <link refid="BCDS_NVM.h"/>
        <childnode refid="35670" relation="include">
        </childnode>
      </node>
      <node id="35672">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectFirmwareUpdate.c</label>
        <link refid="_l_w_m2_m_object_firmware_update_8c"/>
      </node>
      <node id="35675">
        <label>SDK/xdk110/Common/source/Utility/Utils.c</label>
        <link refid="_utils_8c"/>
      </node>
      <node id="35670">
        <label>SDK/xdk110/Common/config/Drivers/BCDS_NVMUserPageItems.h</label>
        <link refid="_b_c_d_s___n_v_m_user_page_items_8h"/>
        <childnode refid="35671" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_n_v_m___item___s" prot="public">NVM_Item_S</innerclass>
    <innerclass refid="struct_n_v_m___s" prot="public">NVM_S</innerclass>
    <innerclass refid="struct_n_v_m___section___s" prot="public">NVM_Section_S</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___n_v_m_1ga99a942946bc461cc8bd78d3c3e2d68a8" prot="public" static="no">
        <name>NVM_Endianness_E</name>
        <enumvalue id="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8a769ac34f562fde860571cdfaab93a03a" prot="public">
          <name>NVM_ENDIANNESS_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8affc63ff772c51e0d895907fd785ecf02" prot="public">
          <name>NVM_ENDIANNESS_BIG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8ae2a904fa35ce564470e4940e2659fba1" prot="public">
          <name>NVM_ENDIANNESS_LITTLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="72" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="enum" id="group___n_v_m_1gae94c83fa064e96f2871ea7edfd9e81d4" prot="public" static="no">
        <name>NVM_Mode_E</name>
        <enumvalue id="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a10552f40228ae81939f1973179dbfcac" prot="public">
          <name>NVM_MODE_R</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a344004b0c241de6a1f388b7e4cdf08e4" prot="public">
          <name>NVM_MODE_RW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="79" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="group___n_v_m_1ga8d175357e01c43983812b82aed85be84" prot="public" static="no">
        <name>NVM_Retcode_E</name>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a2f03dfa11c3574ff034073f424ddd979" prot="public">
          <name>NVM_RETCODE_INVALID_ITEM</name>
          <initializer>= RETCODE_FIRST_CUSTOM_CODE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84af4d4b70142e561cb816109a39ea0b8dc" prot="public">
          <name>NVM_RETCODE_INVALID_BUFFER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a643f3383c109b3b15a6c24e4a647cdce" prot="public">
          <name>NVM_RETCODE_INVALID_SECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" prot="public">
          <name>NVM_RETCODE_INVALID_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84aa926af268641b95aa1344986b2cd7b7e" prot="public">
          <name>NVM_RETCODE_WRITE_FORBIDDEN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a155ee178ac0167607c75a7b5f36fa5ad" prot="public">
          <name>NVM_RETCODE_INTEGRITY_FAILED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>reserved </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>return values for Nvm_read* and Nvm_write* </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="_b_c_d_s___retcode_8h" kindref="compound">BCDS_Retcode.h</ref> for generic return codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="62" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" bodystart="61" bodyend="69"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___n_v_m_1ga185e01d7bd874d3bed92f89b826b2a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_Deinitialize</definition>
        <argsstring>(const struct NVM_S *Nvm_obj)</argsstring>
        <name>NVM_Deinitialize</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <briefdescription>
<para>De-initializes the NVM interface and makes sure all items are written back to flash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object instance\</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> NVM de-initialization successful. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acba5d476dcd59fa4e9cf717ce9484a0df08" kindref="member">RETCODE_NULL_POINTER</ref> nvm_obj is a null pointer</para></simplesect>
<simplesect kind="warning"><para>any further usage of nvm_obj after that function call leads to undefined behavior of the NVM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_Flush</definition>
        <argsstring>(const struct NVM_S *Nvm_obj)</argsstring>
        <name>NVM_Flush</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <briefdescription>
<para>Flush all items from an NVM internal buffer to the flash memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> Flushing all items from an NVM internal buffer to the flash memory successful </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> Flushing all items from an NVM internal buffer to the flash memory failed</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer #MCU_Flash_ErasePage or #MCU_Flash_Write error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="481" column="1"/>
        <referencedby refid="group___s_y_s_t_e_m_s_t_a_r_t_u_p_1gab3bf0967da05629b9d5b23b21d15aeb1" compoundref="_system_startup_8c" startline="297" endline="388">systemStartup</referencedby>
        <referencedby refid="group___f_o_t_a_1gaa17c22be08c000fec0331fab53040c26" compoundref="_f_o_t_a_8c" startline="371" endline="413">FOTA_UpdateSdcardFw</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gac14d043f334df1f2eb9ef2e14a3d6d3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_Initialize</definition>
        <argsstring>(struct NVM_S *Nvm_obj)</argsstring>
        <name>NVM_Initialize</name>
        <param>
          <type>struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <briefdescription>
<para>Initializes the NVM for a certain section specified by the user and the given function parameter nvm_obj. NVM_Init() reads the section content of the flash memory and stores it in the NVM internal buffer for later read and write operations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object instance</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> NVM Initialization successful. </para></simplesect>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acbafeee3d6fd430b337ab3dd2f2a7732c1f" kindref="member">RETCODE_FAILURE</ref> NVM Initialization successful.</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer #MCU_Flash_Read error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="132" column="1"/>
        <referencedby refid="group___s_y_s_t_e_m_s_t_a_r_t_u_p_1gab3bf0967da05629b9d5b23b21d15aeb1" compoundref="_system_startup_8c" startline="297" endline="388">systemStartup</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_Read</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, void *Value, uint32_t Length)</argsstring>
        <name>NVM_Read</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
<para>Reads an item from NVM. This function only operates on the NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>identifies an item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>must point to a properly sized buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of provided value buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> Reading an item from NVM successful </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> Provided buffer length does not match item length </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a155ee178ac0167607c75a7b5f36fa5ad" kindref="member">NVM_RETCODE_INTEGRITY_FAILED</ref> The item&apos;s content is corrupt </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="165" column="1"/>
        <referencedby refid="group___x_d_k_u_t_i_l_s_1ga13ca4c3f99487d83c7d5da7312504a35" compoundref="_utils_8c" startline="232" endline="274">Utils_GetMacInfoFromNVM</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gaa9667ec8374c66a3221ce9b2b939ae95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadInt16</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, int16_t *Value)</argsstring>
        <name>NVM_ReadInt16</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga59c0f810aab975ec27f742af491a85c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadInt32</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, int32_t *Value)</argsstring>
        <name>NVM_ReadInt32</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga72f250b6fae63fb98826fe96cafd4b17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadInt64</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, int64_t *Value)</argsstring>
        <name>NVM_ReadInt64</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gaa0f57cc9a7aec055a48397c36a0031d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadInt8</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, int8_t *Value)</argsstring>
        <name>NVM_ReadInt8</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on the NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gae76ce69c3d5b1989dfc04e87a60c68f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadUInt16</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, uint16_t *Value)</argsstring>
        <name>NVM_ReadUInt16</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga6af6433336d64514c1f50f8d366061d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadUInt32</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, uint32_t *Value)</argsstring>
        <name>NVM_ReadUInt32</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga3f841e0342b2a27fd87b0f5096a14bfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadUInt64</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, uint64_t *Value)</argsstring>
        <name>NVM_ReadUInt64</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga09d6c1a83b40a03cde695099ead6cd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_ReadUInt8</definition>
        <argsstring>(const struct NVM_S *nvm_obj, struct NVM_Item_S item, uint8_t *value)</argsstring>
        <name>NVM_ReadUInt8</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Reads an signed int8 item. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item to be read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>read value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> If the item has been read successfully </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="221" column="1"/>
        <referencedby refid="group___s_y_s_t_e_m_s_t_a_r_t_u_p_1gab3bf0967da05629b9d5b23b21d15aeb1" compoundref="_system_startup_8c" startline="297" endline="388">systemStartup</referencedby>
        <referencedby refid="group___x_d_k_u_t_i_l_s_1ga13ca4c3f99487d83c7d5da7312504a35" compoundref="_utils_8c" startline="232" endline="274">Utils_GetMacInfoFromNVM</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gabef20a303214c6809f7f44195993660a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_Write</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const void *Value, uint32_t Length)</argsstring>
        <name>NVM_Write</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>Value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
<para>Writes an item to NVM. This function only operates on the NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>object instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>identifies an item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>must point to a properly sized buffer which includes data to be written </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>of provided value buffer, amount of bytes to be written</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> Writing an item from NVM successful </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> Provided buffer length does not match item length </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84aa926af268641b95aa1344986b2cd7b7e" kindref="member">NVM_RETCODE_WRITE_FORBIDDEN</ref> Item is read-only </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga20f87fcc9883443e10bf3695a00c5028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteInt16</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const int16_t *Value)</argsstring>
        <name>NVM_WriteInt16</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga176ee779f7f3b13703d07e20a80f3f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteInt32</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const int32_t *Value)</argsstring>
        <name>NVM_WriteInt32</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga8d283f14b009966c6f33c71fcf9caae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteInt64</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const int64_t *Value)</argsstring>
        <name>NVM_WriteInt64</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const int64_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga1a5cba146e5a99edbd53ee689bb8acf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteInt8</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const int8_t *Value)</argsstring>
        <name>NVM_WriteInt8</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const int8_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga2fe2c82f1ff2c6c5e641f327edd55db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteUInt16</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const uint16_t *Value)</argsstring>
        <name>NVM_WriteUInt16</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const uint16_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1ga33c1f04518989d1fc3715adfda590a29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteUInt32</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const uint32_t *Value)</argsstring>
        <name>NVM_WriteUInt32</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const uint32_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="431" column="1"/>
        <referencedby refid="group___f_o_t_a_1gaa17c22be08c000fec0331fab53040c26" compoundref="_f_o_t_a_8c" startline="371" endline="413">FOTA_UpdateSdcardFw</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gac8fa04776f22f479f76a48cf0c0282bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteUInt64</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const uint64_t *Value)</argsstring>
        <name>NVM_WriteUInt64</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const uint64_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="468" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___n_v_m_1gaeb6c0ea8605a03bb5d020e1e3f318b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref></type>
        <definition>Retcode_T NVM_WriteUInt8</definition>
        <argsstring>(const struct NVM_S *Nvm_obj, struct NVM_Item_S Item, const uint8_t *Value)</argsstring>
        <name>NVM_WriteUInt8</name>
        <param>
          <type>const struct <ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref> *</type>
          <declname>Nvm_obj</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></type>
          <declname>Item</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>Value</declname>
        </param>
        <briefdescription>
<para>Writes an unsigned uint8 item to NVM. This function only operates on an NVM internal buffer. In order to store the buffers content to the flash memory use <ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush()</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nvm_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>nvm object holding the used page and section specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">item</parametername>
</parameternamelist>
<parameterdescription>
<para>item specification </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>desired value to write</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga29ad456a36368a4ba96e18b18cb0f7bc" kindref="member">RETCODE_OK</ref> if the item has been successfully written </para></simplesect>
<simplesect kind="return"><para><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref> If the item size is invalid</para></simplesect>
<simplesect kind="return"><para>In case of any other error refer <ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref> error codes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h" line="359" column="1"/>
        <referencedby refid="group___s_y_s_t_e_m_s_t_a_r_t_u_p_1gab3bf0967da05629b9d5b23b21d15aeb1" compoundref="_system_startup_8c" startline="297" endline="388">systemStartup</referencedby>
        <referencedby refid="group___f_o_t_a_1gaa17c22be08c000fec0331fab53040c26" compoundref="_f_o_t_a_8c" startline="371" endline="413">FOTA_UpdateSdcardFw</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/>Licensee<sp/>agrees<sp/>that<sp/>the<sp/>example<sp/>code<sp/>provided<sp/>to<sp/>Licensee<sp/>has<sp/>been<sp/>developed<sp/>and<sp/>released<sp/>by<sp/>Bosch<sp/>solely<sp/>as<sp/>an<sp/>example<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>potential<sp/>reference<sp/>for<sp/>application<sp/>development<sp/>by<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/>Fitness<sp/>and<sp/>suitability<sp/>of<sp/>the<sp/>example<sp/>code<sp/>for<sp/>any<sp/>use<sp/>within<sp/>application<sp/>developed<sp/>by<sp/>Licensee<sp/>need<sp/>to<sp/>be<sp/>verified<sp/>by<sp/>Licensee<sp/>on<sp/>its<sp/>own<sp/>authority<sp/>by<sp/>taking<sp/>appropriate<sp/>state<sp/>of<sp/>the<sp/>art<sp/>actions<sp/>and<sp/>measures<sp/>(e.g.<sp/>by<sp/>means<sp/>of<sp/>quality<sp/>assurance<sp/>measures).</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>for<sp/>conducting<sp/>the<sp/>development<sp/>of<sp/>its<sp/>applications<sp/>as<sp/>well<sp/>as<sp/>integration<sp/>of<sp/>parts<sp/>of<sp/>the<sp/>example<sp/>code<sp/>into<sp/>such<sp/>applications,<sp/>taking<sp/>into<sp/>account<sp/>the<sp/>state<sp/>of<sp/>the<sp/>art<sp/>of<sp/>technology<sp/>and<sp/>any<sp/>statutory<sp/>regulations<sp/>and<sp/>provisions<sp/>applicable<sp/>for<sp/>such<sp/>applications.<sp/>Compliance<sp/>with<sp/>the<sp/>functional<sp/>system<sp/>requirements<sp/>and<sp/>testing<sp/>there<sp/>of<sp/>(including<sp/>validation<sp/>of<sp/>information/data<sp/>security<sp/>aspects<sp/>and<sp/>functional<sp/>safety)<sp/>and<sp/>release<sp/>shall<sp/>be<sp/>solely<sp/>incumbent<sp/>upon<sp/>Licensee.<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/>For<sp/>the<sp/>avoidance<sp/>of<sp/>doubt,<sp/>Licensee<sp/>shall<sp/>be<sp/>responsible<sp/>and<sp/>fully<sp/>liable<sp/>for<sp/>the<sp/>applications<sp/>and<sp/>any<sp/>distribution<sp/>of<sp/>such<sp/>applications<sp/>into<sp/>the<sp/>market.</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/></highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(1)<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(2)<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>distribution.<sp/><sp/></highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>(3)The<sp/>name<sp/>of<sp/>the<sp/>author<sp/>may<sp/>not<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment">*<sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="comment">*<sp/><sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment">*<sp/><sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*<sp/><sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,</highlight></codeline>
<codeline lineno="28"><highlight class="comment">*<sp/><sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*<sp/><sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="30"><highlight class="comment">*<sp/><sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)</highlight></codeline>
<codeline lineno="31"><highlight class="comment">*<sp/><sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,</highlight></codeline>
<codeline lineno="32"><highlight class="comment">*<sp/><sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING</highlight></codeline>
<codeline lineno="33"><highlight class="comment">*<sp/><sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/></highlight></codeline>
<codeline lineno="34"><highlight class="comment">*<sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor">#ifndef<sp/>BCDS_NVM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BCDS_NVM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_b_c_d_s___retcode_8h" kindref="compound">BCDS_Retcode.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group___n_v_m_1ga8d175357e01c43983812b82aed85be84" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___n_v_m_1ga8d175357e01c43983812b82aed85be84" kindref="member">NVM_Retcode_E</ref></highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a2f03dfa11c3574ff034073f424ddd979" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a2f03dfa11c3574ff034073f424ddd979" kindref="member">NVM_RETCODE_INVALID_ITEM</ref><sp/>=<sp/><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ggaf6fb6f6ae1be4277d38a8684e1be9acba6c81977454c58d70cd853a61001f4a47" kindref="member">RETCODE_FIRST_CUSTOM_CODE</ref>,</highlight></codeline>
<codeline lineno="64" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84af4d4b70142e561cb816109a39ea0b8dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84af4d4b70142e561cb816109a39ea0b8dc" kindref="member">NVM_RETCODE_INVALID_BUFFER</ref>,</highlight></codeline>
<codeline lineno="65" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a643f3383c109b3b15a6c24e4a647cdce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a643f3383c109b3b15a6c24e4a647cdce" kindref="member">NVM_RETCODE_INVALID_SECTION</ref>,</highlight></codeline>
<codeline lineno="66" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a1da1cd062dc42cdffc27a8b1595588b4" kindref="member">NVM_RETCODE_INVALID_SIZE</ref>,</highlight></codeline>
<codeline lineno="67" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84aa926af268641b95aa1344986b2cd7b7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84aa926af268641b95aa1344986b2cd7b7e" kindref="member">NVM_RETCODE_WRITE_FORBIDDEN</ref>,</highlight></codeline>
<codeline lineno="68" refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a155ee178ac0167607c75a7b5f36fa5ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga8d175357e01c43983812b82aed85be84a155ee178ac0167607c75a7b5f36fa5ad" kindref="member">NVM_RETCODE_INTEGRITY_FAILED</ref><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group___n_v_m_1ga99a942946bc461cc8bd78d3c3e2d68a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___n_v_m_1ga99a942946bc461cc8bd78d3c3e2d68a8" kindref="member">NVM_Endianness_E</ref></highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73" refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8a769ac34f562fde860571cdfaab93a03a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8a769ac34f562fde860571cdfaab93a03a" kindref="member">NVM_ENDIANNESS_NONE</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="74" refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8affc63ff772c51e0d895907fd785ecf02" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8affc63ff772c51e0d895907fd785ecf02" kindref="member">NVM_ENDIANNESS_BIG</ref>,</highlight></codeline>
<codeline lineno="75" refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8ae2a904fa35ce564470e4940e2659fba1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1gga99a942946bc461cc8bd78d3c3e2d68a8ae2a904fa35ce564470e4940e2659fba1" kindref="member">NVM_ENDIANNESS_LITTLE</ref></highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group___n_v_m_1gae94c83fa064e96f2871ea7edfd9e81d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___n_v_m_1gae94c83fa064e96f2871ea7edfd9e81d4" kindref="member">NVM_Mode_E</ref></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80" refid="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a10552f40228ae81939f1973179dbfcac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a10552f40228ae81939f1973179dbfcac" kindref="member">NVM_MODE_R</ref>,</highlight></codeline>
<codeline lineno="81" refid="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a344004b0c241de6a1f388b7e4cdf08e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___n_v_m_1ggae94c83fa064e96f2871ea7edfd9e81d4a344004b0c241de6a1f388b7e4cdf08e4" kindref="member">NVM_MODE_RW</ref></highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="struct_n_v_m___item___s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref></highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89" refid="struct_n_v_m___item___s_1afcee0e34004727f45552d6fff5f96dae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___n_v_m_1ga99a942946bc461cc8bd78d3c3e2d68a8" kindref="member">NVM_Endianness_E</ref><sp/><ref refid="struct_n_v_m___item___s_1afcee0e34004727f45552d6fff5f96dae" kindref="member">endianness</ref>;</highlight></codeline>
<codeline lineno="90" refid="struct_n_v_m___item___s_1af0061e323782661352eef9fdc64a25f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___n_v_m_1gae94c83fa064e96f2871ea7edfd9e81d4" kindref="member">NVM_Mode_E</ref><sp/><ref refid="struct_n_v_m___item___s_1af0061e323782661352eef9fdc64a25f4" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="91" refid="struct_n_v_m___item___s_1a73ec39a8332f2af7c24dac4f21929214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_n_v_m___item___s_1a73ec39a8332f2af7c24dac4f21929214" kindref="member">section_id</ref>;</highlight></codeline>
<codeline lineno="92" refid="struct_n_v_m___item___s_1ab72fd3a98fdcdd7388b52e8902b154e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___item___s_1ab72fd3a98fdcdd7388b52e8902b154e7" kindref="member">length_byte</ref>;</highlight></codeline>
<codeline lineno="93" refid="struct_n_v_m___item___s_1abe5b74a6bf41557a5ae72460fa563219" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___item___s_1abe5b74a6bf41557a5ae72460fa563219" kindref="member">start_address</ref>;<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="struct_n_v_m___section___s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_m___section___s" kindref="compound">NVM_Section_S</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101" refid="struct_n_v_m___section___s_1a73ec39a8332f2af7c24dac4f21929214" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="struct_n_v_m___section___s_1a73ec39a8332f2af7c24dac4f21929214" kindref="member">section_id</ref>;<sp/></highlight></codeline>
<codeline lineno="102" refid="struct_n_v_m___section___s_1ab72fd3a98fdcdd7388b52e8902b154e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___section___s_1ab72fd3a98fdcdd7388b52e8902b154e7" kindref="member">length_byte</ref>;<sp/></highlight></codeline>
<codeline lineno="103" refid="struct_n_v_m___section___s_1abe5b74a6bf41557a5ae72460fa563219" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___section___s_1abe5b74a6bf41557a5ae72460fa563219" kindref="member">start_address</ref>;<sp/></highlight></codeline>
<codeline lineno="104" refid="struct_n_v_m___section___s_1a41e5c8f996052f7a6acec8801688f38c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___section___s_1a41e5c8f996052f7a6acec8801688f38c" kindref="member">page_length_byte</ref>;<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="struct_n_v_m___s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref></highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114" refid="struct_n_v_m___s_1a852ae0d3e4d40ff478b57021e26c2d3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_m___section___s" kindref="compound">NVM_Section_S</ref><sp/><ref refid="struct_n_v_m___s_1a852ae0d3e4d40ff478b57021e26c2d3a" kindref="member">section</ref>;</highlight></codeline>
<codeline lineno="115" refid="struct_n_v_m___s_1a443e9db3c9b778a824431c82d50059c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="struct_n_v_m___s_1a443e9db3c9b778a824431c82d50059c2" kindref="member">page_buffer</ref>;</highlight></codeline>
<codeline lineno="116" refid="struct_n_v_m___s_1ae8bd03a2db5587d2b709f8c3608ab19c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="struct_n_v_m___s_1ae8bd03a2db5587d2b709f8c3608ab19c" kindref="member">page_buffer_size_byte</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gac14d043f334df1f2eb9ef2e14a3d6d3e" kindref="member">NVM_Initialize</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga185e01d7bd874d3bed92f89b826b2a36" kindref="member">NVM_Deinitialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga0c74591550f1b6fc54b99dfa62aec130" kindref="member">NVM_Read</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/>uint32_t<sp/>Length);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gabef20a303214c6809f7f44195993660a" kindref="member">NVM_Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*Value,<sp/>uint32_t<sp/>Length);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gaa0f57cc9a7aec055a48397c36a0031d6" kindref="member">NVM_ReadInt8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>*Value);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga09d6c1a83b40a03cde695099ead6cd38" kindref="member">NVM_ReadUInt8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>item,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<ref refid="_b_l_e_s_w___cycling_power_01_release_notes_8txt_1a5cad1470ef119e32b6400227eeaa8b18" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gaa9667ec8374c66a3221ce9b2b939ae95" kindref="member">NVM_ReadInt16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>*Value);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gae76ce69c3d5b1989dfc04e87a60c68f4" kindref="member">NVM_ReadUInt16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>*Value);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga59c0f810aab975ec27f742af491a85c5" kindref="member">NVM_ReadInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>*Value);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga6af6433336d64514c1f50f8d366061d3" kindref="member">NVM_ReadUInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>*Value);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga72f250b6fae63fb98826fe96cafd4b17" kindref="member">NVM_ReadInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>*Value);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga3f841e0342b2a27fd87b0f5096a14bfb" kindref="member">NVM_ReadUInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>*Value);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga1a5cba146e5a99edbd53ee689bb8acf3" kindref="member">NVM_WriteInt8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>*Value);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gaeb6c0ea8605a03bb5d020e1e3f318b5e" kindref="member">NVM_WriteUInt8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*Value);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga20f87fcc9883443e10bf3695a00c5028" kindref="member">NVM_WriteInt16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>*Value);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga2fe2c82f1ff2c6c5e641f327edd55db6" kindref="member">NVM_WriteUInt16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*Value);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga176ee779f7f3b13703d07e20a80f3f67" kindref="member">NVM_WriteInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*Value);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga33c1f04518989d1fc3715adfda590a29" kindref="member">NVM_WriteUInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*Value);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga8d283f14b009966c6f33c71fcf9caae6" kindref="member">NVM_WriteInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>*Value);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1gac8fa04776f22f479f76a48cf0c0282bc" kindref="member">NVM_WriteUInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___item___s" kindref="compound">NVM_Item_S</ref><sp/>Item,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*Value);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="group___b_c_d_s___r_e_t_c_o_d_e_1ga0e1ebc675650b0ceffc059d6b67699c7" kindref="member">Retcode_T</ref><sp/><ref refid="group___n_v_m_1ga49ed64fee7640e7e48312ae8c14ac264" kindref="member">NVM_Flush</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_n_v_m___s" kindref="compound">NVM_S</ref><sp/>*Nvm_obj);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>BCDS_NVM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Platform/Drivers/include/BCDS_NVM.h"/>
  </compounddef>
</doxygen>
