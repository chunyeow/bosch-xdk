<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___string_descr_8h" kind="file">
    <compoundname>Serval_StringDescr.h</compoundname>
    <includes refid="_serval___types_8h" local="no">Serval_Types.h</includes>
    <includedby refid="_serval___http_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Http.h</includedby>
    <includedby refid="_serval___msg_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Msg.h</includedby>
    <includedby refid="_serval___serializer_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Serializer.h</includedby>
    <includedby refid="_serval___url_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Url.h</includedby>
    <includedby refid="_serval___xml_parser_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XmlParser.h</includedby>
    <incdepgraph>
      <node id="31622">
        <label>stdbool.h</label>
      </node>
      <node id="31615">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="31616" relation="include">
        </childnode>
        <childnode refid="31656" relation="include">
        </childnode>
      </node>
      <node id="31626">
        <label>stdarg.h</label>
      </node>
      <node id="31653">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31638">
        <label>list.h</label>
      </node>
      <node id="31640">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="31641" relation="include">
        </childnode>
        <childnode refid="31620" relation="include">
        </childnode>
        <childnode refid="31619" relation="include">
        </childnode>
      </node>
      <node id="31614">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h</label>
        <link refid="Serval_StringDescr.h"/>
        <childnode refid="31615" relation="include">
        </childnode>
      </node>
      <node id="31618">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="31619" relation="include">
        </childnode>
      </node>
      <node id="31621">
        <label>stdint.h</label>
      </node>
      <node id="31619">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="31620" relation="include">
        </childnode>
      </node>
      <node id="31624">
        <label>stdlib.h</label>
      </node>
      <node id="31656">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="31632">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="31635">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="31636" relation="include">
        </childnode>
      </node>
      <node id="31643">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="31645">
        <label>user.h</label>
      </node>
      <node id="31639">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="31619" relation="include">
        </childnode>
        <childnode refid="31640" relation="include">
        </childnode>
        <childnode refid="31643" relation="include">
        </childnode>
      </node>
      <node id="31646">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31630">
        <label>stddef.h</label>
      </node>
      <node id="31648">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31628">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="31629" relation="include">
        </childnode>
        <childnode refid="31631" relation="include">
        </childnode>
        <childnode refid="31635" relation="include">
        </childnode>
        <childnode refid="31637" relation="include">
        </childnode>
      </node>
      <node id="31617">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="31618" relation="include">
        </childnode>
        <childnode refid="31620" relation="include">
        </childnode>
        <childnode refid="31625" relation="include">
        </childnode>
        <childnode refid="31626" relation="include">
        </childnode>
        <childnode refid="31627" relation="include">
        </childnode>
        <childnode refid="31624" relation="include">
        </childnode>
        <childnode refid="31615" relation="include">
        </childnode>
        <childnode refid="31628" relation="include">
        </childnode>
        <childnode refid="31639" relation="include">
        </childnode>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31625">
        <label>limits.h</label>
      </node>
      <node id="31634">
        <label>portable.h</label>
      </node>
      <node id="31642">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="31623">
        <label>string.h</label>
      </node>
      <node id="31641">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="31642" relation="include">
        </childnode>
        <childnode refid="31619" relation="include">
        </childnode>
      </node>
      <node id="31620">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="31621" relation="include">
        </childnode>
        <childnode refid="31622" relation="include">
        </childnode>
        <childnode refid="31623" relation="include">
        </childnode>
        <childnode refid="31624" relation="include">
        </childnode>
      </node>
      <node id="31633">
        <label>projdefs.h</label>
      </node>
      <node id="31655">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="31654">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31650">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31636">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="31651">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31649">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31637">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="31638" relation="include">
        </childnode>
      </node>
      <node id="31652">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31631">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="31621" relation="include">
        </childnode>
        <childnode refid="31618" relation="include">
        </childnode>
        <childnode refid="31632" relation="include">
        </childnode>
      </node>
      <node id="31616">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="31617" relation="include">
        </childnode>
      </node>
      <node id="31629">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="31630" relation="include">
        </childnode>
        <childnode refid="31621" relation="include">
        </childnode>
        <childnode refid="31631" relation="include">
        </childnode>
        <childnode refid="31633" relation="include">
        </childnode>
        <childnode refid="31634" relation="include">
        </childnode>
      </node>
      <node id="31627">
        <label>stdio.h</label>
      </node>
      <node id="31647">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="31644" relation="include">
        </childnode>
      </node>
      <node id="31644">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="31645" relation="include">
        </childnode>
        <childnode refid="31646" relation="include">
        </childnode>
        <childnode refid="31647" relation="include">
        </childnode>
        <childnode refid="31648" relation="include">
        </childnode>
        <childnode refid="31649" relation="include">
        </childnode>
        <childnode refid="31650" relation="include">
        </childnode>
        <childnode refid="31651" relation="include">
        </childnode>
        <childnode refid="31652" relation="include">
        </childnode>
        <childnode refid="31653" relation="include">
        </childnode>
        <childnode refid="31654" relation="include">
        </childnode>
        <childnode refid="31655" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="31703">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MSensorDeviceEnvironment.c</label>
        <link refid="_l_w_m2_m_sensor_device_environment_8c"/>
      </node>
      <node id="31674">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_CoapServer.h</label>
        <link refid="_serval___coap_server_8h"/>
        <childnode refid="31675" relation="include">
        </childnode>
      </node>
      <node id="31665">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Webserver.h</label>
        <link refid="_serval___webserver_8h"/>
      </node>
      <node id="31688">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjects.c</label>
        <link refid="_l_w_m2_m_objects_8c"/>
      </node>
      <node id="31678">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjects.h</label>
        <link refid="_l_w_m2_m_objects_8h"/>
        <childnode refid="31677" relation="include">
        </childnode>
        <childnode refid="31679" relation="include">
        </childnode>
        <childnode refid="31680" relation="include">
        </childnode>
        <childnode refid="31681" relation="include">
        </childnode>
        <childnode refid="31682" relation="include">
        </childnode>
        <childnode refid="31683" relation="include">
        </childnode>
        <childnode refid="31684" relation="include">
        </childnode>
        <childnode refid="31685" relation="include">
        </childnode>
        <childnode refid="31686" relation="include">
        </childnode>
        <childnode refid="31687" relation="include">
        </childnode>
        <childnode refid="31688" relation="include">
        </childnode>
        <childnode refid="31689" relation="include">
        </childnode>
        <childnode refid="31690" relation="include">
        </childnode>
        <childnode refid="31691" relation="include">
        </childnode>
      </node>
      <node id="31672">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_CoapClient.h</label>
        <link refid="_serval___coap_client_8h"/>
        <childnode refid="31673" relation="include">
        </childnode>
      </node>
      <node id="31679">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectAlertNotification.c</label>
        <link refid="_l_w_m2_m_object_alert_notification_8c"/>
      </node>
      <node id="31706">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectAlertNotification.h</label>
        <link refid="_l_w_m2_m_object_alert_notification_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31679" relation="include">
        </childnode>
      </node>
      <node id="31682">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectDevice.c</label>
        <link refid="_l_w_m2_m_object_device_8c"/>
      </node>
      <node id="31701">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MSensorDeviceIlluminance.c</label>
        <link refid="_l_w_m2_m_sensor_device_illuminance_8c"/>
      </node>
      <node id="31693">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectDevice.h</label>
        <link refid="_l_w_m2_m_object_device_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31682" relation="include">
        </childnode>
      </node>
      <node id="31661">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Resources.h</label>
        <link refid="_serval___resources_8h"/>
      </node>
      <node id="31681">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectConnectivityMonitoring.c</label>
        <link refid="_l_w_m2_m_object_connectivity_monitoring_8c"/>
      </node>
      <node id="31657">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h</label>
        <link refid="Serval_StringDescr.h"/>
        <childnode refid="31658" relation="include">
        </childnode>
        <childnode refid="31666" relation="include">
        </childnode>
        <childnode refid="31714" relation="include">
        </childnode>
        <childnode refid="31715" relation="include">
        </childnode>
        <childnode refid="31716" relation="include">
        </childnode>
      </node>
      <node id="31694">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectConnectivityMonitoring.h</label>
        <link refid="_l_w_m2_m_object_connectivity_monitoring_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
      </node>
      <node id="31663">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestClient.h</label>
        <link refid="_serval___rest_client_8h"/>
      </node>
      <node id="31692">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MSensorDeviceAccelerometer.c</label>
        <link refid="_l_w_m2_m_sensor_device_accelerometer_8c"/>
      </node>
      <node id="31660">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_HttpServer.h</label>
        <link refid="_serval___http_server_8h"/>
      </node>
      <node id="31714">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Serializer.h</label>
        <link refid="_serval___serializer_8h"/>
      </node>
      <node id="31710">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Flags.h</label>
        <link refid="_mbed_t_l_s___flags_8h"/>
      </node>
      <node id="31662">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Rest.h</label>
        <link refid="_serval___rest_8h"/>
        <childnode refid="31661" relation="include">
        </childnode>
        <childnode refid="31663" relation="include">
        </childnode>
        <childnode refid="31664" relation="include">
        </childnode>
      </node>
      <node id="31664">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_RestServer.h</label>
        <link refid="_serval___rest_server_8h"/>
      </node>
      <node id="31689">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectSensorDevice.c</label>
        <link refid="_l_w_m2_m_object_sensor_device_8c"/>
      </node>
      <node id="31712">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpClient.h</label>
        <link refid="_serval___x_tcp_client_8h"/>
      </node>
      <node id="31704">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectSensorDevice.h</label>
        <link refid="_l_w_m2_m_object_sensor_device_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31682" relation="include">
        </childnode>
        <childnode refid="31689" relation="include">
        </childnode>
      </node>
      <node id="31669">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Socket.h</label>
        <link refid="_mbed_t_l_s___socket_8h"/>
      </node>
      <node id="31709">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Security.h</label>
        <link refid="_serval___security_8h"/>
        <childnode refid="31710" relation="include">
        </childnode>
        <childnode refid="31667" relation="include">
        </childnode>
        <childnode refid="31671" relation="include">
        </childnode>
        <childnode refid="31672" relation="include">
        </childnode>
        <childnode refid="31674" relation="include">
        </childnode>
        <childnode refid="31675" relation="include">
        </childnode>
        <childnode refid="31663" relation="include">
        </childnode>
        <childnode refid="31664" relation="include">
        </childnode>
      </node>
      <node id="31699">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MSensorDeviceMagnetometer.c</label>
        <link refid="_l_w_m2_m_sensor_device_magnetometer_8c"/>
      </node>
      <node id="31715">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Url.h</label>
        <link refid="_serval___url_8h"/>
        <childnode refid="31675" relation="include">
        </childnode>
      </node>
      <node id="31690">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectTemperature.c</label>
        <link refid="_l_w_m2_m_object_temperature_8c"/>
      </node>
      <node id="31666">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="31667" relation="include">
        </childnode>
        <childnode refid="31668" relation="include">
        </childnode>
        <childnode refid="31671" relation="include">
        </childnode>
        <childnode refid="31672" relation="include">
        </childnode>
        <childnode refid="31674" relation="include">
        </childnode>
        <childnode refid="31658" relation="include">
        </childnode>
        <childnode refid="31659" relation="include">
        </childnode>
        <childnode refid="31675" relation="include">
        </childnode>
        <childnode refid="31708" relation="include">
        </childnode>
        <childnode refid="31662" relation="include">
        </childnode>
        <childnode refid="31663" relation="include">
        </childnode>
        <childnode refid="31709" relation="include">
        </childnode>
        <childnode refid="31665" relation="include">
        </childnode>
        <childnode refid="31711" relation="include">
        </childnode>
        <childnode refid="31712" relation="include">
        </childnode>
        <childnode refid="31713" relation="include">
        </childnode>
      </node>
      <node id="31658">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Http.h</label>
        <link refid="_serval___http_8h"/>
        <childnode refid="31659" relation="include">
        </childnode>
        <childnode refid="31660" relation="include">
        </childnode>
        <childnode refid="31661" relation="include">
        </childnode>
        <childnode refid="31662" relation="include">
        </childnode>
        <childnode refid="31664" relation="include">
        </childnode>
        <childnode refid="31665" relation="include">
        </childnode>
      </node>
      <node id="31685">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectIlluminance.c</label>
        <link refid="_l_w_m2_m_object_illuminance_8c"/>
      </node>
      <node id="31700">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectIlluminance.h</label>
        <link refid="_l_w_m2_m_object_illuminance_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31701" relation="include">
        </childnode>
      </node>
      <node id="31711">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcp.h</label>
        <link refid="_serval___x_tcp_8h"/>
        <childnode refid="31661" relation="include">
        </childnode>
        <childnode refid="31712" relation="include">
        </childnode>
        <childnode refid="31670" relation="include">
        </childnode>
      </node>
      <node id="31708">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="31666" relation="include">
        </childnode>
      </node>
      <node id="31673">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectFirmwareUpdate.c</label>
        <link refid="_l_w_m2_m_object_firmware_update_8c"/>
      </node>
      <node id="31686">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectLightControl.c</label>
        <link refid="_l_w_m2_m_object_light_control_8c"/>
      </node>
      <node id="31695">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectFirmwareUpdate.h</label>
        <link refid="_l_w_m2_m_object_firmware_update_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31673" relation="include">
        </childnode>
      </node>
      <node id="31687">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectMagnetometer.c</label>
        <link refid="_l_w_m2_m_object_magnetometer_8c"/>
      </node>
      <node id="31705">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectLightControl.h</label>
        <link refid="_l_w_m2_m_object_light_control_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31686" relation="include">
        </childnode>
      </node>
      <node id="31698">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectMagnetometer.h</label>
        <link refid="_l_w_m2_m_object_magnetometer_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31699" relation="include">
        </childnode>
      </node>
      <node id="31713">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XUdp.h</label>
        <link refid="_serval___x_udp_8h"/>
      </node>
      <node id="31675">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_Lwm2m.h</label>
        <link refid="_serval___lwm2m_8h"/>
        <childnode refid="31676" relation="include">
        </childnode>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31693" relation="include">
        </childnode>
        <childnode refid="31694" relation="include">
        </childnode>
        <childnode refid="31695" relation="include">
        </childnode>
        <childnode refid="31696" relation="include">
        </childnode>
        <childnode refid="31698" relation="include">
        </childnode>
        <childnode refid="31700" relation="include">
        </childnode>
        <childnode refid="31702" relation="include">
        </childnode>
        <childnode refid="31704" relation="include">
        </childnode>
        <childnode refid="31705" relation="include">
        </childnode>
        <childnode refid="31706" relation="include">
        </childnode>
        <childnode refid="31707" relation="include">
        </childnode>
        <childnode refid="31677" relation="include">
        </childnode>
        <childnode refid="31679" relation="include">
        </childnode>
        <childnode refid="31686" relation="include">
        </childnode>
        <childnode refid="31688" relation="include">
        </childnode>
        <childnode refid="31689" relation="include">
        </childnode>
        <childnode refid="31697" relation="include">
        </childnode>
        <childnode refid="31701" relation="include">
        </childnode>
      </node>
      <node id="31670">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpServer.h</label>
        <link refid="_serval___x_tcp_server_8h"/>
      </node>
      <node id="31671">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Udp.h</label>
        <link refid="_serval___udp_8h"/>
        <childnode refid="31669" relation="include">
        </childnode>
        <childnode refid="31667" relation="include">
        </childnode>
      </node>
      <node id="31668">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h</label>
        <link refid="_serval___tcp_8h"/>
        <childnode refid="31669" relation="include">
        </childnode>
        <childnode refid="31667" relation="include">
        </childnode>
        <childnode refid="31660" relation="include">
        </childnode>
        <childnode refid="31670" relation="include">
        </childnode>
      </node>
      <node id="31716">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="31666" relation="include">
        </childnode>
      </node>
      <node id="31677">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectAccelerometer.c</label>
        <link refid="_l_w_m2_m_object_accelerometer_8c"/>
      </node>
      <node id="31667">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</label>
        <link refid="_mbed_t_l_s___tls_8h"/>
      </node>
      <node id="31676">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectAccelerometer.h</label>
        <link refid="_l_w_m2_m_object_accelerometer_8h"/>
        <childnode refid="31677" relation="include">
        </childnode>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31692" relation="include">
        </childnode>
      </node>
      <node id="31684">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectHumidity.c</label>
        <link refid="_l_w_m2_m_object_humidity_8c"/>
      </node>
      <node id="31697">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MSensorDeviceGyroscope.c</label>
        <link refid="_l_w_m2_m_sensor_device_gyroscope_8c"/>
      </node>
      <node id="31680">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectBarometer.c</label>
        <link refid="_l_w_m2_m_object_barometer_8c"/>
      </node>
      <node id="31702">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectBarometer.h</label>
        <link refid="_l_w_m2_m_object_barometer_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31703" relation="include">
        </childnode>
      </node>
      <node id="31659">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_HttpClient.h</label>
        <link refid="_serval___http_client_8h"/>
      </node>
      <node id="31691">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MUtil.c</label>
        <link refid="_l_w_m2_m_util_8c"/>
      </node>
      <node id="31707">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MUtil.h</label>
        <link refid="_l_w_m2_m_util_8h"/>
        <childnode refid="31677" relation="include">
        </childnode>
        <childnode refid="31679" relation="include">
        </childnode>
        <childnode refid="31680" relation="include">
        </childnode>
        <childnode refid="31681" relation="include">
        </childnode>
        <childnode refid="31683" relation="include">
        </childnode>
        <childnode refid="31684" relation="include">
        </childnode>
        <childnode refid="31685" relation="include">
        </childnode>
        <childnode refid="31686" relation="include">
        </childnode>
        <childnode refid="31687" relation="include">
        </childnode>
        <childnode refid="31689" relation="include">
        </childnode>
        <childnode refid="31690" relation="include">
        </childnode>
        <childnode refid="31691" relation="include">
        </childnode>
      </node>
      <node id="31683">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectGyroscope.c</label>
        <link refid="_l_w_m2_m_object_gyroscope_8c"/>
      </node>
      <node id="31696">
        <label>SDK/xdk110/Common/source/Connectivity/LWM2M/LWM2MObjectGyroscope.h</label>
        <link refid="_l_w_m2_m_object_gyroscope_8h"/>
        <childnode refid="31678" relation="include">
        </childnode>
        <childnode refid="31697" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_string_descr___s" prot="public">StringDescr_S</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" prot="public" static="no">
        <type>struct <ref refid="struct_string_descr___s" kindref="compound">StringDescr_S</ref></type>
        <definition>typedef struct StringDescr_S StringDescr_T</definition>
        <argsstring></argsstring>
        <name>StringDescr_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure describes a string by a pointer to the start location and its length.</para><para><simplesect kind="see"><para>struct <ref refid="struct_string_descr___s" kindref="compound">StringDescr_S</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="46" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___string_descr_8h_1ae923a3cf3155c2a374223ee119d86859" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char</type>
        <definition>static char StringDescr_charAt</definition>
        <argsstring>(const StringDescr_T *str_ptr, int pos)</argsstring>
        <name>StringDescr_charAt</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the character at a specified position in the string associated with the given instance of string descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor been used. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>This will contain starting point of the string when the function returns.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Character in the given string at the desired position. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="133" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="133" bodyend="141"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a1d834877c822e0e864d6fcfeba39ef3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_clone</definition>
        <argsstring>(StringDescr_T *dest_ptr, const StringDescr_T *src_ptr)</argsstring>
        <name>StringDescr_clone</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to clone a String Descriptor which means that the description information of src will be cloned to dest. The content characters will not be copied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of destination string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" kindref="member">StringDescr_cloneSegment()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="240" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="240" bodyend="244"/>
        <references refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" compoundref="_serval___string_descr_8h" startline="209" endline="221">StringDescr_cloneSegment</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <referencedby refid="_serval___xml_parser_8h_1a5d07507e488300f281268ed90bb755b9" compoundref="_serval___xml_parser_8h" startline="198" endline="202">XmlParser_getTagName</referencedby>
        <referencedby refid="_serval___xml_parser_8h_1afe76488d83b15ba1b02952abf0f06664" compoundref="_serval___xml_parser_8h" startline="221" endline="225">XmlParser_getTagValue</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1aa7b4a516378481373d7286b6606e35c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_cloneFrom</definition>
        <argsstring>(StringDescr_T *dest_ptr, const StringDescr_T *src_ptr, int pos)</argsstring>
        <name>StringDescr_cloneFrom</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to clone a String Descriptor which means that the description information of src will be cloned to dest. The clone operation considers only the segment of the source String Descriptor starting at the specified position. The content characters will not be copied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of destination string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The start position of the segment of src which the clone operation should consider. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="265" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="265" bodyend="270"/>
        <references refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" compoundref="_serval___string_descr_8h" startline="209" endline="221">StringDescr_cloneSegment</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_cloneSegment</definition>
        <argsstring>(StringDescr_T *dest_ptr, const StringDescr_T *src_ptr, int pos, int n)</argsstring>
        <name>StringDescr_cloneSegment</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to clone a String Descriptor which means that the description information of src will be cloned to dest. The clone operation considers only a particular segment of the source String Descriptor. The content characters will not be copied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dest_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of destination string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The start position of the segment of src which the clone operation should consider.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the segment of src which the clone operation should consider. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="209" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="209" bodyend="221"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <referencedby refid="_serval___string_descr_8h_1a1d834877c822e0e864d6fcfeba39ef3f" compoundref="_serval___string_descr_8h" startline="240" endline="244">StringDescr_clone</referencedby>
        <referencedby refid="_serval___string_descr_8h_1aa7b4a516378481373d7286b6606e35c4" compoundref="_serval___string_descr_8h" startline="265" endline="270">StringDescr_cloneFrom</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a0d86ae3890fbe2ac8895194cc2218a0d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_compare</definition>
        <argsstring>(const StringDescr_T *str_ptr, const char *cstr)</argsstring>
        <name>StringDescr_compare</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a string description with a char string, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="461" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="461" bodyend="465"/>
        <references refid="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" compoundref="_serval___string_descr_8h" startline="431" endline="445">StringDescr_compareFrom</references>
        <referencedby refid="_l_w_m2_m_object_sensor_device_8c_1a08a55806d7f3e9a2bf776aa0939e13a5" compoundref="_l_w_m2_m_object_sensor_device_8c" startline="240" endline="302">PreprocessingMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_compareFrom</definition>
        <argsstring>(const StringDescr_T *str_ptr, int pos, const char *cstr)</argsstring>
        <name>StringDescr_compareFrom</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a string description with a char string at a certain position, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position inside the string description</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="431" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="431" bodyend="445"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <references refid="group___b_a_s_i_c_s_1gaa93f0eb578d23995850d61f7d61c55c1" compoundref="_b_c_d_s___basics_8h" startline="76">FALSE</references>
        <references refid="_serval___string_descr_8h_1a0190f49f8e01c85cdcc51d31181528b2">StringDescr_compareSegment</references>
        <referencedby refid="_serval___string_descr_8h_1a0d86ae3890fbe2ac8895194cc2218a0d" compoundref="_serval___string_descr_8h" startline="461" endline="465">StringDescr_compare</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_compareFromNoCase</definition>
        <argsstring>(StringDescr_T const *str_ptr, int pos, char const *cstr)</argsstring>
        <name>StringDescr_compareFromNoCase</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> const *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a segment of string description with a char string starting at a certain position, ignoring case, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position inside the string description</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513" kindref="member">StringDescr_compareSegmentNoCase()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="514" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="514" bodyend="529"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <references refid="group___b_a_s_i_c_s_1gaa93f0eb578d23995850d61f7d61c55c1" compoundref="_b_c_d_s___basics_8h" startline="76">FALSE</references>
        <references refid="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513">StringDescr_compareSegmentNoCase</references>
        <referencedby refid="_serval___string_descr_8h_1a153b7a9a88ee2d13ec948c4e82c26159" compoundref="_serval___string_descr_8h" startline="546" endline="550">StringDescr_compareNoCase</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a153b7a9a88ee2d13ec948c4e82c26159" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_compareNoCase</definition>
        <argsstring>(const StringDescr_T *str_ptr, const char *cstr)</argsstring>
        <name>StringDescr_compareNoCase</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a segment of string description with a char string starting at a certain position, ignoring case, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="546" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="546" bodyend="550"/>
        <references refid="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" compoundref="_serval___string_descr_8h" startline="514" endline="529">StringDescr_compareFromNoCase</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a0190f49f8e01c85cdcc51d31181528b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool StringDescr_compareSegment</definition>
        <argsstring>(const StringDescr_T *str_ptr, int pos, const char *cstr, int n)</argsstring>
        <name>StringDescr_compareSegment</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a segment of string description with a string starting at a certain position, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position inside the string description</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters which should be considered in the comparison</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="410" column="1"/>
        <referencedby refid="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" compoundref="_serval___string_descr_8h" startline="431" endline="445">StringDescr_compareFrom</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool StringDescr_compareSegmentNoCase</definition>
        <argsstring>(StringDescr_T const *str_ptr, int pos, char const *cstr, int n)</argsstring>
        <name>StringDescr_compareSegmentNoCase</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> const *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>cstr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function compares a segment of string description with <computeroutput>n</computeroutput> characters of a string starting at a certain position, ignoring case, and returns the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>Starting position inside the string description</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>C string to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of character of cstr to be used for the compare</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found equal, otherwise false.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513" kindref="member">StringDescr_compareSegmentNoCase()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="491" column="1"/>
        <referencedby refid="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" compoundref="_serval___string_descr_8h" startline="514" endline="529">StringDescr_compareFromNoCase</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a22e09d034d1e6fa7150bb94ead426ff5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_copy</definition>
        <argsstring>(const StringDescr_T *src_ptr, char *buf_ptr)</argsstring>
        <name>StringDescr_copy</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to copy the string which is described by a string descriptor into a char buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination character buffer, This must be valid. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="322" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="322" bodyend="326"/>
        <references refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" compoundref="_serval___string_descr_8h" startline="290" endline="308">StringDescr_copySegment</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1afdf80c13e1ae2d4a467f57db35ac0068" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_copyFrom</definition>
        <argsstring>(const StringDescr_T *src_ptr, char *buf_ptr, int pos)</argsstring>
        <name>StringDescr_copyFrom</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to copy the string which is described by a string descriptor into a char buffer from a given offset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination character buffer. This must be valid.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position at which the copy operation shout start</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" kindref="member">StringDescr_copySegment()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="346" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="346" bodyend="350"/>
        <references refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" compoundref="_serval___string_descr_8h" startline="290" endline="308">StringDescr_copySegment</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_copySegment</definition>
        <argsstring>(const StringDescr_T *src_ptr, char *buf_ptr, int pos, int n)</argsstring>
        <name>StringDescr_copySegment</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>src_ptr</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to copy a segment of the string described by a string descriptor into a char buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of source string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buf_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination character buffer, This must be valid.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The position at which the copy operation shout start</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of characters which should be maximally copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="290" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="290" bodyend="308"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <referencedby refid="_serval___string_descr_8h_1a22e09d034d1e6fa7150bb94ead426ff5" compoundref="_serval___string_descr_8h" startline="322" endline="326">StringDescr_copy</referencedby>
        <referencedby refid="_serval___string_descr_8h_1afdf80c13e1ae2d4a467f57db35ac0068" compoundref="_serval___string_descr_8h" startline="346" endline="350">StringDescr_copyFrom</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a189769193e5ea764aada0b11536f1f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StringDescr_findFirstChar</definition>
        <argsstring>(const StringDescr_T *str_ptr, int offset, char c)</argsstring>
        <name>StringDescr_findFirstChar</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function finds and returns first occurrence of a character inside a String Descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be searched.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The position at which the search is starting.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the character or -1 if character is not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1ae67ff33c3e83040ee4e344f31360a331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StringDescr_findLastChar</definition>
        <argsstring>(const StringDescr_T *str_ptr, char c)</argsstring>
        <name>StringDescr_findLastChar</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function finds and returns last occurrence of a character inside a String Descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be searched.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">c</parametername>
</parameternamelist>
<parameterdescription>
<para>Character to look for.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Position of the character or -1 if character is not found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a48f840636ff8dc19ddec82ecbb6be6ba" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_get</definition>
        <argsstring>(const StringDescr_T *str_ptr, const char **start_pptr, int *len_ptr)</argsstring>
        <name>StringDescr_get</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>start_pptr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to fetch start and length associated with the given instance of string descriptor. The function <ref refid="_serval___string_descr_8h_1a1116282749b8ea51fa5332b324ea6aaa" kindref="member">StringDescr_set()</ref> should have been called before calling this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor been used. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_pptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This will contain starting point of the string when the function returns.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This will contain length of the string when the function returns. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="106" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="106" bodyend="116"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1ad43b4ca414a6593ff60b47abaad08abf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int StringDescr_getLength</definition>
        <argsstring>(const StringDescr_T *str_ptr)</argsstring>
        <name>StringDescr_getLength</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function returns the total length of the entire string described by the given String Descriptor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor been used. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Total length of the string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="156" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="156" bodyend="162"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a738627f0f9f6774da12f3a4d10851f69" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_isValid</definition>
        <argsstring>(const StringDescr_T *str_ptr)</argsstring>
        <name>StringDescr_isValid</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks the state of the string descriptor, and sees if the string descriptor is valid or not.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be checked. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if string descriptor is valid false if it is not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="84" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="84" bodyend="87"/>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1aa9c9bcb06c81e92f12882bc89712a93b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool StringDescr_parseUInt</definition>
        <argsstring>(const StringDescr_T *str_ptr, uint32_t *value)</argsstring>
        <name>StringDescr_parseUInt</name>
        <param>
          <type>const <ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function parses the given string descriptor for an unsigned integer. It does not handle leading or trailing characters and will produce an error if those are found.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be compared.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>the parsed value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if parsing went ok, false otherwise</para></simplesect>
<simplesect kind="since"><para>1.4 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="568" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="568" bodyend="582"/>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a1116282749b8ea51fa5332b324ea6aaa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_set</definition>
        <argsstring>(StringDescr_T *str_ptr, char const *start_ptr, int len)</argsstring>
        <name>StringDescr_set</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>start_ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to initialize and prepare a instance of string descriptor. This function must be called before a string descriptor is used.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of string descriptor to be used. It has to be a valid pointer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>This gives starting point of the string.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>This gives length of the string. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="64" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="64" bodyend="69"/>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
        <referencedby refid="_l_w_m2_m_object_alert_notification_8c_1a01d015f58e522b96fe78da5239ef807e" compoundref="_l_w_m2_m_object_alert_notification_8c" startline="94" endline="109">LWM2MReadAlert</referencedby>
        <referencedby refid="_l_w_m2_m_object_connectivity_monitoring_8c_1ab7290eeb15fa57cfea5ff96548cafa4d" compoundref="_l_w_m2_m_object_connectivity_monitoring_8c" startline="109" endline="135">LWM2MGetIpAddresses</referencedby>
        <referencedby refid="_l_w_m2_m_object_device_8c_1a4a0d17b387729985f84da89c04b23136" compoundref="_l_w_m2_m_object_device_8c" startline="308" endline="319">serialNumber_RO</referencedby>
        <referencedby refid="_l_w_m2_m_object_device_8c_1a72f81af0f315534ff20ce377eb3f12fd" compoundref="_l_w_m2_m_object_device_8c" startline="325" endline="342">firmwareVersionNumber_RO</referencedby>
        <referencedby refid="_l_w_m2_m_object_sensor_device_8c_1a08a55806d7f3e9a2bf776aa0939e13a5" compoundref="_l_w_m2_m_object_sensor_device_8c" startline="240" endline="302">PreprocessingMode</referencedby>
      </memberdef>
      <memberdef kind="function" id="_serval___string_descr_8h_1a37de2785404cf3291aa2b11cdbe7ed2a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StringDescr_wrap</definition>
        <argsstring>(StringDescr_T *dest_ptr, const char *cstr)</argsstring>
        <name>StringDescr_wrap</name>
        <param>
          <type><ref refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" kindref="member">StringDescr_T</ref> *</type>
          <declname>dest_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to record the description information (i.e. start address and length) of the given string in the given String Descriptor. The content characters will not be copied.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dest_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a StringDescr_T object which identifies the instance of destination string descriptor.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cstr</parametername>
</parameternamelist>
<parameterdescription>
<para>The string which should be described by the String Descriptor. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" line="177" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h" bodystart="177" bodyend="184"/>
        <references refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" compoundref="_b_c_d_s___assert_8h" startline="136">assert</references>
        <references refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" compoundref="_b_c_d_s___basics_8h" startline="80">NULL</references>
        <references refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" compoundref="_serval___string_descr_8h" startline="43">StringDescr_S::start</references>
        <references refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" compoundref="_serval___string_descr_8h" startline="45">StringDescr_S::length</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module defines a string descriptor type.</para><para>This interface provides type definitions, data types and functions to handle string descriptors. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor">#ifndef<sp/>SERVAL_STRINGDESCRIPTOR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_STRINGDESCRIPTOR_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="_serval___string_descr_8h_1ad82afa1f45d8b5df018f5f1f7707c3bd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_string_descr___s" kindref="compound">StringDescr_S</ref><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="struct_string_descr___s" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_string_descr___s" kindref="compound">StringDescr_S</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Starting<sp/>point<sp/>of<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Length<sp/>of<sp/>the<sp/>string<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="_serval___string_descr_8h_1a1116282749b8ea51fa5332b324ea6aaa" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a1116282749b8ea51fa5332b324ea6aaa" kindref="member">StringDescr_set</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>start_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>=<sp/>start_ptr;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="_serval___string_descr_8h_1a738627f0f9f6774da12f3a4d10851f69" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a738627f0f9f6774da12f3a4d10851f69" kindref="member">StringDescr_isValid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref><sp/>&amp;&amp;<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_serval___string_descr_8h_1a48f840636ff8dc19ddec82ecbb6be6ba" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a48f840636ff8dc19ddec82ecbb6be6ba" kindref="member">StringDescr_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**start_pptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len_ptr)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(start_pptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(len_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>*start_pptr<sp/>=<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>*len_ptr<sp/>=<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="_serval___string_descr_8h_1ae923a3cf3155c2a374223ee119d86859" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1ae923a3cf3155c2a374223ee119d86859" kindref="member">StringDescr_charAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>&lt;<sp/>str_ptr-&gt;length);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>[pos];</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="_serval___string_descr_8h_1ad43b4ca414a6593ff60b47abaad08abf" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1ad43b4ca414a6593ff60b47abaad08abf" kindref="member">StringDescr_getLength</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="_serval___string_descr_8h_1a37de2785404cf3291aa2b11cdbe7ed2a" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a37de2785404cf3291aa2b11cdbe7ed2a" kindref="member">StringDescr_wrap</ref>(<ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*dest_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(dest_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(cstr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>=<sp/>cstr;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>=<sp/>strlen(cstr);</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" kindref="member">StringDescr_cloneSegment</ref>(<ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*dest_ptr,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="211"><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(dest_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(src_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>==<sp/>0<sp/>||<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>+<sp/>n<sp/>&lt;=<sp/>src_ptr-&gt;length);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>=<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>n<sp/>&lt;<sp/>(src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos)<sp/>?<sp/>n<sp/>:<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="_serval___string_descr_8h_1a1d834877c822e0e864d6fcfeba39ef3f" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a1d834877c822e0e864d6fcfeba39ef3f" kindref="member">StringDescr_clone</ref>(<ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*dest_ptr,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" kindref="member">StringDescr_cloneSegment</ref>(dest_ptr,<sp/>src_ptr,<sp/>0,<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="_serval___string_descr_8h_1aa7b4a516378481373d7286b6606e35c4" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1aa7b4a516378481373d7286b6606e35c4" kindref="member">StringDescr_cloneFrom</ref>(<ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*dest_ptr,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___string_descr_8h_1a0b6f1c3fc0df7102b8fd1aaa1d0f71d9" kindref="member">StringDescr_cloneSegment</ref>(dest_ptr,<sp/>src_ptr,<sp/>pos,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" kindref="member">StringDescr_copySegment</ref>(</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>==<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(src_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(buf_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//below<sp/>allow<sp/>pos<sp/>==<sp/>0<sp/>in<sp/>case<sp/>we<sp/>have<sp/>an<sp/>empty<sp/>StringDescr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(pos<sp/>==<sp/>0<sp/>||<sp/>pos<sp/>&lt;<sp/>src_ptr-&gt;length);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pos<sp/>+<sp/>n<sp/>&gt;<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buf_ptr,<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>+<sp/>pos,<sp/>n);</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="_serval___string_descr_8h_1a22e09d034d1e6fa7150bb94ead426ff5" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a22e09d034d1e6fa7150bb94ead426ff5" kindref="member">StringDescr_copy</ref>(</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf_ptr)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" kindref="member">StringDescr_copySegment</ref>(src_ptr,<sp/>buf_ptr,<sp/>0,<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="_serval___string_descr_8h_1afdf80c13e1ae2d4a467f57db35ac0068" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1afdf80c13e1ae2d4a467f57db35ac0068" kindref="member">StringDescr_copyFrom</ref>(</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*src_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___string_descr_8h_1a74ba7e71611919cba3b4510bd9d08252" kindref="member">StringDescr_copySegment</ref>(src_ptr,<sp/>buf_ptr,<sp/>pos,<sp/>src_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1ae67ff33c3e83040ee4e344f31360a331" kindref="member">StringDescr_findLastChar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a189769193e5ea764aada0b11536f1f39" kindref="member">StringDescr_findFirstChar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a0190f49f8e01c85cdcc51d31181528b2" kindref="member">StringDescr_compareSegment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" kindref="member">StringDescr_compareFrom</ref>(</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(cstr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(cstr);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>!=<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___b_a_s_i_c_s_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a0190f49f8e01c85cdcc51d31181528b2" kindref="member">StringDescr_compareSegment</ref>(str_ptr,<sp/>pos,<sp/>cstr,<sp/>len);</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="_serval___string_descr_8h_1a0d86ae3890fbe2ac8895194cc2218a0d" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a0d86ae3890fbe2ac8895194cc2218a0d" kindref="member">StringDescr_compare</ref>(</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr)</highlight></codeline>
<codeline lineno="463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a3c40bb13d0f8453cd0b89f5d53e44370" kindref="member">StringDescr_compareFrom</ref>(str_ptr,<sp/>0,<sp/>cstr);</highlight></codeline>
<codeline lineno="465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513" kindref="member">StringDescr_compareSegmentNoCase</ref>(</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*cstr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" kindref="member">StringDescr_compareFromNoCase</ref>(</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*str_ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*cstr)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref><sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___a_s_s_e_r_t_1ga0041af519e0e7d47c9bcc83760c4669e" kindref="member">assert</ref>(cstr<sp/>!=<sp/><ref refid="group___b_a_s_i_c_s_1ga070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(cstr);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>!=<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>-<sp/>pos)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group___b_a_s_i_c_s_1gaa93f0eb578d23995850d61f7d61c55c1" kindref="member">FALSE</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a6f0158d0e3f5ef53b01f00299adfb513" kindref="member">StringDescr_compareSegmentNoCase</ref>(str_ptr,<sp/>pos,<sp/>cstr,<sp/>len);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="_serval___string_descr_8h_1a153b7a9a88ee2d13ec948c4e82c26159" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1a153b7a9a88ee2d13ec948c4e82c26159" kindref="member">StringDescr_compareNoCase</ref>(</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref><sp/>*str_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstr)</highlight></codeline>
<codeline lineno="548"><highlight class="normal">{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1ab6a4d5521d110050509901412566c13e" kindref="member">StringDescr_compareFromNoCase</ref>(str_ptr,<sp/>0,<sp/>cstr);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="_serval___string_descr_8h_1aa9c9bcb06c81e92f12882bc89712a93b" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___string_descr_8h_1aa9c9bcb06c81e92f12882bc89712a93b" kindref="member">StringDescr_parseUInt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_string_descr___s" kindref="compound">StringDescr_T</ref>*<sp/>str_ptr,<sp/>uint32_t*<sp/><ref refid="_b_l_e_s_w___cycling_power_01_release_notes_8txt_1a5cad1470ef119e32b6400227eeaa8b18" kindref="member">value</ref><sp/>)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0<sp/>;<sp/>i<sp/>&lt;<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1a9f59b34b1f25fe00023291b678246bcc" kindref="member">length</ref><sp/>;<sp/>++i)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>[i]<sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>||<sp/>str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>[i]<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*value<sp/>=<sp/>10<sp/>*<sp/>(*value)<sp/>+<sp/>(str_ptr-&gt;<ref refid="struct_string_descr___s_1ac621bcfb466f3b6a6421c5f48b30ade3" kindref="member">start</ref>[i]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_STRINGDESCRIPTOR_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_StringDescr.h"/>
  </compounddef>
</doxygen>
