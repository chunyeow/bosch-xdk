<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___tcp_8h" kind="file">
    <compoundname>Serval_Tcp.h</compoundname>
    <includes refid="_serval___policy_8h" local="no">Serval_Policy.h</includes>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_serval___ip_8h" local="no">Serval_Ip.h</includes>
    <includes refid="_serval___msg_8h" local="no">Serval_Msg.h</includes>
    <includedby refid="_mbed_t_l_s___socket_8h" local="no">SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Socket.h</includedby>
    <includedby refid="_mbed_t_l_s___tls_8h" local="no">SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</includedby>
    <includedby refid="_serval___http_server_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_HttpServer.h</includedby>
    <includedby refid="_serval___x_tcp_server_8h" local="no">SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpServer.h</includedby>
    <incdepgraph>
      <node id="33007">
        <label>stdbool.h</label>
      </node>
      <node id="33010">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="33011" relation="include">
        </childnode>
        <childnode refid="33045" relation="include">
        </childnode>
      </node>
      <node id="33015">
        <label>stdarg.h</label>
      </node>
      <node id="33042">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33027">
        <label>list.h</label>
      </node>
      <node id="33029">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="33030" relation="include">
        </childnode>
        <childnode refid="33005" relation="include">
        </childnode>
        <childnode refid="33004" relation="include">
        </childnode>
      </node>
      <node id="33047">
        <label>Serval_StringDescr.h</label>
        <link refid="_serval___string_descr_8h"/>
        <childnode refid="33010" relation="include">
        </childnode>
      </node>
      <node id="33013">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="33004" relation="include">
        </childnode>
      </node>
      <node id="33006">
        <label>stdint.h</label>
      </node>
      <node id="33004">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="33005" relation="include">
        </childnode>
      </node>
      <node id="33009">
        <label>stdlib.h</label>
      </node>
      <node id="33045">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="33000">
        <label>Serval_Policy.h</label>
        <link refid="_serval___policy_8h"/>
      </node>
      <node id="33021">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="33024">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="33025" relation="include">
        </childnode>
      </node>
      <node id="33032">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="33034">
        <label>user.h</label>
      </node>
      <node id="33028">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="33004" relation="include">
        </childnode>
        <childnode refid="33029" relation="include">
        </childnode>
        <childnode refid="33032" relation="include">
        </childnode>
      </node>
      <node id="33035">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33050">
        <label>Serval_Callable.h</label>
        <link refid="_serval___callable_8h"/>
        <childnode refid="33010" relation="include">
        </childnode>
        <childnode refid="33051" relation="include">
        </childnode>
      </node>
      <node id="33019">
        <label>stddef.h</label>
      </node>
      <node id="33037">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33017">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="33018" relation="include">
        </childnode>
        <childnode refid="33020" relation="include">
        </childnode>
        <childnode refid="33024" relation="include">
        </childnode>
        <childnode refid="33026" relation="include">
        </childnode>
      </node>
      <node id="33012">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="33013" relation="include">
        </childnode>
        <childnode refid="33005" relation="include">
        </childnode>
        <childnode refid="33014" relation="include">
        </childnode>
        <childnode refid="33015" relation="include">
        </childnode>
        <childnode refid="33016" relation="include">
        </childnode>
        <childnode refid="33009" relation="include">
        </childnode>
        <childnode refid="33010" relation="include">
        </childnode>
        <childnode refid="33017" relation="include">
        </childnode>
        <childnode refid="33028" relation="include">
        </childnode>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33014">
        <label>limits.h</label>
      </node>
      <node id="33046">
        <label>Serval_Msg.h</label>
        <link refid="_serval___msg_8h"/>
        <childnode refid="33001" relation="include">
        </childnode>
        <childnode refid="33010" relation="include">
        </childnode>
        <childnode refid="33047" relation="include">
        </childnode>
        <childnode refid="33048" relation="include">
        </childnode>
        <childnode refid="33049" relation="include">
        </childnode>
        <childnode refid="33050" relation="include">
        </childnode>
        <childnode refid="33002" relation="include">
        </childnode>
        <childnode refid="33000" relation="include">
        </childnode>
        <childnode refid="33052" relation="include">
        </childnode>
      </node>
      <node id="33023">
        <label>portable.h</label>
      </node>
      <node id="33031">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="33008">
        <label>string.h</label>
      </node>
      <node id="33030">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="33031" relation="include">
        </childnode>
        <childnode refid="33004" relation="include">
        </childnode>
      </node>
      <node id="33051">
        <label>Serval_StructCtx.h</label>
        <link refid="_serval___struct_ctx_8h"/>
        <childnode refid="33019" relation="include">
        </childnode>
      </node>
      <node id="33005">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="33006" relation="include">
        </childnode>
        <childnode refid="33007" relation="include">
        </childnode>
        <childnode refid="33008" relation="include">
        </childnode>
        <childnode refid="33009" relation="include">
        </childnode>
      </node>
      <node id="33052">
        <label>Serval_Msg_Obsolete.h</label>
        <link refid="_serval___msg___obsolete_8h"/>
        <childnode refid="33010" relation="include">
        </childnode>
        <childnode refid="33000" relation="include">
        </childnode>
        <childnode refid="33046" relation="include">
        </childnode>
      </node>
      <node id="33002">
        <label>Serval_Ip.h</label>
        <link refid="_serval___ip_8h"/>
        <childnode refid="33003" relation="include">
        </childnode>
        <childnode refid="33010" relation="include">
        </childnode>
      </node>
      <node id="33022">
        <label>projdefs.h</label>
      </node>
      <node id="33044">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="33003">
        <label>PIp.h</label>
        <link refid="_p_ip_8h"/>
        <childnode refid="33004" relation="include">
        </childnode>
      </node>
      <node id="33043">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33049">
        <label>Serval_Filesystem.h</label>
        <link refid="_serval___filesystem_8h"/>
        <childnode refid="33010" relation="include">
        </childnode>
      </node>
      <node id="33001">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="33039">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33025">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="32999">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h</label>
        <link refid="Serval_Tcp.h"/>
        <childnode refid="33000" relation="include">
        </childnode>
        <childnode refid="33001" relation="include">
        </childnode>
        <childnode refid="33002" relation="include">
        </childnode>
        <childnode refid="33046" relation="include">
        </childnode>
      </node>
      <node id="33040">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33048">
        <label>Serval_XmlParser.h</label>
        <link refid="_serval___xml_parser_8h"/>
        <childnode refid="33047" relation="include">
        </childnode>
      </node>
      <node id="33038">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33026">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="33027" relation="include">
        </childnode>
      </node>
      <node id="33041">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33020">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="33006" relation="include">
        </childnode>
        <childnode refid="33013" relation="include">
        </childnode>
        <childnode refid="33021" relation="include">
        </childnode>
      </node>
      <node id="33011">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="33012" relation="include">
        </childnode>
      </node>
      <node id="33018">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="33019" relation="include">
        </childnode>
        <childnode refid="33006" relation="include">
        </childnode>
        <childnode refid="33020" relation="include">
        </childnode>
        <childnode refid="33022" relation="include">
        </childnode>
        <childnode refid="33023" relation="include">
        </childnode>
      </node>
      <node id="33016">
        <label>stdio.h</label>
      </node>
      <node id="33036">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="33033" relation="include">
        </childnode>
      </node>
      <node id="33033">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="33034" relation="include">
        </childnode>
        <childnode refid="33035" relation="include">
        </childnode>
        <childnode refid="33036" relation="include">
        </childnode>
        <childnode refid="33037" relation="include">
        </childnode>
        <childnode refid="33038" relation="include">
        </childnode>
        <childnode refid="33039" relation="include">
        </childnode>
        <childnode refid="33040" relation="include">
        </childnode>
        <childnode refid="33041" relation="include">
        </childnode>
        <childnode refid="33042" relation="include">
        </childnode>
        <childnode refid="33043" relation="include">
        </childnode>
        <childnode refid="33044" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="33056">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_HttpServer.h</label>
        <link refid="_serval___http_server_8h"/>
      </node>
      <node id="33054">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Socket.h</label>
        <link refid="_mbed_t_l_s___socket_8h"/>
      </node>
      <node id="33057">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_XTcpServer.h</label>
        <link refid="_serval___x_tcp_server_8h"/>
      </node>
      <node id="33053">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h</label>
        <link refid="Serval_Tcp.h"/>
        <childnode refid="33054" relation="include">
        </childnode>
        <childnode refid="33055" relation="include">
        </childnode>
        <childnode refid="33056" relation="include">
        </childnode>
        <childnode refid="33057" relation="include">
        </childnode>
      </node>
      <node id="33055">
        <label>SDK/xdk110/Common/source/Private/ServalStack/src/TLS_MbedTLS/MbedTLS_Tls.h</label>
        <link refid="_mbed_t_l_s___tls_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_serval___tcp_8h_1a3743f142e5f1829c836ce0f7950d6430" prot="public" static="no">
        <name>TCP_ACCEPT</name>
        <initializer><ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="107" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1ac0569fec73c207f215f77417a95e3b29" prot="public" static="no">
        <name>TCP_CLOSE</name>
        <initializer><ref refid="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" kindref="member">Tcp_close</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="108" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1ab11361e169bbdbb993767bcdfabc8825" prot="public" static="no">
        <name>TCP_DELETE</name>
        <initializer><ref refid="_serval___tcp_8h_1aa3f7d1d7a236c923c6b13aa2539d5615" kindref="member">Tcp_delete</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="109" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1aa544ec7f43982c931edb2cfcf006f47e" prot="public" static="no">
        <name>TCP_GET_SOCKET_STATUS</name>
        <initializer><ref refid="_serval___tcp_8h_1ac7d950c83a487f414b48b9fd4b2d27df" kindref="member">Tcp_getSocketStatus</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="114" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1afd31e247e71d7ff9e8bfeed9ae6a895a" prot="public" static="no">
        <name>TCP_PREPARE_FOR_SENDING</name>
        <initializer><ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="112" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1a7b7ea849a6239357e6809ac42970bd22" prot="public" static="no">
        <name>TCP_RECEIVE</name>
        <initializer><ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="110" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1a0c6d2609568f122f141269d545475f38" prot="public" static="no">
        <name>TCP_RETRY_SENDING_LATER</name>
        <initializer><ref refid="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" kindref="member">Tcp_retrySendingLater</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="113" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1a21dc7cbd3dd2940cff9ce76cfdd7f636" prot="public" static="no">
        <name>TCP_SEND</name>
        <initializer><ref refid="_serval___tcp_8h_1a987baf8c2aea1ec4dcd7a83d1a4acf36" kindref="member">Tcp_send</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="111" column="9" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_serval___tcp_8h_1a21ee73157f105a712ee7147c4712ad52" prot="public" static="no">
        <name>TCP_UNLISTEN</name>
        <initializer><ref refid="_serval___tcp_8h_1a551504b7988e7fb7d925aac5d7233e97" kindref="member">Tcp_unlisten</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="106" column="10" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" prot="public" static="no">
        <name>Tcp_SocketStatus_T</name>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda02fa6c481dd9bafd6f9dc4ec20c5fb29" prot="public">
          <name>TCP_SOCKET_STATUS_CLOSED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The socket is closed and should be deleted. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda338459d19f8a59b0be6881a6b5838764" prot="public">
          <name>TCP_SOCKET_STATUS_CONNECTING</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If we initiate connection to a remote party, then the socket is connecting until the connection has been established (SYN received from the remote party). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda9a534d2f28d64f6ca0c7132b5d6c77b7" prot="public">
          <name>TCP_SOCKET_STATUS_OPEN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If we accept the connection of the other party or the other party has accepted our connection request, then the socket is open (may be used for data communication). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda57b8d44c5895a1ae9705dcc31555bbcc" prot="public">
          <name>TCP_SOCKET_STATUS_HALF_CLOSED</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If we have initiated the closing of the connection, then the socket is half-closed until the other party closes the connection at its end (FIN received from the other party). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4addaf9be5c349f9d774c29edb6ff934e9ee4" prot="public">
          <name>TCP_SOCKET_STATUS_HALF_OPEN</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If the remote party has initiated the closing of the connection (FIN received), then the socket is half-open until we close the connection at our end (by sending a FIN to the other party). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda7b750ed31ab842758af4867b0b1e7649" prot="public">
          <name>TCP_SOCKET_STATUS_CLOSING</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If the remote party has initiated the closing of the connection, i.e., the socket is half-open, and we close the connection, then the socket is closing. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enum is used to represent connection state of a TCP socket. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="36" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" bodystart="35" bodyend="77"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_accept</definition>
        <argsstring>(Tcp_Listener_T listener, Callable_T *callback_ptr, Tcp_Socket_T *socket_ptr)</argsstring>
        <name>Tcp_accept</name>
        <param>
          <type><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref></type>
          <declname>listener</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function accepts a received incoming attempt to create a new TCP connection from a remote client. After calling this function data can be sent and received over the returned TCP socket. <linebreak/>
</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signalize errors or other issues at the socket. In this case, the callback is invoked with a TCP or an IP retcode.</para><para>Note: This function is only used by a TCP server.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to a TCP server socket</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked if data is received on given socket. If it is a NULL pointer, then the upper-layer is not interested to be notified about socket activities such as incoming packets or socket errors.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, a TCP socket handle is returned. On failure, an invalid socket handle is returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1af120e55a78e0798dd4fd141fd54bbb4f" kindref="member">Tcp_listen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_close</definition>
        <argsstring>(Tcp_Socket_T socket)</argsstring>
        <name>Tcp_close</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function terminates the given TCP connection. Thus calling this function causes TCP to send out a FIN message to the connected partner. After invoking this function the socket may be half-open. This means we cannot send any data to the other side, but we can receive messages from the other side. If the other side also terminates the connection by sending a FIN message, the connection is completely terminated. An incoming FIN message is indicated by an invalid buffer in <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref>. Note: Some platform may implicitly reply with FIN_ACK for a incoming FIN without waiting for confirmation from application. Thus on such platform we never have a half open connection. However application is still expected to call this function.</para><para>If the socket callback is null, then PAL needs to delete the socket implicitly after the close is done.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to be terminated.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_connect</definition>
        <argsstring>(Ip_Address_T *ipAddr_ptr, Ip_Port_T port, Callable_T *callback_ptr, Tcp_Socket_T *socket_ptr)</argsstring>
        <name>Tcp_connect</name>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> *</type>
          <declname>socket_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function causes to open a TCP connection to the given host (IP address, port). It creates a new TCP socket and causes an attempt to establish a new TCP connection (handshake) to the given IP address and port. After finishing the connection establishment, data can be send and received via the returned TCP socket. <linebreak/>
</para><para>After this function returns the connection has not necessarily been entirely established. The function <ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending()</ref> will return RC_TCP_SOCKET_BUSY as long as the connection has not been established.</para><para>When some data is received, the registered callback is invoked. Before the return of the callback, <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> must be received in order to receive the incoming packet. The received CommBuff_T element is not guaranteed to stay available after the return of the callback. If the received packet is needed for further processing after the return of the callback, then the function <ref refid="_serval___comm_buff_8h_1a054fecc831585358121a473a25af9f2f" kindref="member">CommBuff_realloc()</ref> should be used in order to allocate a buffer which is kept until it is explicitly freed using the function <ref refid="_serval___comm_buff_8h_1a420c6c6e9c05f80ae0109af9b02d0d63" kindref="member">CommBuff_free()</ref>.<linebreak/>
</para><para>The callback is also invoked to signalize errors or other issues at the socket. In this case, the callback is invoked with a TCP or an IP retcode.</para><para>Note: This function is only used by a TCP client.</para><para>Note: This function encompasses following Berkeley socket API calls: socket(), connect()</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ipAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to IP address of the remote host (server) to connect to</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP port on remote host to connect to (server port), in network byte order.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked if data is received on given socket.</para></parameterdescription>
</parameteritem>
</parameterlist>
The callback function should lead to calling <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> in order to read the incoming data. It has to be a valid pointer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">socket_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, a TCP socket handle is returned. On failure, an invalid socket handle is returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1aa77ba6a18d9b2cece22895376d2f19c5" kindref="member">Tcp_isValidSocket()</ref>, <ref refid="_serval___tcp_8h_1a987baf8c2aea1ec4dcd7a83d1a4acf36" kindref="member">Tcp_send()</ref>, <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1aa3f7d1d7a236c923c6b13aa2539d5615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_delete</definition>
        <argsstring>(Tcp_Socket_T socket)</argsstring>
        <name>Tcp_delete</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function causes the system to release resources allocated to the given socket. After invoking this function the given TCP socket handle is invalid. This function should be invoked after <ref refid="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" kindref="member">Tcp_close()</ref> had been closed and the socket callback has been invoked with an invalid buffer, which indicates that the connection has been completely closed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to be destroyed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success <linebreak/>
 RC_TCP_INVALID_SOCKET<linebreak/>
 RC_TCP_CONNECTED<linebreak/>
</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" kindref="member">Tcp_close()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1afe7b24f559629ab5330a5369e7f0021e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref></type>
        <definition>Tcp_Listener_T Tcp_getInvalidListener</definition>
        <argsstring>(void)</argsstring>
        <name>Tcp_getInvalidListener</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to un-initialize a listener socket handle. It returns the handle of an invalid listener socket. The call Tcp_isValidListener(Tcp_getInvalidListener()) results in FALSE.</para><para><simplesect kind="return"><para>A handle of an invalid listener socket. Accessing this socket for reading or writing as well as for communication would fail.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1a8b9ce4a740e7bd7ad76c5c487b3d921e" kindref="member">Tcp_isValidListener()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a57f35bd01b19208c0a819b2d01623721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
        <definition>Tcp_Socket_T Tcp_getInvalidSocket</definition>
        <argsstring>(void)</argsstring>
        <name>Tcp_getInvalidSocket</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should be used to un-initialize a socket handle. It returns the handle of an invalid socket. The call Tcp_isValidSocket(Tcp_getInvalidSocket()) results in FALSE.</para><para><simplesect kind="return"><para>A handle of an invalid socket. Accessing this socket for reading or writing as well as for communication would fail.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1aa77ba6a18d9b2cece22895376d2f19c5" kindref="member">Tcp_isValidSocket()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1aa885b568e7df54c7dcef6b74e6d1e869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_getPeerName</definition>
        <argsstring>(Tcp_Socket_T socket, Ip_Address_T *ipAddr_ptr, Ip_Port_T *port_ptr)</argsstring>
        <name>Tcp_getPeerName</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref> *</type>
          <declname>ipAddr_ptr</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref> *</type>
          <declname>port_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function identifies the connection partner (IP address, port) for a given socket handle.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the socket to get information from</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ipAddr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>IP address of the connection partner</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP port of the connection partner, in network byte order.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success <linebreak/>
 RC_TCP_INVALID_SOCKET<linebreak/>
 RC_TCP_NOT_CONNECTED<linebreak/>
 RC_TCP_INVALID_PEER<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a6cd1636e988b25584abae39222afef7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_getSocketError</definition>
        <argsstring>(Tcp_Socket_T const socket, int *error_ptr)</argsstring>
        <name>Tcp_getSocketError</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>error_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to check if there are pending errors on a given TCP socket.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to be checked</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">error_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to error value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK if error value is successfully stored in given error pointer<linebreak/>
 RC_TCP_INVALID_SOCKET<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1ac7d950c83a487f414b48b9fd4b2d27df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_getSocketStatus</definition>
        <argsstring>(Tcp_Socket_T socket, Tcp_SocketStatus_T *status_ptr)</argsstring>
        <name>Tcp_getSocketStatus</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" kindref="member">Tcp_SocketStatus_T</ref> *</type>
          <declname>status_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It returns the status of the given socket.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket the status of which is required. It must be a valid socket.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">status_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The status of the socket. It must be a valid pointer to save the status to.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success<linebreak/>
 RC_TCP_INVALID_SOCKET if the given socket is invalid. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1ae9c81ad0151b6b9463c60bf5aeed5207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tcp_isConnected</definition>
        <argsstring>(Tcp_Socket_T const socket)</argsstring>
        <name>Tcp_isConnected</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the connection for a given TCP socket is established.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to be checked</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if socket is connected, FALSE if socket is not connected.</para></simplesect>
<xrefsect id="deprecated_1_deprecated000059"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="_serval___tcp_8h_1ac7d950c83a487f414b48b9fd4b2d27df" kindref="member">Tcp_getSocketStatus()</ref> instead! </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a8b9ce4a740e7bd7ad76c5c487b3d921e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tcp_isValidListener</definition>
        <argsstring>(Tcp_Listener_T const listener)</argsstring>
        <name>Tcp_isValidListener</name>
        <param>
          <type><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref> const</type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given TCP server socket is a valid one.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP server socket to be checked</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if server socket handle is valid, FALSE if listener handle is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1aa77ba6a18d9b2cece22895376d2f19c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Tcp_isValidSocket</definition>
        <argsstring>(Tcp_Socket_T const socket)</argsstring>
        <name>Tcp_isValidSocket</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function checks if the given TCP socket is a valid one.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to be checked</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if socket handle is valid, FALSE if socket handle is invalid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1af120e55a78e0798dd4fd141fd54bbb4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_listen</definition>
        <argsstring>(Ip_Port_T port, Callable_T *callback, Tcp_Listener_T *listener_ptr)</argsstring>
        <name>Tcp_listen</name>
        <param>
          <type><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref></type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback</declname>
        </param>
        <param>
          <type><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref> *</type>
          <declname>listener_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function creates a new TCP listener socket, binds it to the given port number and causes the socket to enter the listening state. After invoking this function the socket is ready to accept incoming connections.</para><para>When a connection request comes in, the given callback is invoked. Before the callback function returns, <ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref> must be called in order to accept the incoming connection.</para><para>The callback function is also invoked on errors. In this case the callback is invoked with a TCP or an IP error.</para><para>Note: This function is only used by a TCP server.</para><para>Note: This function encompasses following Berkeley socket API calls: socket(), bind(), listen()</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP port to listen at, in network byte order.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>Callback function which is invoked on incoming connection requests. It must be valid and assigned.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">listener_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>On success, a TCP listener handle is given back. On failure, an invalid socket handle is given back.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1a8b9ce4a740e7bd7ad76c5c487b3d921e" kindref="member">Tcp_isValidListener()</ref>, <ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref>, <ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref>, <ref refid="_serval___callable_8h_1a3960f4b58f721ecd74cd6fb356426b46" kindref="member">Callable_isAssigned()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_prepareForSending</definition>
        <argsstring>(Tcp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Tcp_prepareForSending</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prepares the socket and the sending context for sending. This function must be called before invoking <ref refid="_serval___tcp_8h_1a987baf8c2aea1ec4dcd7a83d1a4acf36" kindref="member">Tcp_send()</ref>. It ensures that the socket is ready for sending. It also allocates a communication buffer for serializing the message packets. This means that sendingCtx_ptr-&gt;buffer must be a valid buffer.</para><para>The allocated buffer is used for serialization of the message. It needs to be valid until either a) Tcp_send has been invoked with this buffer after which the ownership of the buffer passes back to the PAL implementation, or b) CommBuff_free has been called on this buffer to indicate that sending has been aborted due to a serialization error.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket over which the message should be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sendingCtx_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the context structure of the sending job.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success. RC_TCP_OUT_OF_MEMORY or RC_TCP_SOCKET_BUSY to indicate the respective transient problems and the stack should retry sending using Tcp_retrySendingLater. Any other IP, TCP or DTLS return code indicates an error that will cause the stack to abort sending.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref>, <ref refid="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" kindref="member">Tcp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="555" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_receive</definition>
        <argsstring>(Tcp_Socket_T socket, CommBuff_T *packet_ptr)</argsstring>
        <name>Tcp_receive</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref> *</type>
          <declname>packet_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function fetches the received data from the given TCP socket. This function should only be called if the socket callback passed to <ref refid="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" kindref="member">Tcp_connect()</ref> or <ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref> is invoked with the status RC_OK, which indicates incoming data.</para><para>If the received CommBuff_T element is invalid while the callback status as well as the retcode of <ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive()</ref> is RC_OK, then a FIN has been received which means that the remote party has closed the connection. If such an invalid CommBuff_T is received after <ref refid="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" kindref="member">Tcp_close()</ref> has been invoked, then the connection is completely closed and should be deleted using the function <ref refid="_serval___tcp_8h_1aa3f7d1d7a236c923c6b13aa2539d5615" kindref="member">Tcp_delete()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to get data of</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">packet_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to communication buffer to which received data is written. The provided CommBuff_T element should be released by the upper-layer as soon as possible. After the return of the socket callback, the buffer is not guaranteed to stay available.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept()</ref>, <ref refid="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" kindref="member">Tcp_connect()</ref>, <ref refid="_serval___comm_buff_8h_1abffb6953a4bc8d9b980d01fd80cadffb" kindref="member">CommBuff_isValid()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_retrySendingLater</definition>
        <argsstring>(Tcp_Socket_T const socket, MsgSendingCtx_T *sendingCtx_ptr)</argsstring>
        <name>Tcp_retrySendingLater</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref> const</type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref> *</type>
          <declname>sendingCtx_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function should schedule the given sending job to be carried out later. This means that this function takes care to invoke the corresponding sending function, i.e., sendingCtx_ptr-&gt;sendingFunc, at some point later. Any other return code except RC_OK means that sending cannot be completed by by lower layer at given time and should be dropped.</para><para>It is up to the PAL implementation when to execute the function. However, the execution MUST be asynchronous, i.e. the caller of this function can remove itself from the execution stack and is not part of the execution stack when sendingCtx_ptr-&gt;sendingFunc is executed.</para><para>An implementation of this function is free to decide whether to call sendingCtx_ptr-&gt;sending function after an interval or when the socket is able to send again. In the latter case, however, calling this function on a socket that is not busy, MUST nevertheless trigger execution of sendingCtx_ptr-&gt;sendingFunc.</para><para>Finally, on multi-threaded implementations of the PAL, the execution of sendingCtx_ptr-&gt;sendingFunc is expected to happen in the same context that normal network operations take place in.</para><para>Implementation note: The interface currently does not provide a meaningful way for aborting a retry. This can occur if the message times out while waiting for transmission and is thus deleted. This in turn will result in the MsgSendingCtx_T structure to have been cleared. Thus an implementation must check the validity of the sending function in sendingCtx_ptr-&gt;sendingFunc before calling it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket over which the message should be sent.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sendingCtx_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the context structure of the sending job.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success, or a TCP or an IP error otherwise.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___msg___obsolete_8h_1a8104181ca5b3dc04a8926da3c895a6ef" kindref="member">MsgSendingCtx_T</ref>, <ref refid="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" kindref="member">Tcp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a987baf8c2aea1ec4dcd7a83d1a4acf36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_send</definition>
        <argsstring>(Tcp_Socket_T socket, CommBuff_T packet, Callable_T *callback_ptr)</argsstring>
        <name>Tcp_send</name>
        <param>
          <type><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref></type>
          <declname>socket</declname>
        </param>
        <param>
          <type><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref></type>
          <declname>packet</declname>
        </param>
        <param>
          <type><ref refid="_serval___callable_8h_1aa408037ca2aba1815007b4f41386f7c6" kindref="member">Callable_T</ref> *</type>
          <declname>callback_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sends the data in the given CommBuff via the given TCP socket. Every time before invoking this function, the function <ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending()</ref> must be invoked and return RC_OK. The CommBuff_T element provided by <ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending()</ref> must be used here to carry the payload.</para><para>After this function returns, the packet will not necessarily have been sent. The caller will be informed about the completion of sending using the given callback function. Furthermore, successful sending does guarantee that the remote party received the packet as TCP does provide reliable communication.</para><para>The callback is also used to report errors to the callers. If an error occurred after Tcp_send has returned. In this case the callback is invoked with a TCP or an IP retcode.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">socket</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the TCP socket to send data</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">packet</parametername>
</parameternamelist>
<parameterdescription>
<para>Handle to the CommBuff_T which contains the payload to be sent. This CommBuff_T must be the one which has been provided by the function <ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending()</ref>. The PAL implementation must free any buffers that have been allocated. Thus, the buffer must not be used after the return of this function.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to callback function which is invoked after sending of given data is complete. The application has to wait with sending a new packet until the callback is invoked.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success. RC_TCP_OUT_OF_MEMORY or RC_TCP_SOCKET_BUSY to indicate the respective transient problems and the stack should retry sending using Tcp_retrySendingLater. Any other IP, TCP or DTLS return code indicates an error that will cause the stack to abort sending.</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" kindref="member">Tcp_retrySendingLater()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___tcp_8h_1a551504b7988e7fb7d925aac5d7233e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t Tcp_unlisten</definition>
        <argsstring>(Tcp_Listener_T listener)</argsstring>
        <name>Tcp_unlisten</name>
        <param>
          <type><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref></type>
          <declname>listener</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function stops listening on given TCP listener socket. After invoking this function the given TCP listener handle is invalid. Before invoking this function <ref refid="_serval___tcp_8h_1af120e55a78e0798dd4fd141fd54bbb4f" kindref="member">Tcp_listen()</ref> has to be called. <linebreak/>
 This function is only used by a TCP server.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>TCP listener handle to be closed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RC_OK on success <linebreak/>
 RC_TCP_PORT_NOT_USED port not registered as listener<linebreak/>
</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___tcp_8h_1a8b9ce4a740e7bd7ad76c5c487b3d921e" kindref="member">Tcp_isValidListener()</ref>, <ref refid="_serval___tcp_8h_1af120e55a78e0798dd4fd141fd54bbb4f" kindref="member">Tcp_listen()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface to the platform TCP (Transport Layer) </para>    </briefdescription>
    <detaileddescription>
<para>This interface provides functions to handle TCP communication. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/>SERVAL_TCP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_TCP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___policy_8h" kindref="compound">Serval_Policy.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___ip_8h" kindref="compound">Serval_Ip.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_SENDING_CONTEXT_IN_PAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_sending_ctx_8h" kindref="compound">Serval_MsgSendingCtx.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___msg_8h" kindref="compound">Serval_Msg.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda02fa6c481dd9bafd6f9dc4ec20c5fb29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda02fa6c481dd9bafd6f9dc4ec20c5fb29" kindref="member">TCP_SOCKET_STATUS_CLOSED</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda338459d19f8a59b0be6881a6b5838764" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda338459d19f8a59b0be6881a6b5838764" kindref="member">TCP_SOCKET_STATUS_CONNECTING</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda9a534d2f28d64f6ca0c7132b5d6c77b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda9a534d2f28d64f6ca0c7132b5d6c77b7" kindref="member">TCP_SOCKET_STATUS_OPEN</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda57b8d44c5895a1ae9705dcc31555bbcc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda57b8d44c5895a1ae9705dcc31555bbcc" kindref="member">TCP_SOCKET_STATUS_HALF_CLOSED</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4addaf9be5c349f9d774c29edb6ff934e9ee4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4addaf9be5c349f9d774c29edb6ff934e9ee4" kindref="member">TCP_SOCKET_STATUS_HALF_OPEN</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda7b750ed31ab842758af4867b0b1e7649" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4adda7b750ed31ab842758af4867b0b1e7649" kindref="member">TCP_SOCKET_STATUS_CLOSING</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" kindref="member">Tcp_SocketStatus_T</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_POLICY_STACK_CALLS_TLS_API<sp/>&amp;&amp;<sp/>SERVAL_ENABLE_TLS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_unlisten(<ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>listener);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_accept(<ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>listener,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_close(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_delete(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_receive(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>*packet_ptr);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_send(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>packet,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_prepareForSending(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_retrySendingLater(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tls_getSocketStatus(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" kindref="member">Tcp_SocketStatus_T</ref><sp/>*status_ptr);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_UNLISTEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_unlisten</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_ACCEPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_accept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_CLOSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_RECEIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_SEND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tls_send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_PREPARE_FOR_SENDING<sp/>Tls_prepareForSending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_RETRY_SENDING_LATER<sp/>Tls_retrySendingLater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_GET_SOCKET_STATUS<sp/><sp/><sp/>Tls_getSocketStatus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="_serval___tcp_8h_1a21ee73157f105a712ee7147c4712ad52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_UNLISTEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_unlisten</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="_serval___tcp_8h_1a3743f142e5f1829c836ce0f7950d6430" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_ACCEPT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_accept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="_serval___tcp_8h_1ac0569fec73c207f215f77417a95e3b29" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_CLOSE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_close</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="_serval___tcp_8h_1ab11361e169bbdbb993767bcdfabc8825" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_DELETE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_delete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="_serval___tcp_8h_1a7b7ea849a6239357e6809ac42970bd22" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_RECEIVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="_serval___tcp_8h_1a21dc7cbd3dd2940cff9ce76cfdd7f636" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_SEND<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tcp_send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="_serval___tcp_8h_1afd31e247e71d7ff9e8bfeed9ae6a895a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_PREPARE_FOR_SENDING<sp/>Tcp_prepareForSending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="_serval___tcp_8h_1a0c6d2609568f122f141269d545475f38" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_RETRY_SENDING_LATER<sp/>Tcp_retrySendingLater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="_serval___tcp_8h_1aa544ec7f43982c931edb2cfcf006f47e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_GET_SOCKET_STATUS<sp/><sp/><sp/>Tcp_getSocketStatus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1af120e55a78e0798dd4fd141fd54bbb4f" kindref="member">Tcp_listen</ref>(<ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>*listener_ptr);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a551504b7988e7fb7d925aac5d7233e97" kindref="member">Tcp_unlisten</ref>(<ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>listener);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a407b02b3cc35d8b7033fceff0e6922e2" kindref="member">Tcp_accept</ref>(<ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>listener,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a6024b4a07d1b4aac29b2766541d138a7" kindref="member">Tcp_connect</ref>(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,<sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1ac7d950c83a487f414b48b9fd4b2d27df" kindref="member">Tcp_getSocketStatus</ref>(</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_serval___tcp_8h_1a1547d6ed4357df1dddc94503401e4add" kindref="member">Tcp_SocketStatus_T</ref><sp/>*status_ptr);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1ab1ea2de0858606db9ba57290c391e53d" kindref="member">Tcp_close</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1aa3f7d1d7a236c923c6b13aa2539d5615" kindref="member">Tcp_delete</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1aa885b568e7df54c7dcef6b74e6d1e869" kindref="member">Tcp_getPeerName</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>*port_ptr);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a987baf8c2aea1ec4dcd7a83d1a4acf36" kindref="member">Tcp_send</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>packet,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1ab19d4c643b8d184dd3e7fa19331cb2e3" kindref="member">Tcp_receive</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>socket,<sp/><ref refid="_p_basics_8h_1a77e5973480645dc927598cee9a08beca" kindref="member">CommBuff_T</ref><sp/>*packet_ptr);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___tcp_8h_1aa77ba6a18d9b2cece22895376d2f19c5" kindref="member">Tcp_isValidSocket</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___tcp_8h_1a8b9ce4a740e7bd7ad76c5c487b3d921e" kindref="member">Tcp_isValidListener</ref>(<ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>listener);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___tcp_8h_1ae9c81ad0151b6b9463c60bf5aeed5207" kindref="member">Tcp_isConnected</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a6cd1636e988b25584abae39222afef7b" kindref="member">Tcp_getSocketError</ref>(<ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*error_ptr);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/><ref refid="_serval___tcp_8h_1afe7b24f559629ab5330a5369e7f0021e" kindref="member">Tcp_getInvalidListener</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/><ref refid="_serval___tcp_8h_1a57f35bd01b19208c0a819b2d01623721" kindref="member">Tcp_getInvalidSocket</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1abfa578505c4f119efa68abb3b52f515d" kindref="member">Tcp_prepareForSending</ref>(</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___tcp_8h_1a0d7278c8a773823b2eeaf3f02ec9679c" kindref="member">Tcp_retrySendingLater</ref>(</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>socket,<sp/><ref refid="struct_msg_sending_ctx___s" kindref="compound">MsgSendingCtx_T</ref><sp/>*sendingCtx_ptr);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_TLS_SERVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tcp_listenSecure(<ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,<sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_p_ip_8h_1aa89ed089ee7e2fadb12bde448aeaad7b" kindref="member">Tcp_Listener_T</ref><sp/>*listener_ptr);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_TLS_SERVER<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_TLS_CLIENT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>Tcp_connectSecure(<ref refid="_p_ip_8h_1ac1d21d89ac985b0d00d1697d098a1d1e" kindref="member">Ip_Address_T</ref><sp/>*ipAddr_ptr,<sp/><ref refid="_p_ip_8h_1a946a51fb3a1e4f79c1f86ad62fb1e1c1" kindref="member">Ip_Port_T</ref><sp/>port,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_callable___s" kindref="compound">Callable_T</ref><sp/>*callback_ptr,<sp/><ref refid="_p_ip_8h_1afed1528da870730b59c4f58ea77bc5ae" kindref="member">Tcp_Socket_T</ref><sp/>*socket_ptr);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_TLS_CLIENT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_TCP_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/pal/Serval_Tcp.h"/>
  </compounddef>
</doxygen>
