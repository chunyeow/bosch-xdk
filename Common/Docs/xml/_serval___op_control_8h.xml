<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_serval___op_control_8h" kind="file">
    <compoundname>Serval_OpControl.h</compoundname>
    <includes refid="_serval___defines_8h" local="no">Serval_Defines.h</includes>
    <includes refid="_p_basics_8h" local="no">PBasics.h</includes>
    <includes refid="_serval___types_8h" local="no">Serval_Types.h</includes>
    <includes refid="_serval___exceptions_8h" local="no">Serval_Exceptions.h</includes>
    <incdepgraph>
      <node id="31037">
        <label>stdbool.h</label>
      </node>
      <node id="31043">
        <label>Serval_Types.h</label>
        <link refid="_serval___types_8h"/>
        <childnode refid="31044" relation="include">
        </childnode>
        <childnode refid="31045" relation="include">
        </childnode>
      </node>
      <node id="31041">
        <label>stdarg.h</label>
      </node>
      <node id="31071">
        <label>netcfg.h</label>
        <link refid="netcfg_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31056">
        <label>list.h</label>
      </node>
      <node id="31058">
        <label>BCDS_CmdProcessor.h</label>
        <link refid="_b_c_d_s___cmd_processor_8h"/>
        <childnode refid="31059" relation="include">
        </childnode>
        <childnode refid="31035" relation="include">
        </childnode>
        <childnode refid="31034" relation="include">
        </childnode>
      </node>
      <node id="31033">
        <label>BCDS_Assert.h</label>
        <link refid="_b_c_d_s___assert_8h"/>
        <childnode refid="31034" relation="include">
        </childnode>
      </node>
      <node id="31036">
        <label>stdint.h</label>
      </node>
      <node id="31034">
        <label>BCDS_Retcode.h</label>
        <link refid="_b_c_d_s___retcode_8h"/>
        <childnode refid="31035" relation="include">
        </childnode>
      </node>
      <node id="31039">
        <label>stdlib.h</label>
      </node>
      <node id="31045">
        <label>Serval_Exceptions.h</label>
        <link refid="_serval___exceptions_8h"/>
      </node>
      <node id="31050">
        <label>BCDS_TaskConfig.h</label>
        <link refid="_b_c_d_s___task_config_8h"/>
      </node>
      <node id="31053">
        <label>semphr.h</label>
        <link refid="semphr_8h"/>
        <childnode refid="31054" relation="include">
        </childnode>
      </node>
      <node id="31061">
        <label>BCDS_ServalPalConfig.h</label>
        <link refid="_b_c_d_s___serval_pal_config_8h"/>
      </node>
      <node id="31063">
        <label>user.h</label>
      </node>
      <node id="31057">
        <label>BCDS_ServalPal.h</label>
        <link refid="_b_c_d_s___serval_pal_8h"/>
        <childnode refid="31034" relation="include">
        </childnode>
        <childnode refid="31058" relation="include">
        </childnode>
        <childnode refid="31061" relation="include">
        </childnode>
      </node>
      <node id="31064">
        <label>../source/objInclusion.h</label>
        <link refid="obj_inclusion_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31030">
        <label>SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h</label>
        <link refid="Serval_OpControl.h"/>
        <childnode refid="31031" relation="include">
        </childnode>
        <childnode refid="31032" relation="include">
        </childnode>
        <childnode refid="31043" relation="include">
        </childnode>
        <childnode refid="31045" relation="include">
        </childnode>
      </node>
      <node id="31048">
        <label>stddef.h</label>
      </node>
      <node id="31066">
        <label>fs.h</label>
        <link refid="fs_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31046">
        <label>PThreading.h</label>
        <link refid="_p_threading_8h"/>
        <childnode refid="31047" relation="include">
        </childnode>
        <childnode refid="31049" relation="include">
        </childnode>
        <childnode refid="31053" relation="include">
        </childnode>
        <childnode refid="31055" relation="include">
        </childnode>
      </node>
      <node id="31032">
        <label>PBasics.h</label>
        <link refid="_p_basics_8h"/>
        <childnode refid="31033" relation="include">
        </childnode>
        <childnode refid="31035" relation="include">
        </childnode>
        <childnode refid="31040" relation="include">
        </childnode>
        <childnode refid="31041" relation="include">
        </childnode>
        <childnode refid="31042" relation="include">
        </childnode>
        <childnode refid="31039" relation="include">
        </childnode>
        <childnode refid="31043" relation="include">
        </childnode>
        <childnode refid="31046" relation="include">
        </childnode>
        <childnode refid="31057" relation="include">
        </childnode>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31040">
        <label>limits.h</label>
      </node>
      <node id="31052">
        <label>portable.h</label>
      </node>
      <node id="31060">
        <label>BCDS_UtilsConfig.h</label>
        <link refid="_b_c_d_s___utils_config_8h"/>
      </node>
      <node id="31038">
        <label>string.h</label>
      </node>
      <node id="31059">
        <label>BCDS_Utils.h</label>
        <link refid="_b_c_d_s___utils_8h"/>
        <childnode refid="31060" relation="include">
        </childnode>
        <childnode refid="31034" relation="include">
        </childnode>
      </node>
      <node id="31035">
        <label>BCDS_Basics.h</label>
        <link refid="_b_c_d_s___basics_8h"/>
        <childnode refid="31036" relation="include">
        </childnode>
        <childnode refid="31037" relation="include">
        </childnode>
        <childnode refid="31038" relation="include">
        </childnode>
        <childnode refid="31039" relation="include">
        </childnode>
      </node>
      <node id="31051">
        <label>projdefs.h</label>
      </node>
      <node id="31073">
        <label>../source/nonos.h</label>
        <link refid="nonos_8h"/>
      </node>
      <node id="31072">
        <label>wlan_rx_filters.h</label>
        <link refid="wlan__rx__filters_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31031">
        <label>Serval_Defines.h</label>
        <link refid="_serval___defines_8h"/>
      </node>
      <node id="31068">
        <label>netapp.h</label>
        <link refid="netapp_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31054">
        <label>queue.h</label>
        <link refid="queue_8h"/>
      </node>
      <node id="31069">
        <label>wlan.h</label>
        <link refid="_libraries_2_wi_fi_23rd-party_2_t_i_2simplelink_2include_2_w_l_a_n_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31067">
        <label>socket.h</label>
        <link refid="socket_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31055">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="31056" relation="include">
        </childnode>
      </node>
      <node id="31070">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31049">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
        <childnode refid="31036" relation="include">
        </childnode>
        <childnode refid="31033" relation="include">
        </childnode>
        <childnode refid="31050" relation="include">
        </childnode>
      </node>
      <node id="31044">
        <label>Serval_Basics.h</label>
        <link refid="_serval___basics_8h"/>
        <childnode refid="31032" relation="include">
        </childnode>
      </node>
      <node id="31047">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="31048" relation="include">
        </childnode>
        <childnode refid="31036" relation="include">
        </childnode>
        <childnode refid="31049" relation="include">
        </childnode>
        <childnode refid="31051" relation="include">
        </childnode>
        <childnode refid="31052" relation="include">
        </childnode>
      </node>
      <node id="31042">
        <label>stdio.h</label>
      </node>
      <node id="31065">
        <label>trace.h</label>
        <link refid="trace_8h"/>
        <childnode refid="31062" relation="include">
        </childnode>
      </node>
      <node id="31062">
        <label>simplelink.h</label>
        <link refid="simplelink_8h"/>
        <childnode refid="31063" relation="include">
        </childnode>
        <childnode refid="31064" relation="include">
        </childnode>
        <childnode refid="31065" relation="include">
        </childnode>
        <childnode refid="31066" relation="include">
        </childnode>
        <childnode refid="31067" relation="include">
        </childnode>
        <childnode refid="31068" relation="include">
        </childnode>
        <childnode refid="31069" relation="include">
        </childnode>
        <childnode refid="31070" relation="include">
        </childnode>
        <childnode refid="31071" relation="include">
        </childnode>
        <childnode refid="31072" relation="include">
        </childnode>
        <childnode refid="31073" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbed" prot="public" static="no">
        <name>NVData_Dir_T</name>
        <enumvalue id="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbeda40c0dd02e135fa3308900866841aae71" prot="public">
          <name>NVDATA_DIR_READ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbedad6ee6294330522adc4abe026cc06855f" prot="public">
          <name>NVDATA_DIR_WRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a typedef for access type (read or write) to the non-volatile memory block. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="166" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" bodystart="165" bodyend="169"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="_serval___op_control_8h_1af27b699739aa1818d61cbb5e7f65a695" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* EmergencyFunc_T)(retcode_t)</definition>
        <argsstring>)(retcode_t)</argsstring>
        <name>EmergencyFunc_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This data type represents a function pointer to an emergency function which will be called by the stack to inform application, in case of a fatal error is detected. The application must register such an emergency function. <simplesect kind="see"><para>OperationControl_registerEmergencyFunc() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="75" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___op_control_8h_1a793a602aaf258c94eb60aba99242a947" prot="public" static="no">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref>(*</type>
        <definition>typedef retcode_t(* NVData_Func_T)(NVData_Dir_T dir, NVData_T *data_ptr)</definition>
        <argsstring>)(NVData_Dir_T dir, NVData_T *data_ptr)</argsstring>
        <name>NVData_Func_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A data type of a function for accessing the non-volatile data block of the stack.</para><para>This data type represents a function which is provided by the application and used by the stack to access the non-volatile data block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The direction of the access, read or write.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the struct provided by the stack. In the case of a read access, it is used to read the non-volatile data into it. In the case of write access, it contains the data block which should be written to the non-volatile memory.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: <linebreak/>
 RC_OK if the data transfer was successful<linebreak/>
 RC_NV_MEMORY_ACCESS_ERROR if the access to non-volatile memory failed</para></simplesect>
<simplesect kind="see"><para><ref refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbed" kindref="member">NVData_Dir_T</ref>, <ref refid="_serval___op_control_8h_1aa3ca2cce40f5502c0710ea22edb34b52" kindref="member">OpControl_registerNVDataFunc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="193" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="_serval___op_control_8h_1a0adec9639ac7f715ebfaa1eb70281cbb" prot="public" static="no">
        <type>struct <ref refid="struct_n_v_data___s" kindref="compound">NVData_S</ref></type>
        <definition>typedef struct NVData_S NVData_T</definition>
        <argsstring></argsstring>
        <name>NVData_T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A type definition for the non-volatile data of the stack.</para><para><simplesect kind="see"><para><ref refid="struct_n_v_data___s" kindref="compound">NVData_S</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="75" column="1" bodyfile="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_serval___op_control_8h_1a9fa49795c12d859724300061b18ee0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t OpControl_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>OpControl_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the operation control and the utility modules including Log, Exception Handling, Resources Monitor, etc. The application needs to explicitly invoke this function only if it needs to use any of the utility feature, such as logging, before initializing any protocols of the stack.</para><para><simplesect kind="return"><para>RC_OK if initialization was successful<linebreak/>
 RC_UTIL_INIT_ERROR if the initialization of the utility module fails. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1a30988dd5f59c3557a6ea0ace63554824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpControl_isActiv</definition>
        <argsstring>(void)</argsstring>
        <name>OpControl_isActiv</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return state of DutyCycling. If System is in sleep or an OperationControl_trySleep sequence is running, the function will return false. Modules should not operate any activity if OperationControl_isActiv returns false</para><para><simplesect kind="return"><para>true -&gt; active, false-&gt;sleep or try sleep </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1a339aadd36a0f7ffe5b0a6f65cf87b723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpControl_notify</definition>
        <argsstring>(retcode_t exception)</argsstring>
        <name>OpControl_notify</name>
        <param>
          <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
          <declname>exception</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is used to notify the operation control module about exceptions. It should be used when a runtime exception occurs and is being handled. This function will log the exception. In the case of a fatal exception it will also invoke the application emergency function, which has been registered by the application using <ref refid="_serval___op_control_8h_1ab50e74daf6104227f764ca229730ea5d" kindref="member">OpControl_registerEmergencyFunc()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">exception</parametername>
</parameternamelist>
<parameterdescription>
<para>The exception code</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="_serval___op_control_8h_1ab50e74daf6104227f764ca229730ea5d" kindref="member">OpControl_registerEmergencyFunc()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1ac6d001b0a4f05b91e4f7aa77a8fea319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t OpControl_preInitialize</definition>
        <argsstring>(void)</argsstring>
        <name>OpControl_preInitialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function must be invoked on booting the device software. It prepares the stack memory image. It must be called before calling any other functions/modules of the stack, even before the initialization of any modules of the stack. This function must not called more than once when the system starts! <simplesect kind="return"><para>RC_OK on success <linebreak/>
 RC_PREINITIALIZE_FATAL fatal error<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1ab50e74daf6104227f764ca229730ea5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpControl_registerEmergencyFunc</definition>
        <argsstring>(EmergencyFunc_T func)</argsstring>
        <name>OpControl_registerEmergencyFunc</name>
        <param>
          <type><ref refid="_serval___op_control_8h_1af27b699739aa1818d61cbb5e7f65a695" kindref="member">EmergencyFunc_T</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function registers an emergency function which is invoked in the case of fatal exceptions. The application must provide such an emergency callback which is able to recover the device from this faulty state. The application may for example reboot the device or to put it in a safe state.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to a EmergencyFunc_T object which defines a callback which application wants exception handling module to call, in case of a fatal error is detected. It has to be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1aa3ca2cce40f5502c0710ea22edb34b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpControl_registerNVDataFunc</definition>
        <argsstring>(NVData_Func_T func)</argsstring>
        <name>OpControl_registerNVDataFunc</name>
        <param>
          <type><ref refid="_serval___op_control_8h_1a793a602aaf258c94eb60aba99242a947" kindref="member">NVData_Func_T</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Using this function the application provides the stack with the function to access the non-volatile memory block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function to be used to access the non-volatile memory block. It has to be a valid pointer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1a7b9a0b42ef3f3cab5f5aa6098d9922aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t OpControl_trySleep</definition>
        <argsstring>(void)</argsstring>
        <name>OpControl_trySleep</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try set the stack into sleep state. If there are no ongoing actions, which cannot be stopped, the function will return RC_OK. After this call no further stack requests are committed. The stack enters state SLEEP. If not successful the stack remains state ACTIVE and application shall call OperationControl_trySleep later.</para><para><simplesect kind="return"><para>RC_OK when stack is set to sleep<linebreak/>
 RC_RETRY_SLEEP_LATER stack not ready for sleep, retry function later<linebreak/>
 RC_ALREADY_SLEEP when stack is already sleeping<linebreak/>
 RC_SLEEP_MODE_ERROR<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_serval___op_control_8h_1a1c664ed20b04e0952b5bcdbaff591947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref></type>
        <definition>retcode_t OpControl_wakeUp</definition>
        <argsstring>(void)</argsstring>
        <name>OpControl_wakeUp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wake up the stack from sleep mode.</para><para><simplesect kind="return"><para>RC_OK when stack is awaken from sleep<linebreak/>
 RC_DOESNT_SLEEP stack is already active<linebreak/>
 RC_SLEEP_MODE_ERROR<linebreak/>
 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h" line="304" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An interface to control the operation of stack.</para><para>The header file provides functions to pre-initialize the stack components, which means, setting some essential flags to zero in the case this is not done by the boot loader. This must be done exactly once when the devices boots. </para>    </briefdescription>
    <detaileddescription>
<para>In some applications, the device needs to periodically switch off and go to a deep-sleep state, where RAM and CPU registers are not retained. The header provides the functions to put the stack to sleep and to wake it up in order to support such a duty-cycling mechanism.</para><para>It also allows the application to register the application functions which are needed by the stack. These are the following: <itemizedlist>
<listitem>
<para>The emergency function function which will be invoked in the case of an fatal error  </para></listitem>
<listitem>
<para>The application data access function which enables the stack to access application specific data items such as serial number, model name, etc.  </para></listitem>
<listitem>
<para>The access function to the non-volatile memory to save and restore stack status before and after a sleep state.  </para></listitem>
</itemizedlist>
</para><para>Each application needs to include this header and to invoke the following functions at the initialization phase in order to be able to use the stack correctly. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/********************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2018<sp/>Contributors<sp/>to<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>See<sp/>the<sp/>NOTICE<sp/>file(s)<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>information<sp/>regarding<sp/>copyright<sp/>ownership.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>and<sp/>the<sp/>accompanying<sp/>materials<sp/>are<sp/>made<sp/>available<sp/>under<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>terms<sp/>of<sp/>the<sp/>Eclipse<sp/>Public<sp/>License<sp/>2.0<sp/>which<sp/>is<sp/>available<sp/>at</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>http://www.eclipse.org/legal/epl-2.0</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>EPL-2.0</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>********************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor">#ifndef<sp/>SERVAL_OPCONTROL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVAL_OPCONTROL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___defines_8h" kindref="compound">Serval_Defines.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_p_basics_8h" kindref="compound">PBasics.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___types_8h" kindref="compound">Serval_Types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="_serval___exceptions_8h" kindref="compound">Serval_Exceptions.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SERVAL_PREINITIALIZED_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>PAL<sp/>must<sp/>define<sp/>the<sp/>macro<sp/>SERVAL_PREINITIALIZED_DATA<sp/>with<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor">the<sp/>value<sp/>1<sp/>or<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="_serval___op_control_8h_1af27b699739aa1818d61cbb5e7f65a695" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="_serval___op_control_8h_1af27b699739aa1818d61cbb5e7f65a695" kindref="member">EmergencyFunc_T</ref>)(<ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_APP_DATA_ACCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DPWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_RESET_COUNTER<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_DEVICE_UUID,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_SERIAL_NUM,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_FIRMWARE_VERSION,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_DEVICE_FRIENDLY_NAME,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>APPDATA_NO_MORE_ITEM</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}<sp/>AppData_Item_T;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>(*AppData_Func_T)(AppData_Item_T<sp/>item,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buff_ptr,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t*<sp/>length_ptr);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#if<sp/>SERVAL_ENABLE_APP_DATA_ACCESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="_serval___op_control_8h_1a0adec9639ac7f715ebfaa1eb70281cbb" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_n_v_data___s" kindref="compound">NVData_S</ref><sp/><ref refid="struct_n_v_data___s" kindref="compound">NVData_T</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DUTY_CYCLING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbed" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167" refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbeda40c0dd02e135fa3308900866841aae71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbeda40c0dd02e135fa3308900866841aae71" kindref="member">NVDATA_DIR_READ</ref>,</highlight></codeline>
<codeline lineno="168" refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbedad6ee6294330522adc4abe026cc06855f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbedad6ee6294330522adc4abe026cc06855f" kindref="member">NVDATA_DIR_WRITE</ref>,</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}<sp/><ref refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbed" kindref="member">NVData_Dir_T</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="_serval___op_control_8h_1a793a602aaf258c94eb60aba99242a947" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>(*<ref refid="_serval___op_control_8h_1a793a602aaf258c94eb60aba99242a947" kindref="member">NVData_Func_T</ref>)(<ref refid="_serval___op_control_8h_1a34831970a1c0175c3891c36fcceddbed" kindref="member">NVData_Dir_T</ref><sp/>dir,<sp/><ref refid="struct_n_v_data___s" kindref="compound">NVData_T</ref><sp/>*data_ptr);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>#if<sp/>SERVAL_ENABLE_DUTY_CYCLING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><sp/><ref refid="_serval___op_control_8h_1ac6d001b0a4f05b91e4f7aa77a8fea319" kindref="member">OpControl_preInitialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><sp/><ref refid="_serval___op_control_8h_1a9fa49795c12d859724300061b18ee0c5" kindref="member">OpControl_initialize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___op_control_8h_1ab50e74daf6104227f764ca229730ea5d" kindref="member">OpControl_registerEmergencyFunc</ref>(<ref refid="_serval___op_control_8h_1af27b699739aa1818d61cbb5e7f65a695" kindref="member">EmergencyFunc_T</ref><sp/>func);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___op_control_8h_1a339aadd36a0f7ffe5b0a6f65cf87b723" kindref="member">OpControl_notify</ref>(<ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/>exception);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_APP_DATA_ACCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>OpControl_registerAppDataFunc(AppData_Func_T<sp/>func);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_APP_DATA_ACCESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>SERVAL_ENABLE_DUTY_CYCLING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_serval___op_control_8h_1aa3ca2cce40f5502c0710ea22edb34b52" kindref="member">OpControl_registerNVDataFunc</ref>(<ref refid="_serval___op_control_8h_1a793a602aaf258c94eb60aba99242a947" kindref="member">NVData_Func_T</ref><sp/>func);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><ref refid="_serval___op_control_8h_1a7b9a0b42ef3f3cab5f5aa6098d9922aa" kindref="member">OpControl_trySleep</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="_serval___types_8h_1a473797d61ec6d5f5a4f91d1d8b56b198" kindref="member">retcode_t</ref><sp/><sp/><ref refid="_serval___op_control_8h_1a1c664ed20b04e0952b5bcdbaff591947" kindref="member">OpControl_wakeUp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_serval___op_control_8h_1a30988dd5f59c3557a6ea0ace63554824" kindref="member">OpControl_isActiv</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_ENABLE_DUTY_CYCLING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SERVAL_OPCONTROL_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Jenkins/XDK/Pipeline/xdk110/SDK/xdk110/Libraries/ServalStack/3rd-party/ServalStack/api/Serval_OpControl.h"/>
  </compounddef>
</doxygen>
